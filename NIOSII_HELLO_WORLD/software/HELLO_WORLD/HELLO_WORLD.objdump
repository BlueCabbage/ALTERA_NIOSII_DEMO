
HELLO_WORLD.elf:     file format elf32-littlenios2
HELLO_WORLD.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000054ec memsz 0x000054ec flags r-x
    LOAD off    0x0000650c vaddr 0x0001550c paddr 0x00016f54 align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x0000899c vaddr 0x0001899c paddr 0x0001899c align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005308  000101b4  000101b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  000154bc  000154bc  000064bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  0001550c  00016f54  0000650c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  0001899c  0001899c  0000899c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00007f54  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008d8  00000000  00000000  00007f78  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000d22  00000000  00000000  00008850  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00019186  00000000  00000000  00009572  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004de3  00000000  00000000  000226f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c38e  00000000  00000000  000274db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000fc8  00000000  00000000  0003386c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000015ce  00000000  00000000  00034834  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003db2  00000000  00000000  00035e02  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00039bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  00039be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003c315  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0003c318  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003c31d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003c31e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003c31f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003c323  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003c327  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0003c32b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0003c336  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0003c341  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  0003c34c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001a  00000000  00000000  0003c352  2**0
                  CONTENTS, READONLY
 29 .jdi          000046f1  00000000  00000000  0003c36c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000268e5  00000000  00000000  00040a5d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b4 l    d  .text	00000000 .text
000154bc l    d  .rodata	00000000 .rodata
0001550c l    d  .rwdata	00000000 .rwdata
0001899c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000101fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0001550c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00011b6c l     F .text	00000058 std
00011c78 l     F .text	00000008 __fp_lock
00011c80 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
00012c40 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00012ca0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00012da0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00012ec0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00012fa0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000130fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00013328 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00016f44 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000135c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00015ebc l     O .rwdata	00001060 jtag_uart_0
0001369c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000138dc l     F .text	00000228 altera_avalon_jtag_uart_irq
00013b04 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000143cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000147f0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001492c l     F .text	000000dc alt_file_locked
00014b90 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000152a4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00015458 l     F .text	00000040 alt_sim_halt
000129e4 g     F .text	00000070 _isatty_r
0001315c g     F .text	0000006c alt_main
00010234 g     F .text	000000a0 _puts_r
000189ec g     O .bss	00000100 alt_irq
00012a54 g     F .text	00000078 _lseek_r
00016f54 g       *ABS*	00000000 __flash_rwdata_start
00018c7c g       *ABS*	00000000 __alt_heap_start
00012620 g     F .text	00000068 __sseek
00011bd4 g     F .text	000000a4 __sinit
00011cd4 g     F .text	00000068 __sfmoreglue
000131e8 g     F .text	00000020 __malloc_unlock
000110bc g     F .text	000000e0 memmove
00011cc4 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012970 g     F .text	00000074 _fstat_r
000189a8 g     O .bss	00000004 errno
000189b0 g     O .bss	00000004 alt_argv
0001ef1c g       *ABS*	00000000 _gp
00015d3c g     O .rwdata	00000180 alt_fd_list
00014db4 g     F .text	00000094 alt_find_dev
0001101c g     F .text	000000a0 memcpy
00011cb8 g     F .text	0000000c _cleanup_r
000148b4 g     F .text	00000078 alt_io_redirect
000154bc g       *ABS*	00000000 __DTOR_END__
000102d4 g     F .text	00000014 puts
00013d1c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00012e00 g     F .text	000000c0 isatty
00015020 g     F .text	00000090 alt_icache_flush
0001899c g     O .bss	00000004 __malloc_top_pad
0001035c g     F .text	0000049c __sfvwrite_r
00011790 g     F .text	00000070 _sbrk_r
00012acc g     F .text	00000078 _read_r
00016f3c g     O .rwdata	00000004 alt_max_fd
0001284c g     F .text	00000110 _fclose_r
00011b38 g     F .text	00000034 fflush
000189a0 g     O .bss	00000004 __malloc_max_sbrked_mem
0001300c g     F .text	000000f0 lseek
00016f20 g     O .rwdata	00000004 _global_impure_ptr
0001119c g     F .text	000005f4 _realloc_r
00018c7c g       *ABS*	00000000 __bss_end
000146f8 g     F .text	000000f8 alt_iic_isr_register
00014c88 g     F .text	0000010c alt_tick
00011ca0 g     F .text	00000018 __fp_lock_all
000146b0 g     F .text	00000048 alt_ic_irq_enabled
00014bf0 g     F .text	00000098 alt_alarm_stop
000189b8 g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000c8 alt_irq_handler
00015d14 g     O .rwdata	00000028 alt_dev_null
000142d4 g     F .text	00000044 alt_dcache_flush_all
00016f54 g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00016f34 g     O .rwdata	00000008 alt_dev_list
000134a4 g     F .text	00000120 write
0001550c g       *ABS*	00000000 __ram_rodata_end
00012ccc g     F .text	000000d4 fstat
00018c7c g       *ABS*	00000000 end
0001381c g     F .text	000000c0 altera_avalon_jtag_uart_init
000154b8 g       *ABS*	00000000 __CTOR_LIST__
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00013f40 g     F .text	00000240 altera_avalon_jtag_uart_write
00011bc4 g     F .text	00000004 __sfp_lock_acquire
00010f38 g     F .text	000000e4 memchr
00011f58 g     F .text	00000314 _free_r
000152a8 g     F .text	000001b0 __call_exitprocs
00016f28 g     O .rwdata	00000004 __malloc_sbrk_base
000101b4 g     F .text	0000004c _start
000189bc g     O .bss	00000004 _alt_tick_rate
000189c0 g     O .bss	00000004 _alt_nticks
00013208 g     F .text	00000120 read
00013658 g     F .text	00000044 alt_sys_init
00015170 g     F .text	00000134 __register_exitproc
00013bb4 g     F .text	00000074 altera_avalon_jtag_uart_close
0001550c g       *ABS*	00000000 __ram_rwdata_start
000154bc g       *ABS*	00000000 __ram_rodata_start
000189c4 g     O .bss	00000028 __malloc_current_mallinfo
000136d4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00014f68 g     F .text	000000b8 alt_get_fd
000127dc g     F .text	00000070 _close_r
000150fc g     F .text	00000074 memcmp
00013784 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00018c7c g       *ABS*	00000000 __alt_stack_base
000137cc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00011800 g     F .text	0000013c __swsetup_r
00011d3c g     F .text	000000f0 __sfp
0001590c g     O .rwdata	00000408 __malloc_av_
00011bd0 g     F .text	00000004 __sinit_lock_release
00012704 g     F .text	00000060 __sread
00014e48 g     F .text	00000120 alt_find_file
00014318 g     F .text	000000b4 alt_dev_llist_insert
000131c8 g     F .text	00000020 __malloc_lock
000133e8 g     F .text	000000bc sbrk
0001193c g     F .text	000001fc _fflush_r
0001899c g       *ABS*	00000000 __bss_start
00012580 g     F .text	00000098 memset
00010200 g     F .text	00000034 main
000189b4 g     O .bss	00000004 alt_envp
000189a4 g     O .bss	00000004 __malloc_max_total_mem
0001372c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00012618 g     F .text	00000008 __sclose
0001a000 g       *ABS*	00000000 __alt_heap_limit
0001295c g     F .text	00000014 fclose
00018aec g     O .bss	00000190 _atexit0
000107f8 g     F .text	00000740 _malloc_r
00016f40 g     O .rwdata	00000004 alt_errno
00012334 g     F .text	000000b8 _fwalk
00011e2c g     F .text	0000012c _malloc_trim_r
000154bc g       *ABS*	00000000 __CTOR_END__
000154bc g       *ABS*	00000000 __flash_rodata_start
000154bc g       *ABS*	00000000 __DTOR_LIST__
00013624 g     F .text	00000034 alt_irq_init
00013388 g     F .text	00000060 alt_release_fd
000150b0 g     F .text	00000014 atexit
00012764 g     F .text	00000078 _write_r
00016f1c g     O .rwdata	00000004 _impure_ptr
000189ac g     O .bss	00000004 alt_argc
00014490 g     F .text	00000064 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00011c88 g     F .text	00000018 __fp_unlock_all
00016f2c g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00014524 g     F .text	00000050 alt_ic_isr_register
00016f54 g       *ABS*	00000000 _edata
00018c7c g       *ABS*	00000000 _end
000101b4 g       *ABS*	00000000 __ram_exceptions_end
00013c28 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00014610 g     F .text	000000a0 alt_ic_irq_disable
00012688 g     F .text	0000007c __swrite
00016f24 g     O .rwdata	00000004 __malloc_trim_threshold
00014d94 g     F .text	00000020 altera_nios2_qsys_irq_init
000150c4 g     F .text	00000038 exit
0001226c g     F .text	000000c8 _fwalk_reent
0001a000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00011bc8 g     F .text	00000004 __sfp_lock_release
00015498 g     F .text	00000020 _exit
00014180 g     F .text	00000154 alt_alarm_start
000123ec g     F .text	00000194 __smakebuf_r
000102e8 g     F .text	00000074 strlen
00014a08 g     F .text	00000188 open
000144f4 g     F .text	00000030 alt_icache_flush_all
00016f48 g     O .rwdata	00000004 alt_priority_mask
00014574 g     F .text	0000009c alt_ic_irq_enable
00016f4c g     O .rwdata	00000008 alt_alarm_list
0001442c g     F .text	00000064 _do_ctors
00012b44 g     F .text	000000fc close
00012f20 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00011bcc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08406d14 	ori	at,at,436
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_onchip_memory-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   10044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   100fc:	0005313a 	rdctl	r2,ipending
   10100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   10108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   1010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10110:	00800044 	movi	r2,1
   10114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   10118:	e0ffff17 	ldw	r3,-4(fp)
   1011c:	e0bffe17 	ldw	r2,-8(fp)
   10120:	1884703a 	and	r2,r3,r2
   10124:	1005003a 	cmpeq	r2,r2,zero
   10128:	1000161e 	bne	r2,zero,10184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	e0bffd17 	ldw	r2,-12(fp)
   10130:	00c000b4 	movhi	r3,2
   10134:	18e27b04 	addi	r3,r3,-30228
   10138:	100490fa 	slli	r2,r2,3
   1013c:	10c5883a 	add	r2,r2,r3
   10140:	11400017 	ldw	r5,0(r2)
   10144:	e0bffd17 	ldw	r2,-12(fp)
   10148:	00c000b4 	movhi	r3,2
   1014c:	18e27b04 	addi	r3,r3,-30228
   10150:	100490fa 	slli	r2,r2,3
   10154:	10c5883a 	add	r2,r2,r3
   10158:	10800104 	addi	r2,r2,4
   1015c:	11000017 	ldw	r4,0(r2)
   10160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10164:	0005313a 	rdctl	r2,ipending
   10168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   1016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   10174:	e0bfff17 	ldw	r2,-4(fp)
   10178:	1004c03a 	cmpne	r2,r2,zero
   1017c:	103fe31e 	bne	r2,zero,1010c <alt_irq_handler+0x20>
   10180:	00000706 	br	101a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10184:	e0bffe17 	ldw	r2,-8(fp)
   10188:	1085883a 	add	r2,r2,r2
   1018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	10800044 	addi	r2,r2,1
   10198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   1019c:	003fde06 	br	10118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a0:	e037883a 	mov	sp,fp
   101a4:	dfc00117 	ldw	ra,4(sp)
   101a8:	df000017 	ldw	fp,0(sp)
   101ac:	dec00204 	addi	sp,sp,8
   101b0:	f800283a 	ret

Disassembly of section .text:

000101b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   101b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   101b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   101bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   101c0:	00bffd16 	blt	zero,r2,101b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101c4:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   101c8:	dee80014 	ori	sp,sp,40960

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   101cc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   101d0:	d6bbc714 	ori	gp,gp,61212
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101d4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101d8:	10a26714 	ori	r2,r2,35228

    movhi r3, %hi(__bss_end)
   101dc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101e0:	18e31f14 	ori	r3,r3,35964

    beq r2, r3, 1f
   101e4:	10c00326 	beq	r2,r3,101f4 <_start+0x40>

0:
    stw zero, (r2)
   101e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101f0:	10fffd36 	bltu	r2,r3,101e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101f4:	0012f200 	call	12f20 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101f8:	001315c0 	call	1315c <alt_main>

000101fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101fc:	003fff06 	br	101fc <alt_after_alt_main>

00010200 <main>:
 */

#include <stdio.h>

int main()
{
   10200:	defffe04 	addi	sp,sp,-8
   10204:	dfc00115 	stw	ra,4(sp)
   10208:	df000015 	stw	fp,0(sp)
   1020c:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   10210:	01000074 	movhi	r4,1
   10214:	21152f04 	addi	r4,r4,21692
   10218:	00102d40 	call	102d4 <puts>

  return 0;
   1021c:	0005883a 	mov	r2,zero
}
   10220:	e037883a 	mov	sp,fp
   10224:	dfc00117 	ldw	ra,4(sp)
   10228:	df000017 	ldw	fp,0(sp)
   1022c:	dec00204 	addi	sp,sp,8
   10230:	f800283a 	ret

00010234 <_puts_r>:
   10234:	defff604 	addi	sp,sp,-40
   10238:	dc400715 	stw	r17,28(sp)
   1023c:	2023883a 	mov	r17,r4
   10240:	2809883a 	mov	r4,r5
   10244:	dfc00915 	stw	ra,36(sp)
   10248:	dcc00815 	stw	r19,32(sp)
   1024c:	2827883a 	mov	r19,r5
   10250:	00102e80 	call	102e8 <strlen>
   10254:	89400217 	ldw	r5,8(r17)
   10258:	00c00074 	movhi	r3,1
   1025c:	18d53404 	addi	r3,r3,21712
   10260:	01c00044 	movi	r7,1
   10264:	12000044 	addi	r8,r2,1
   10268:	d8c00515 	stw	r3,20(sp)
   1026c:	d9c00615 	stw	r7,24(sp)
   10270:	d8c00304 	addi	r3,sp,12
   10274:	01c00084 	movi	r7,2
   10278:	8809883a 	mov	r4,r17
   1027c:	d80d883a 	mov	r6,sp
   10280:	d8c00015 	stw	r3,0(sp)
   10284:	dcc00315 	stw	r19,12(sp)
   10288:	da000215 	stw	r8,8(sp)
   1028c:	d9c00115 	stw	r7,4(sp)
   10290:	d8800415 	stw	r2,16(sp)
   10294:	001035c0 	call	1035c <__sfvwrite_r>
   10298:	00ffffc4 	movi	r3,-1
   1029c:	10000626 	beq	r2,zero,102b8 <_puts_r+0x84>
   102a0:	1805883a 	mov	r2,r3
   102a4:	dfc00917 	ldw	ra,36(sp)
   102a8:	dcc00817 	ldw	r19,32(sp)
   102ac:	dc400717 	ldw	r17,28(sp)
   102b0:	dec00a04 	addi	sp,sp,40
   102b4:	f800283a 	ret
   102b8:	00c00284 	movi	r3,10
   102bc:	1805883a 	mov	r2,r3
   102c0:	dfc00917 	ldw	ra,36(sp)
   102c4:	dcc00817 	ldw	r19,32(sp)
   102c8:	dc400717 	ldw	r17,28(sp)
   102cc:	dec00a04 	addi	sp,sp,40
   102d0:	f800283a 	ret

000102d4 <puts>:
   102d4:	00800074 	movhi	r2,1
   102d8:	109bc704 	addi	r2,r2,28444
   102dc:	200b883a 	mov	r5,r4
   102e0:	11000017 	ldw	r4,0(r2)
   102e4:	00102341 	jmpi	10234 <_puts_r>

000102e8 <strlen>:
   102e8:	208000cc 	andi	r2,r4,3
   102ec:	2011883a 	mov	r8,r4
   102f0:	1000161e 	bne	r2,zero,1034c <strlen+0x64>
   102f4:	20c00017 	ldw	r3,0(r4)
   102f8:	017fbff4 	movhi	r5,65279
   102fc:	297fbfc4 	addi	r5,r5,-257
   10300:	01e02074 	movhi	r7,32897
   10304:	39e02004 	addi	r7,r7,-32640
   10308:	1945883a 	add	r2,r3,r5
   1030c:	11c4703a 	and	r2,r2,r7
   10310:	00c6303a 	nor	r3,zero,r3
   10314:	1886703a 	and	r3,r3,r2
   10318:	18000c1e 	bne	r3,zero,1034c <strlen+0x64>
   1031c:	280d883a 	mov	r6,r5
   10320:	380b883a 	mov	r5,r7
   10324:	21000104 	addi	r4,r4,4
   10328:	20800017 	ldw	r2,0(r4)
   1032c:	1187883a 	add	r3,r2,r6
   10330:	1946703a 	and	r3,r3,r5
   10334:	0084303a 	nor	r2,zero,r2
   10338:	10c4703a 	and	r2,r2,r3
   1033c:	103ff926 	beq	r2,zero,10324 <strlen+0x3c>
   10340:	20800007 	ldb	r2,0(r4)
   10344:	10000326 	beq	r2,zero,10354 <strlen+0x6c>
   10348:	21000044 	addi	r4,r4,1
   1034c:	20800007 	ldb	r2,0(r4)
   10350:	103ffd1e 	bne	r2,zero,10348 <strlen+0x60>
   10354:	2205c83a 	sub	r2,r4,r8
   10358:	f800283a 	ret

0001035c <__sfvwrite_r>:
   1035c:	30800217 	ldw	r2,8(r6)
   10360:	defff504 	addi	sp,sp,-44
   10364:	df000915 	stw	fp,36(sp)
   10368:	dd800715 	stw	r22,28(sp)
   1036c:	dc800315 	stw	r18,12(sp)
   10370:	dfc00a15 	stw	ra,40(sp)
   10374:	ddc00815 	stw	r23,32(sp)
   10378:	dd400615 	stw	r21,24(sp)
   1037c:	dd000515 	stw	r20,20(sp)
   10380:	dcc00415 	stw	r19,16(sp)
   10384:	dc400215 	stw	r17,8(sp)
   10388:	dc000115 	stw	r16,4(sp)
   1038c:	302d883a 	mov	r22,r6
   10390:	2039883a 	mov	fp,r4
   10394:	2825883a 	mov	r18,r5
   10398:	10001c26 	beq	r2,zero,1040c <__sfvwrite_r+0xb0>
   1039c:	29c0030b 	ldhu	r7,12(r5)
   103a0:	3880020c 	andi	r2,r7,8
   103a4:	10002726 	beq	r2,zero,10444 <__sfvwrite_r+0xe8>
   103a8:	28800417 	ldw	r2,16(r5)
   103ac:	10002526 	beq	r2,zero,10444 <__sfvwrite_r+0xe8>
   103b0:	3880008c 	andi	r2,r7,2
   103b4:	b5400017 	ldw	r21,0(r22)
   103b8:	10002826 	beq	r2,zero,1045c <__sfvwrite_r+0x100>
   103bc:	0021883a 	mov	r16,zero
   103c0:	0023883a 	mov	r17,zero
   103c4:	880d883a 	mov	r6,r17
   103c8:	e009883a 	mov	r4,fp
   103cc:	00810004 	movi	r2,1024
   103d0:	80006e26 	beq	r16,zero,1058c <__sfvwrite_r+0x230>
   103d4:	800f883a 	mov	r7,r16
   103d8:	91400717 	ldw	r5,28(r18)
   103dc:	1400012e 	bgeu	r2,r16,103e4 <__sfvwrite_r+0x88>
   103e0:	100f883a 	mov	r7,r2
   103e4:	90c00917 	ldw	r3,36(r18)
   103e8:	183ee83a 	callr	r3
   103ec:	1007883a 	mov	r3,r2
   103f0:	80a1c83a 	sub	r16,r16,r2
   103f4:	88a3883a 	add	r17,r17,r2
   103f8:	00806d0e 	bge	zero,r2,105b0 <__sfvwrite_r+0x254>
   103fc:	b0800217 	ldw	r2,8(r22)
   10400:	10c5c83a 	sub	r2,r2,r3
   10404:	b0800215 	stw	r2,8(r22)
   10408:	103fee1e 	bne	r2,zero,103c4 <__sfvwrite_r+0x68>
   1040c:	0009883a 	mov	r4,zero
   10410:	2005883a 	mov	r2,r4
   10414:	dfc00a17 	ldw	ra,40(sp)
   10418:	df000917 	ldw	fp,36(sp)
   1041c:	ddc00817 	ldw	r23,32(sp)
   10420:	dd800717 	ldw	r22,28(sp)
   10424:	dd400617 	ldw	r21,24(sp)
   10428:	dd000517 	ldw	r20,20(sp)
   1042c:	dcc00417 	ldw	r19,16(sp)
   10430:	dc800317 	ldw	r18,12(sp)
   10434:	dc400217 	ldw	r17,8(sp)
   10438:	dc000117 	ldw	r16,4(sp)
   1043c:	dec00b04 	addi	sp,sp,44
   10440:	f800283a 	ret
   10444:	00118000 	call	11800 <__swsetup_r>
   10448:	1000e41e 	bne	r2,zero,107dc <__sfvwrite_r+0x480>
   1044c:	91c0030b 	ldhu	r7,12(r18)
   10450:	b5400017 	ldw	r21,0(r22)
   10454:	3880008c 	andi	r2,r7,2
   10458:	103fd81e 	bne	r2,zero,103bc <__sfvwrite_r+0x60>
   1045c:	3880004c 	andi	r2,r7,1
   10460:	1005003a 	cmpeq	r2,r2,zero
   10464:	10005726 	beq	r2,zero,105c4 <__sfvwrite_r+0x268>
   10468:	0029883a 	mov	r20,zero
   1046c:	002f883a 	mov	r23,zero
   10470:	a0004226 	beq	r20,zero,1057c <__sfvwrite_r+0x220>
   10474:	3880800c 	andi	r2,r7,512
   10478:	94000217 	ldw	r16,8(r18)
   1047c:	10008b26 	beq	r2,zero,106ac <__sfvwrite_r+0x350>
   10480:	800d883a 	mov	r6,r16
   10484:	a400a536 	bltu	r20,r16,1071c <__sfvwrite_r+0x3c0>
   10488:	3881200c 	andi	r2,r7,1152
   1048c:	10002726 	beq	r2,zero,1052c <__sfvwrite_r+0x1d0>
   10490:	90800517 	ldw	r2,20(r18)
   10494:	92000417 	ldw	r8,16(r18)
   10498:	91400017 	ldw	r5,0(r18)
   1049c:	1087883a 	add	r3,r2,r2
   104a0:	1887883a 	add	r3,r3,r2
   104a4:	1808d7fa 	srli	r4,r3,31
   104a8:	2a21c83a 	sub	r16,r5,r8
   104ac:	80800044 	addi	r2,r16,1
   104b0:	20c9883a 	add	r4,r4,r3
   104b4:	2027d07a 	srai	r19,r4,1
   104b8:	a085883a 	add	r2,r20,r2
   104bc:	980d883a 	mov	r6,r19
   104c0:	9880022e 	bgeu	r19,r2,104cc <__sfvwrite_r+0x170>
   104c4:	1027883a 	mov	r19,r2
   104c8:	100d883a 	mov	r6,r2
   104cc:	3881000c 	andi	r2,r7,1024
   104d0:	1000b826 	beq	r2,zero,107b4 <__sfvwrite_r+0x458>
   104d4:	300b883a 	mov	r5,r6
   104d8:	e009883a 	mov	r4,fp
   104dc:	00107f80 	call	107f8 <_malloc_r>
   104e0:	10003126 	beq	r2,zero,105a8 <__sfvwrite_r+0x24c>
   104e4:	91400417 	ldw	r5,16(r18)
   104e8:	1009883a 	mov	r4,r2
   104ec:	800d883a 	mov	r6,r16
   104f0:	1023883a 	mov	r17,r2
   104f4:	001101c0 	call	1101c <memcpy>
   104f8:	90c0030b 	ldhu	r3,12(r18)
   104fc:	00beffc4 	movi	r2,-1025
   10500:	1886703a 	and	r3,r3,r2
   10504:	18c02014 	ori	r3,r3,128
   10508:	90c0030d 	sth	r3,12(r18)
   1050c:	9c07c83a 	sub	r3,r19,r16
   10510:	8c05883a 	add	r2,r17,r16
   10514:	a00d883a 	mov	r6,r20
   10518:	a021883a 	mov	r16,r20
   1051c:	90800015 	stw	r2,0(r18)
   10520:	90c00215 	stw	r3,8(r18)
   10524:	94400415 	stw	r17,16(r18)
   10528:	94c00515 	stw	r19,20(r18)
   1052c:	91000017 	ldw	r4,0(r18)
   10530:	b80b883a 	mov	r5,r23
   10534:	a023883a 	mov	r17,r20
   10538:	00110bc0 	call	110bc <memmove>
   1053c:	90c00217 	ldw	r3,8(r18)
   10540:	90800017 	ldw	r2,0(r18)
   10544:	a027883a 	mov	r19,r20
   10548:	1c07c83a 	sub	r3,r3,r16
   1054c:	1405883a 	add	r2,r2,r16
   10550:	90c00215 	stw	r3,8(r18)
   10554:	a021883a 	mov	r16,r20
   10558:	90800015 	stw	r2,0(r18)
   1055c:	b0800217 	ldw	r2,8(r22)
   10560:	1405c83a 	sub	r2,r2,r16
   10564:	b0800215 	stw	r2,8(r22)
   10568:	103fa826 	beq	r2,zero,1040c <__sfvwrite_r+0xb0>
   1056c:	a469c83a 	sub	r20,r20,r17
   10570:	91c0030b 	ldhu	r7,12(r18)
   10574:	bcef883a 	add	r23,r23,r19
   10578:	a03fbe1e 	bne	r20,zero,10474 <__sfvwrite_r+0x118>
   1057c:	adc00017 	ldw	r23,0(r21)
   10580:	ad000117 	ldw	r20,4(r21)
   10584:	ad400204 	addi	r21,r21,8
   10588:	003fb906 	br	10470 <__sfvwrite_r+0x114>
   1058c:	ac400017 	ldw	r17,0(r21)
   10590:	ac000117 	ldw	r16,4(r21)
   10594:	ad400204 	addi	r21,r21,8
   10598:	003f8a06 	br	103c4 <__sfvwrite_r+0x68>
   1059c:	91400417 	ldw	r5,16(r18)
   105a0:	e009883a 	mov	r4,fp
   105a4:	0011f580 	call	11f58 <_free_r>
   105a8:	00800304 	movi	r2,12
   105ac:	e0800015 	stw	r2,0(fp)
   105b0:	9080030b 	ldhu	r2,12(r18)
   105b4:	013fffc4 	movi	r4,-1
   105b8:	10801014 	ori	r2,r2,64
   105bc:	9080030d 	sth	r2,12(r18)
   105c0:	003f9306 	br	10410 <__sfvwrite_r+0xb4>
   105c4:	0027883a 	mov	r19,zero
   105c8:	002f883a 	mov	r23,zero
   105cc:	d8000015 	stw	zero,0(sp)
   105d0:	0029883a 	mov	r20,zero
   105d4:	98001e26 	beq	r19,zero,10650 <__sfvwrite_r+0x2f4>
   105d8:	d8c00017 	ldw	r3,0(sp)
   105dc:	1804c03a 	cmpne	r2,r3,zero
   105e0:	10005e26 	beq	r2,zero,1075c <__sfvwrite_r+0x400>
   105e4:	9821883a 	mov	r16,r19
   105e8:	a4c0012e 	bgeu	r20,r19,105f0 <__sfvwrite_r+0x294>
   105ec:	a021883a 	mov	r16,r20
   105f0:	91000017 	ldw	r4,0(r18)
   105f4:	90800417 	ldw	r2,16(r18)
   105f8:	91800217 	ldw	r6,8(r18)
   105fc:	91c00517 	ldw	r7,20(r18)
   10600:	1100022e 	bgeu	r2,r4,1060c <__sfvwrite_r+0x2b0>
   10604:	31e3883a 	add	r17,r6,r7
   10608:	8c001616 	blt	r17,r16,10664 <__sfvwrite_r+0x308>
   1060c:	81c03816 	blt	r16,r7,106f0 <__sfvwrite_r+0x394>
   10610:	90c00917 	ldw	r3,36(r18)
   10614:	91400717 	ldw	r5,28(r18)
   10618:	e009883a 	mov	r4,fp
   1061c:	b80d883a 	mov	r6,r23
   10620:	183ee83a 	callr	r3
   10624:	1023883a 	mov	r17,r2
   10628:	00bfe10e 	bge	zero,r2,105b0 <__sfvwrite_r+0x254>
   1062c:	a469c83a 	sub	r20,r20,r17
   10630:	a0001826 	beq	r20,zero,10694 <__sfvwrite_r+0x338>
   10634:	b0800217 	ldw	r2,8(r22)
   10638:	1445c83a 	sub	r2,r2,r17
   1063c:	b0800215 	stw	r2,8(r22)
   10640:	103f7226 	beq	r2,zero,1040c <__sfvwrite_r+0xb0>
   10644:	9c67c83a 	sub	r19,r19,r17
   10648:	bc6f883a 	add	r23,r23,r17
   1064c:	983fe21e 	bne	r19,zero,105d8 <__sfvwrite_r+0x27c>
   10650:	adc00017 	ldw	r23,0(r21)
   10654:	acc00117 	ldw	r19,4(r21)
   10658:	ad400204 	addi	r21,r21,8
   1065c:	d8000015 	stw	zero,0(sp)
   10660:	003fdc06 	br	105d4 <__sfvwrite_r+0x278>
   10664:	b80b883a 	mov	r5,r23
   10668:	880d883a 	mov	r6,r17
   1066c:	00110bc0 	call	110bc <memmove>
   10670:	90c00017 	ldw	r3,0(r18)
   10674:	e009883a 	mov	r4,fp
   10678:	900b883a 	mov	r5,r18
   1067c:	1c47883a 	add	r3,r3,r17
   10680:	90c00015 	stw	r3,0(r18)
   10684:	001193c0 	call	1193c <_fflush_r>
   10688:	103fc91e 	bne	r2,zero,105b0 <__sfvwrite_r+0x254>
   1068c:	a469c83a 	sub	r20,r20,r17
   10690:	a03fe81e 	bne	r20,zero,10634 <__sfvwrite_r+0x2d8>
   10694:	e009883a 	mov	r4,fp
   10698:	900b883a 	mov	r5,r18
   1069c:	001193c0 	call	1193c <_fflush_r>
   106a0:	103fc31e 	bne	r2,zero,105b0 <__sfvwrite_r+0x254>
   106a4:	d8000015 	stw	zero,0(sp)
   106a8:	003fe206 	br	10634 <__sfvwrite_r+0x2d8>
   106ac:	91000017 	ldw	r4,0(r18)
   106b0:	90800417 	ldw	r2,16(r18)
   106b4:	1100022e 	bgeu	r2,r4,106c0 <__sfvwrite_r+0x364>
   106b8:	8023883a 	mov	r17,r16
   106bc:	85003136 	bltu	r16,r20,10784 <__sfvwrite_r+0x428>
   106c0:	91c00517 	ldw	r7,20(r18)
   106c4:	a1c01836 	bltu	r20,r7,10728 <__sfvwrite_r+0x3cc>
   106c8:	90c00917 	ldw	r3,36(r18)
   106cc:	91400717 	ldw	r5,28(r18)
   106d0:	e009883a 	mov	r4,fp
   106d4:	b80d883a 	mov	r6,r23
   106d8:	183ee83a 	callr	r3
   106dc:	1021883a 	mov	r16,r2
   106e0:	00bfb30e 	bge	zero,r2,105b0 <__sfvwrite_r+0x254>
   106e4:	1023883a 	mov	r17,r2
   106e8:	1027883a 	mov	r19,r2
   106ec:	003f9b06 	br	1055c <__sfvwrite_r+0x200>
   106f0:	b80b883a 	mov	r5,r23
   106f4:	800d883a 	mov	r6,r16
   106f8:	00110bc0 	call	110bc <memmove>
   106fc:	90c00217 	ldw	r3,8(r18)
   10700:	90800017 	ldw	r2,0(r18)
   10704:	8023883a 	mov	r17,r16
   10708:	1c07c83a 	sub	r3,r3,r16
   1070c:	1405883a 	add	r2,r2,r16
   10710:	90c00215 	stw	r3,8(r18)
   10714:	90800015 	stw	r2,0(r18)
   10718:	003fc406 	br	1062c <__sfvwrite_r+0x2d0>
   1071c:	a00d883a 	mov	r6,r20
   10720:	a021883a 	mov	r16,r20
   10724:	003f8106 	br	1052c <__sfvwrite_r+0x1d0>
   10728:	b80b883a 	mov	r5,r23
   1072c:	a00d883a 	mov	r6,r20
   10730:	00110bc0 	call	110bc <memmove>
   10734:	90c00217 	ldw	r3,8(r18)
   10738:	90800017 	ldw	r2,0(r18)
   1073c:	a021883a 	mov	r16,r20
   10740:	1d07c83a 	sub	r3,r3,r20
   10744:	1505883a 	add	r2,r2,r20
   10748:	a023883a 	mov	r17,r20
   1074c:	a027883a 	mov	r19,r20
   10750:	90c00215 	stw	r3,8(r18)
   10754:	90800015 	stw	r2,0(r18)
   10758:	003f8006 	br	1055c <__sfvwrite_r+0x200>
   1075c:	b809883a 	mov	r4,r23
   10760:	01400284 	movi	r5,10
   10764:	980d883a 	mov	r6,r19
   10768:	0010f380 	call	10f38 <memchr>
   1076c:	10001726 	beq	r2,zero,107cc <__sfvwrite_r+0x470>
   10770:	15c5c83a 	sub	r2,r2,r23
   10774:	15000044 	addi	r20,r2,1
   10778:	00800044 	movi	r2,1
   1077c:	d8800015 	stw	r2,0(sp)
   10780:	003f9806 	br	105e4 <__sfvwrite_r+0x288>
   10784:	b80b883a 	mov	r5,r23
   10788:	800d883a 	mov	r6,r16
   1078c:	00110bc0 	call	110bc <memmove>
   10790:	90c00017 	ldw	r3,0(r18)
   10794:	e009883a 	mov	r4,fp
   10798:	900b883a 	mov	r5,r18
   1079c:	1c07883a 	add	r3,r3,r16
   107a0:	90c00015 	stw	r3,0(r18)
   107a4:	8027883a 	mov	r19,r16
   107a8:	001193c0 	call	1193c <_fflush_r>
   107ac:	103f6b26 	beq	r2,zero,1055c <__sfvwrite_r+0x200>
   107b0:	003f7f06 	br	105b0 <__sfvwrite_r+0x254>
   107b4:	400b883a 	mov	r5,r8
   107b8:	e009883a 	mov	r4,fp
   107bc:	001119c0 	call	1119c <_realloc_r>
   107c0:	103f7626 	beq	r2,zero,1059c <__sfvwrite_r+0x240>
   107c4:	1023883a 	mov	r17,r2
   107c8:	003f5006 	br	1050c <__sfvwrite_r+0x1b0>
   107cc:	00c00044 	movi	r3,1
   107d0:	9d000044 	addi	r20,r19,1
   107d4:	d8c00015 	stw	r3,0(sp)
   107d8:	003f8206 	br	105e4 <__sfvwrite_r+0x288>
   107dc:	9080030b 	ldhu	r2,12(r18)
   107e0:	00c00244 	movi	r3,9
   107e4:	013fffc4 	movi	r4,-1
   107e8:	10801014 	ori	r2,r2,64
   107ec:	9080030d 	sth	r2,12(r18)
   107f0:	e0c00015 	stw	r3,0(fp)
   107f4:	003f0606 	br	10410 <__sfvwrite_r+0xb4>

000107f8 <_malloc_r>:
   107f8:	defff604 	addi	sp,sp,-40
   107fc:	28c002c4 	addi	r3,r5,11
   10800:	00800584 	movi	r2,22
   10804:	dc800215 	stw	r18,8(sp)
   10808:	dfc00915 	stw	ra,36(sp)
   1080c:	df000815 	stw	fp,32(sp)
   10810:	ddc00715 	stw	r23,28(sp)
   10814:	dd800615 	stw	r22,24(sp)
   10818:	dd400515 	stw	r21,20(sp)
   1081c:	dd000415 	stw	r20,16(sp)
   10820:	dcc00315 	stw	r19,12(sp)
   10824:	dc400115 	stw	r17,4(sp)
   10828:	dc000015 	stw	r16,0(sp)
   1082c:	2025883a 	mov	r18,r4
   10830:	10c01236 	bltu	r2,r3,1087c <_malloc_r+0x84>
   10834:	04400404 	movi	r17,16
   10838:	8940142e 	bgeu	r17,r5,1088c <_malloc_r+0x94>
   1083c:	00800304 	movi	r2,12
   10840:	0007883a 	mov	r3,zero
   10844:	90800015 	stw	r2,0(r18)
   10848:	1805883a 	mov	r2,r3
   1084c:	dfc00917 	ldw	ra,36(sp)
   10850:	df000817 	ldw	fp,32(sp)
   10854:	ddc00717 	ldw	r23,28(sp)
   10858:	dd800617 	ldw	r22,24(sp)
   1085c:	dd400517 	ldw	r21,20(sp)
   10860:	dd000417 	ldw	r20,16(sp)
   10864:	dcc00317 	ldw	r19,12(sp)
   10868:	dc800217 	ldw	r18,8(sp)
   1086c:	dc400117 	ldw	r17,4(sp)
   10870:	dc000017 	ldw	r16,0(sp)
   10874:	dec00a04 	addi	sp,sp,40
   10878:	f800283a 	ret
   1087c:	00bffe04 	movi	r2,-8
   10880:	18a2703a 	and	r17,r3,r2
   10884:	883fed16 	blt	r17,zero,1083c <_malloc_r+0x44>
   10888:	897fec36 	bltu	r17,r5,1083c <_malloc_r+0x44>
   1088c:	9009883a 	mov	r4,r18
   10890:	00131c80 	call	131c8 <__malloc_lock>
   10894:	00807dc4 	movi	r2,503
   10898:	14402b2e 	bgeu	r2,r17,10948 <_malloc_r+0x150>
   1089c:	8806d27a 	srli	r3,r17,9
   108a0:	18003f1e 	bne	r3,zero,109a0 <_malloc_r+0x1a8>
   108a4:	880cd0fa 	srli	r6,r17,3
   108a8:	300490fa 	slli	r2,r6,3
   108ac:	02c00074 	movhi	r11,1
   108b0:	5ad64304 	addi	r11,r11,22796
   108b4:	12cb883a 	add	r5,r2,r11
   108b8:	2c000317 	ldw	r16,12(r5)
   108bc:	580f883a 	mov	r7,r11
   108c0:	2c00041e 	bne	r5,r16,108d4 <_malloc_r+0xdc>
   108c4:	00000a06 	br	108f0 <_malloc_r+0xf8>
   108c8:	1800860e 	bge	r3,zero,10ae4 <_malloc_r+0x2ec>
   108cc:	84000317 	ldw	r16,12(r16)
   108d0:	2c000726 	beq	r5,r16,108f0 <_malloc_r+0xf8>
   108d4:	80800117 	ldw	r2,4(r16)
   108d8:	00ffff04 	movi	r3,-4
   108dc:	10c8703a 	and	r4,r2,r3
   108e0:	2447c83a 	sub	r3,r4,r17
   108e4:	008003c4 	movi	r2,15
   108e8:	10fff70e 	bge	r2,r3,108c8 <_malloc_r+0xd0>
   108ec:	31bfffc4 	addi	r6,r6,-1
   108f0:	32400044 	addi	r9,r6,1
   108f4:	02800074 	movhi	r10,1
   108f8:	52964504 	addi	r10,r10,22804
   108fc:	54000217 	ldw	r16,8(r10)
   10900:	8280a026 	beq	r16,r10,10b84 <_malloc_r+0x38c>
   10904:	80800117 	ldw	r2,4(r16)
   10908:	00ffff04 	movi	r3,-4
   1090c:	10ca703a 	and	r5,r2,r3
   10910:	2c4dc83a 	sub	r6,r5,r17
   10914:	008003c4 	movi	r2,15
   10918:	11808316 	blt	r2,r6,10b28 <_malloc_r+0x330>
   1091c:	52800315 	stw	r10,12(r10)
   10920:	52800215 	stw	r10,8(r10)
   10924:	30002916 	blt	r6,zero,109cc <_malloc_r+0x1d4>
   10928:	8147883a 	add	r3,r16,r5
   1092c:	18800117 	ldw	r2,4(r3)
   10930:	9009883a 	mov	r4,r18
   10934:	10800054 	ori	r2,r2,1
   10938:	18800115 	stw	r2,4(r3)
   1093c:	00131e80 	call	131e8 <__malloc_unlock>
   10940:	80c00204 	addi	r3,r16,8
   10944:	003fc006 	br	10848 <_malloc_r+0x50>
   10948:	02c00074 	movhi	r11,1
   1094c:	5ad64304 	addi	r11,r11,22796
   10950:	8ac5883a 	add	r2,r17,r11
   10954:	14000317 	ldw	r16,12(r2)
   10958:	580f883a 	mov	r7,r11
   1095c:	8806d0fa 	srli	r3,r17,3
   10960:	14006c26 	beq	r2,r16,10b14 <_malloc_r+0x31c>
   10964:	80c00117 	ldw	r3,4(r16)
   10968:	00bfff04 	movi	r2,-4
   1096c:	81800317 	ldw	r6,12(r16)
   10970:	1886703a 	and	r3,r3,r2
   10974:	80c7883a 	add	r3,r16,r3
   10978:	18800117 	ldw	r2,4(r3)
   1097c:	81400217 	ldw	r5,8(r16)
   10980:	9009883a 	mov	r4,r18
   10984:	10800054 	ori	r2,r2,1
   10988:	18800115 	stw	r2,4(r3)
   1098c:	31400215 	stw	r5,8(r6)
   10990:	29800315 	stw	r6,12(r5)
   10994:	00131e80 	call	131e8 <__malloc_unlock>
   10998:	80c00204 	addi	r3,r16,8
   1099c:	003faa06 	br	10848 <_malloc_r+0x50>
   109a0:	00800104 	movi	r2,4
   109a4:	10c0052e 	bgeu	r2,r3,109bc <_malloc_r+0x1c4>
   109a8:	00800504 	movi	r2,20
   109ac:	10c07836 	bltu	r2,r3,10b90 <_malloc_r+0x398>
   109b0:	198016c4 	addi	r6,r3,91
   109b4:	300490fa 	slli	r2,r6,3
   109b8:	003fbc06 	br	108ac <_malloc_r+0xb4>
   109bc:	8804d1ba 	srli	r2,r17,6
   109c0:	11800e04 	addi	r6,r2,56
   109c4:	300490fa 	slli	r2,r6,3
   109c8:	003fb806 	br	108ac <_malloc_r+0xb4>
   109cc:	00807fc4 	movi	r2,511
   109d0:	1140bb36 	bltu	r2,r5,10cc0 <_malloc_r+0x4c8>
   109d4:	2806d0fa 	srli	r3,r5,3
   109d8:	573ffe04 	addi	fp,r10,-8
   109dc:	00800044 	movi	r2,1
   109e0:	180890fa 	slli	r4,r3,3
   109e4:	1807d0ba 	srai	r3,r3,2
   109e8:	e1c00117 	ldw	r7,4(fp)
   109ec:	5909883a 	add	r4,r11,r4
   109f0:	21400217 	ldw	r5,8(r4)
   109f4:	10c4983a 	sll	r2,r2,r3
   109f8:	81000315 	stw	r4,12(r16)
   109fc:	81400215 	stw	r5,8(r16)
   10a00:	388eb03a 	or	r7,r7,r2
   10a04:	2c000315 	stw	r16,12(r5)
   10a08:	24000215 	stw	r16,8(r4)
   10a0c:	e1c00115 	stw	r7,4(fp)
   10a10:	4807883a 	mov	r3,r9
   10a14:	4800cd16 	blt	r9,zero,10d4c <_malloc_r+0x554>
   10a18:	1807d0ba 	srai	r3,r3,2
   10a1c:	00800044 	movi	r2,1
   10a20:	10c8983a 	sll	r4,r2,r3
   10a24:	39004436 	bltu	r7,r4,10b38 <_malloc_r+0x340>
   10a28:	21c4703a 	and	r2,r4,r7
   10a2c:	10000a1e 	bne	r2,zero,10a58 <_malloc_r+0x260>
   10a30:	2109883a 	add	r4,r4,r4
   10a34:	00bfff04 	movi	r2,-4
   10a38:	4884703a 	and	r2,r9,r2
   10a3c:	3906703a 	and	r3,r7,r4
   10a40:	12400104 	addi	r9,r2,4
   10a44:	1800041e 	bne	r3,zero,10a58 <_malloc_r+0x260>
   10a48:	2109883a 	add	r4,r4,r4
   10a4c:	3904703a 	and	r2,r7,r4
   10a50:	4a400104 	addi	r9,r9,4
   10a54:	103ffc26 	beq	r2,zero,10a48 <_malloc_r+0x250>
   10a58:	480490fa 	slli	r2,r9,3
   10a5c:	4819883a 	mov	r12,r9
   10a60:	023fff04 	movi	r8,-4
   10a64:	589b883a 	add	r13,r11,r2
   10a68:	6807883a 	mov	r3,r13
   10a6c:	014003c4 	movi	r5,15
   10a70:	1c000317 	ldw	r16,12(r3)
   10a74:	1c00041e 	bne	r3,r16,10a88 <_malloc_r+0x290>
   10a78:	0000a706 	br	10d18 <_malloc_r+0x520>
   10a7c:	3000ab0e 	bge	r6,zero,10d2c <_malloc_r+0x534>
   10a80:	84000317 	ldw	r16,12(r16)
   10a84:	1c00a426 	beq	r3,r16,10d18 <_malloc_r+0x520>
   10a88:	80800117 	ldw	r2,4(r16)
   10a8c:	1204703a 	and	r2,r2,r8
   10a90:	144dc83a 	sub	r6,r2,r17
   10a94:	29bff90e 	bge	r5,r6,10a7c <_malloc_r+0x284>
   10a98:	81000317 	ldw	r4,12(r16)
   10a9c:	80c00217 	ldw	r3,8(r16)
   10aa0:	89400054 	ori	r5,r17,1
   10aa4:	8445883a 	add	r2,r16,r17
   10aa8:	20c00215 	stw	r3,8(r4)
   10aac:	19000315 	stw	r4,12(r3)
   10ab0:	81400115 	stw	r5,4(r16)
   10ab4:	1187883a 	add	r3,r2,r6
   10ab8:	31000054 	ori	r4,r6,1
   10abc:	50800315 	stw	r2,12(r10)
   10ac0:	50800215 	stw	r2,8(r10)
   10ac4:	19800015 	stw	r6,0(r3)
   10ac8:	11000115 	stw	r4,4(r2)
   10acc:	12800215 	stw	r10,8(r2)
   10ad0:	12800315 	stw	r10,12(r2)
   10ad4:	9009883a 	mov	r4,r18
   10ad8:	00131e80 	call	131e8 <__malloc_unlock>
   10adc:	80c00204 	addi	r3,r16,8
   10ae0:	003f5906 	br	10848 <_malloc_r+0x50>
   10ae4:	8109883a 	add	r4,r16,r4
   10ae8:	20800117 	ldw	r2,4(r4)
   10aec:	80c00217 	ldw	r3,8(r16)
   10af0:	81400317 	ldw	r5,12(r16)
   10af4:	10800054 	ori	r2,r2,1
   10af8:	20800115 	stw	r2,4(r4)
   10afc:	28c00215 	stw	r3,8(r5)
   10b00:	19400315 	stw	r5,12(r3)
   10b04:	9009883a 	mov	r4,r18
   10b08:	00131e80 	call	131e8 <__malloc_unlock>
   10b0c:	80c00204 	addi	r3,r16,8
   10b10:	003f4d06 	br	10848 <_malloc_r+0x50>
   10b14:	80800204 	addi	r2,r16,8
   10b18:	14000317 	ldw	r16,12(r2)
   10b1c:	143f911e 	bne	r2,r16,10964 <_malloc_r+0x16c>
   10b20:	1a400084 	addi	r9,r3,2
   10b24:	003f7306 	br	108f4 <_malloc_r+0xfc>
   10b28:	88c00054 	ori	r3,r17,1
   10b2c:	8445883a 	add	r2,r16,r17
   10b30:	80c00115 	stw	r3,4(r16)
   10b34:	003fdf06 	br	10ab4 <_malloc_r+0x2bc>
   10b38:	e4000217 	ldw	r16,8(fp)
   10b3c:	00bfff04 	movi	r2,-4
   10b40:	80c00117 	ldw	r3,4(r16)
   10b44:	802d883a 	mov	r22,r16
   10b48:	18aa703a 	and	r21,r3,r2
   10b4c:	ac401636 	bltu	r21,r17,10ba8 <_malloc_r+0x3b0>
   10b50:	ac49c83a 	sub	r4,r21,r17
   10b54:	008003c4 	movi	r2,15
   10b58:	1100130e 	bge	r2,r4,10ba8 <_malloc_r+0x3b0>
   10b5c:	88800054 	ori	r2,r17,1
   10b60:	8447883a 	add	r3,r16,r17
   10b64:	80800115 	stw	r2,4(r16)
   10b68:	20800054 	ori	r2,r4,1
   10b6c:	18800115 	stw	r2,4(r3)
   10b70:	e0c00215 	stw	r3,8(fp)
   10b74:	9009883a 	mov	r4,r18
   10b78:	00131e80 	call	131e8 <__malloc_unlock>
   10b7c:	80c00204 	addi	r3,r16,8
   10b80:	003f3106 	br	10848 <_malloc_r+0x50>
   10b84:	39c00117 	ldw	r7,4(r7)
   10b88:	573ffe04 	addi	fp,r10,-8
   10b8c:	003fa006 	br	10a10 <_malloc_r+0x218>
   10b90:	00801504 	movi	r2,84
   10b94:	10c06736 	bltu	r2,r3,10d34 <_malloc_r+0x53c>
   10b98:	8804d33a 	srli	r2,r17,12
   10b9c:	11801b84 	addi	r6,r2,110
   10ba0:	300490fa 	slli	r2,r6,3
   10ba4:	003f4106 	br	108ac <_malloc_r+0xb4>
   10ba8:	d0a6a017 	ldw	r2,-25984(gp)
   10bac:	d0e00317 	ldw	r3,-32756(gp)
   10bb0:	053fffc4 	movi	r20,-1
   10bb4:	10800404 	addi	r2,r2,16
   10bb8:	88a7883a 	add	r19,r17,r2
   10bbc:	1d000326 	beq	r3,r20,10bcc <_malloc_r+0x3d4>
   10bc0:	98c3ffc4 	addi	r3,r19,4095
   10bc4:	00bc0004 	movi	r2,-4096
   10bc8:	18a6703a 	and	r19,r3,r2
   10bcc:	9009883a 	mov	r4,r18
   10bd0:	980b883a 	mov	r5,r19
   10bd4:	00117900 	call	11790 <_sbrk_r>
   10bd8:	1009883a 	mov	r4,r2
   10bdc:	15000426 	beq	r2,r20,10bf0 <_malloc_r+0x3f8>
   10be0:	854b883a 	add	r5,r16,r21
   10be4:	1029883a 	mov	r20,r2
   10be8:	11405a2e 	bgeu	r2,r5,10d54 <_malloc_r+0x55c>
   10bec:	87000c26 	beq	r16,fp,10c20 <_malloc_r+0x428>
   10bf0:	e4000217 	ldw	r16,8(fp)
   10bf4:	80c00117 	ldw	r3,4(r16)
   10bf8:	00bfff04 	movi	r2,-4
   10bfc:	1884703a 	and	r2,r3,r2
   10c00:	14400336 	bltu	r2,r17,10c10 <_malloc_r+0x418>
   10c04:	1449c83a 	sub	r4,r2,r17
   10c08:	008003c4 	movi	r2,15
   10c0c:	113fd316 	blt	r2,r4,10b5c <_malloc_r+0x364>
   10c10:	9009883a 	mov	r4,r18
   10c14:	00131e80 	call	131e8 <__malloc_unlock>
   10c18:	0007883a 	mov	r3,zero
   10c1c:	003f0a06 	br	10848 <_malloc_r+0x50>
   10c20:	05c000b4 	movhi	r23,2
   10c24:	bde27104 	addi	r23,r23,-30268
   10c28:	b8800017 	ldw	r2,0(r23)
   10c2c:	988d883a 	add	r6,r19,r2
   10c30:	b9800015 	stw	r6,0(r23)
   10c34:	d0e00317 	ldw	r3,-32756(gp)
   10c38:	00bfffc4 	movi	r2,-1
   10c3c:	18808e26 	beq	r3,r2,10e78 <_malloc_r+0x680>
   10c40:	2145c83a 	sub	r2,r4,r5
   10c44:	3085883a 	add	r2,r6,r2
   10c48:	b8800015 	stw	r2,0(r23)
   10c4c:	20c001cc 	andi	r3,r4,7
   10c50:	18005f1e 	bne	r3,zero,10dd0 <_malloc_r+0x5d8>
   10c54:	000b883a 	mov	r5,zero
   10c58:	a4c5883a 	add	r2,r20,r19
   10c5c:	1083ffcc 	andi	r2,r2,4095
   10c60:	00c40004 	movi	r3,4096
   10c64:	1887c83a 	sub	r3,r3,r2
   10c68:	28e7883a 	add	r19,r5,r3
   10c6c:	9009883a 	mov	r4,r18
   10c70:	980b883a 	mov	r5,r19
   10c74:	00117900 	call	11790 <_sbrk_r>
   10c78:	1007883a 	mov	r3,r2
   10c7c:	00bfffc4 	movi	r2,-1
   10c80:	18807a26 	beq	r3,r2,10e6c <_malloc_r+0x674>
   10c84:	1d05c83a 	sub	r2,r3,r20
   10c88:	9885883a 	add	r2,r19,r2
   10c8c:	10c00054 	ori	r3,r2,1
   10c90:	b8800017 	ldw	r2,0(r23)
   10c94:	a021883a 	mov	r16,r20
   10c98:	a0c00115 	stw	r3,4(r20)
   10c9c:	9885883a 	add	r2,r19,r2
   10ca0:	b8800015 	stw	r2,0(r23)
   10ca4:	e5000215 	stw	r20,8(fp)
   10ca8:	b7003626 	beq	r22,fp,10d84 <_malloc_r+0x58c>
   10cac:	018003c4 	movi	r6,15
   10cb0:	35404b36 	bltu	r6,r21,10de0 <_malloc_r+0x5e8>
   10cb4:	00800044 	movi	r2,1
   10cb8:	a0800115 	stw	r2,4(r20)
   10cbc:	003fcd06 	br	10bf4 <_malloc_r+0x3fc>
   10cc0:	2808d27a 	srli	r4,r5,9
   10cc4:	2000371e 	bne	r4,zero,10da4 <_malloc_r+0x5ac>
   10cc8:	2808d0fa 	srli	r4,r5,3
   10ccc:	200690fa 	slli	r3,r4,3
   10cd0:	1ad1883a 	add	r8,r3,r11
   10cd4:	41800217 	ldw	r6,8(r8)
   10cd8:	41805b26 	beq	r8,r6,10e48 <_malloc_r+0x650>
   10cdc:	30800117 	ldw	r2,4(r6)
   10ce0:	00ffff04 	movi	r3,-4
   10ce4:	10c4703a 	and	r2,r2,r3
   10ce8:	2880022e 	bgeu	r5,r2,10cf4 <_malloc_r+0x4fc>
   10cec:	31800217 	ldw	r6,8(r6)
   10cf0:	41bffa1e 	bne	r8,r6,10cdc <_malloc_r+0x4e4>
   10cf4:	32000317 	ldw	r8,12(r6)
   10cf8:	39c00117 	ldw	r7,4(r7)
   10cfc:	82000315 	stw	r8,12(r16)
   10d00:	81800215 	stw	r6,8(r16)
   10d04:	07000074 	movhi	fp,1
   10d08:	e7164304 	addi	fp,fp,22796
   10d0c:	34000315 	stw	r16,12(r6)
   10d10:	44000215 	stw	r16,8(r8)
   10d14:	003f3e06 	br	10a10 <_malloc_r+0x218>
   10d18:	63000044 	addi	r12,r12,1
   10d1c:	608000cc 	andi	r2,r12,3
   10d20:	10005d26 	beq	r2,zero,10e98 <_malloc_r+0x6a0>
   10d24:	18c00204 	addi	r3,r3,8
   10d28:	003f5106 	br	10a70 <_malloc_r+0x278>
   10d2c:	8089883a 	add	r4,r16,r2
   10d30:	003f6d06 	br	10ae8 <_malloc_r+0x2f0>
   10d34:	00805504 	movi	r2,340
   10d38:	10c02036 	bltu	r2,r3,10dbc <_malloc_r+0x5c4>
   10d3c:	8804d3fa 	srli	r2,r17,15
   10d40:	11801dc4 	addi	r6,r2,119
   10d44:	300490fa 	slli	r2,r6,3
   10d48:	003ed806 	br	108ac <_malloc_r+0xb4>
   10d4c:	48c000c4 	addi	r3,r9,3
   10d50:	003f3106 	br	10a18 <_malloc_r+0x220>
   10d54:	05c000b4 	movhi	r23,2
   10d58:	bde27104 	addi	r23,r23,-30268
   10d5c:	b8800017 	ldw	r2,0(r23)
   10d60:	988d883a 	add	r6,r19,r2
   10d64:	b9800015 	stw	r6,0(r23)
   10d68:	293fb21e 	bne	r5,r4,10c34 <_malloc_r+0x43c>
   10d6c:	2083ffcc 	andi	r2,r4,4095
   10d70:	103fb01e 	bne	r2,zero,10c34 <_malloc_r+0x43c>
   10d74:	e4000217 	ldw	r16,8(fp)
   10d78:	9d45883a 	add	r2,r19,r21
   10d7c:	10800054 	ori	r2,r2,1
   10d80:	80800115 	stw	r2,4(r16)
   10d84:	b8c00017 	ldw	r3,0(r23)
   10d88:	d0a6a117 	ldw	r2,-25980(gp)
   10d8c:	10c0012e 	bgeu	r2,r3,10d94 <_malloc_r+0x59c>
   10d90:	d0e6a115 	stw	r3,-25980(gp)
   10d94:	d0a6a217 	ldw	r2,-25976(gp)
   10d98:	10ff962e 	bgeu	r2,r3,10bf4 <_malloc_r+0x3fc>
   10d9c:	d0e6a215 	stw	r3,-25976(gp)
   10da0:	003f9406 	br	10bf4 <_malloc_r+0x3fc>
   10da4:	00800104 	movi	r2,4
   10da8:	11001e36 	bltu	r2,r4,10e24 <_malloc_r+0x62c>
   10dac:	2804d1ba 	srli	r2,r5,6
   10db0:	11000e04 	addi	r4,r2,56
   10db4:	200690fa 	slli	r3,r4,3
   10db8:	003fc506 	br	10cd0 <_malloc_r+0x4d8>
   10dbc:	00815504 	movi	r2,1364
   10dc0:	10c01d2e 	bgeu	r2,r3,10e38 <_malloc_r+0x640>
   10dc4:	01801f84 	movi	r6,126
   10dc8:	0080fc04 	movi	r2,1008
   10dcc:	003eb706 	br	108ac <_malloc_r+0xb4>
   10dd0:	00800204 	movi	r2,8
   10dd4:	10cbc83a 	sub	r5,r2,r3
   10dd8:	2169883a 	add	r20,r4,r5
   10ddc:	003f9e06 	br	10c58 <_malloc_r+0x460>
   10de0:	00bffe04 	movi	r2,-8
   10de4:	a93ffd04 	addi	r4,r21,-12
   10de8:	2088703a 	and	r4,r4,r2
   10dec:	b10b883a 	add	r5,r22,r4
   10df0:	00c00144 	movi	r3,5
   10df4:	28c00215 	stw	r3,8(r5)
   10df8:	28c00115 	stw	r3,4(r5)
   10dfc:	b0800117 	ldw	r2,4(r22)
   10e00:	1080004c 	andi	r2,r2,1
   10e04:	2084b03a 	or	r2,r4,r2
   10e08:	b0800115 	stw	r2,4(r22)
   10e0c:	313fdd2e 	bgeu	r6,r4,10d84 <_malloc_r+0x58c>
   10e10:	b1400204 	addi	r5,r22,8
   10e14:	9009883a 	mov	r4,r18
   10e18:	0011f580 	call	11f58 <_free_r>
   10e1c:	e4000217 	ldw	r16,8(fp)
   10e20:	003fd806 	br	10d84 <_malloc_r+0x58c>
   10e24:	00800504 	movi	r2,20
   10e28:	11001536 	bltu	r2,r4,10e80 <_malloc_r+0x688>
   10e2c:	210016c4 	addi	r4,r4,91
   10e30:	200690fa 	slli	r3,r4,3
   10e34:	003fa606 	br	10cd0 <_malloc_r+0x4d8>
   10e38:	8804d4ba 	srli	r2,r17,18
   10e3c:	11801f04 	addi	r6,r2,124
   10e40:	300490fa 	slli	r2,r6,3
   10e44:	003e9906 	br	108ac <_malloc_r+0xb4>
   10e48:	2009d0ba 	srai	r4,r4,2
   10e4c:	01400074 	movhi	r5,1
   10e50:	29564304 	addi	r5,r5,22796
   10e54:	00c00044 	movi	r3,1
   10e58:	28800117 	ldw	r2,4(r5)
   10e5c:	1906983a 	sll	r3,r3,r4
   10e60:	10c4b03a 	or	r2,r2,r3
   10e64:	28800115 	stw	r2,4(r5)
   10e68:	003fa306 	br	10cf8 <_malloc_r+0x500>
   10e6c:	0027883a 	mov	r19,zero
   10e70:	00c00044 	movi	r3,1
   10e74:	003f8606 	br	10c90 <_malloc_r+0x498>
   10e78:	d1200315 	stw	r4,-32756(gp)
   10e7c:	003f7306 	br	10c4c <_malloc_r+0x454>
   10e80:	00801504 	movi	r2,84
   10e84:	11001936 	bltu	r2,r4,10eec <_malloc_r+0x6f4>
   10e88:	2804d33a 	srli	r2,r5,12
   10e8c:	11001b84 	addi	r4,r2,110
   10e90:	200690fa 	slli	r3,r4,3
   10e94:	003f8e06 	br	10cd0 <_malloc_r+0x4d8>
   10e98:	480b883a 	mov	r5,r9
   10e9c:	6807883a 	mov	r3,r13
   10ea0:	288000cc 	andi	r2,r5,3
   10ea4:	18fffe04 	addi	r3,r3,-8
   10ea8:	297fffc4 	addi	r5,r5,-1
   10eac:	10001526 	beq	r2,zero,10f04 <_malloc_r+0x70c>
   10eb0:	18800217 	ldw	r2,8(r3)
   10eb4:	10fffa26 	beq	r2,r3,10ea0 <_malloc_r+0x6a8>
   10eb8:	2109883a 	add	r4,r4,r4
   10ebc:	393f1e36 	bltu	r7,r4,10b38 <_malloc_r+0x340>
   10ec0:	203f1d26 	beq	r4,zero,10b38 <_malloc_r+0x340>
   10ec4:	21c4703a 	and	r2,r4,r7
   10ec8:	10000226 	beq	r2,zero,10ed4 <_malloc_r+0x6dc>
   10ecc:	6013883a 	mov	r9,r12
   10ed0:	003ee106 	br	10a58 <_malloc_r+0x260>
   10ed4:	2109883a 	add	r4,r4,r4
   10ed8:	3904703a 	and	r2,r7,r4
   10edc:	63000104 	addi	r12,r12,4
   10ee0:	103ffc26 	beq	r2,zero,10ed4 <_malloc_r+0x6dc>
   10ee4:	6013883a 	mov	r9,r12
   10ee8:	003edb06 	br	10a58 <_malloc_r+0x260>
   10eec:	00805504 	movi	r2,340
   10ef0:	11000836 	bltu	r2,r4,10f14 <_malloc_r+0x71c>
   10ef4:	2804d3fa 	srli	r2,r5,15
   10ef8:	11001dc4 	addi	r4,r2,119
   10efc:	200690fa 	slli	r3,r4,3
   10f00:	003f7306 	br	10cd0 <_malloc_r+0x4d8>
   10f04:	0104303a 	nor	r2,zero,r4
   10f08:	388e703a 	and	r7,r7,r2
   10f0c:	e1c00115 	stw	r7,4(fp)
   10f10:	003fe906 	br	10eb8 <_malloc_r+0x6c0>
   10f14:	00815504 	movi	r2,1364
   10f18:	1100032e 	bgeu	r2,r4,10f28 <_malloc_r+0x730>
   10f1c:	01001f84 	movi	r4,126
   10f20:	00c0fc04 	movi	r3,1008
   10f24:	003f6a06 	br	10cd0 <_malloc_r+0x4d8>
   10f28:	2804d4ba 	srli	r2,r5,18
   10f2c:	11001f04 	addi	r4,r2,124
   10f30:	200690fa 	slli	r3,r4,3
   10f34:	003f6606 	br	10cd0 <_malloc_r+0x4d8>

00010f38 <memchr>:
   10f38:	008000c4 	movi	r2,3
   10f3c:	29403fcc 	andi	r5,r5,255
   10f40:	2007883a 	mov	r3,r4
   10f44:	1180022e 	bgeu	r2,r6,10f50 <memchr+0x18>
   10f48:	2084703a 	and	r2,r4,r2
   10f4c:	10000b26 	beq	r2,zero,10f7c <memchr+0x44>
   10f50:	313fffc4 	addi	r4,r6,-1
   10f54:	3000051e 	bne	r6,zero,10f6c <memchr+0x34>
   10f58:	00002c06 	br	1100c <memchr+0xd4>
   10f5c:	213fffc4 	addi	r4,r4,-1
   10f60:	00bfffc4 	movi	r2,-1
   10f64:	18c00044 	addi	r3,r3,1
   10f68:	20802826 	beq	r4,r2,1100c <memchr+0xd4>
   10f6c:	18800003 	ldbu	r2,0(r3)
   10f70:	28bffa1e 	bne	r5,r2,10f5c <memchr+0x24>
   10f74:	1805883a 	mov	r2,r3
   10f78:	f800283a 	ret
   10f7c:	0011883a 	mov	r8,zero
   10f80:	0007883a 	mov	r3,zero
   10f84:	01c00104 	movi	r7,4
   10f88:	4004923a 	slli	r2,r8,8
   10f8c:	18c00044 	addi	r3,r3,1
   10f90:	1151883a 	add	r8,r2,r5
   10f94:	19fffc1e 	bne	r3,r7,10f88 <memchr+0x50>
   10f98:	02bfbff4 	movhi	r10,65279
   10f9c:	52bfbfc4 	addi	r10,r10,-257
   10fa0:	02602074 	movhi	r9,32897
   10fa4:	4a602004 	addi	r9,r9,-32640
   10fa8:	02c000c4 	movi	r11,3
   10fac:	20800017 	ldw	r2,0(r4)
   10fb0:	31bfff04 	addi	r6,r6,-4
   10fb4:	200f883a 	mov	r7,r4
   10fb8:	1204f03a 	xor	r2,r2,r8
   10fbc:	1287883a 	add	r3,r2,r10
   10fc0:	1a46703a 	and	r3,r3,r9
   10fc4:	0084303a 	nor	r2,zero,r2
   10fc8:	10c4703a 	and	r2,r2,r3
   10fcc:	10000b26 	beq	r2,zero,10ffc <memchr+0xc4>
   10fd0:	20800003 	ldbu	r2,0(r4)
   10fd4:	28800f26 	beq	r5,r2,11014 <memchr+0xdc>
   10fd8:	20800043 	ldbu	r2,1(r4)
   10fdc:	21c00044 	addi	r7,r4,1
   10fe0:	28800c26 	beq	r5,r2,11014 <memchr+0xdc>
   10fe4:	20800083 	ldbu	r2,2(r4)
   10fe8:	21c00084 	addi	r7,r4,2
   10fec:	28800926 	beq	r5,r2,11014 <memchr+0xdc>
   10ff0:	208000c3 	ldbu	r2,3(r4)
   10ff4:	21c000c4 	addi	r7,r4,3
   10ff8:	28800626 	beq	r5,r2,11014 <memchr+0xdc>
   10ffc:	21000104 	addi	r4,r4,4
   11000:	59bfea36 	bltu	r11,r6,10fac <memchr+0x74>
   11004:	2007883a 	mov	r3,r4
   11008:	003fd106 	br	10f50 <memchr+0x18>
   1100c:	0005883a 	mov	r2,zero
   11010:	f800283a 	ret
   11014:	3805883a 	mov	r2,r7
   11018:	f800283a 	ret

0001101c <memcpy>:
   1101c:	01c003c4 	movi	r7,15
   11020:	2007883a 	mov	r3,r4
   11024:	3980032e 	bgeu	r7,r6,11034 <memcpy+0x18>
   11028:	2904b03a 	or	r2,r5,r4
   1102c:	108000cc 	andi	r2,r2,3
   11030:	10000926 	beq	r2,zero,11058 <memcpy+0x3c>
   11034:	30000626 	beq	r6,zero,11050 <memcpy+0x34>
   11038:	30cd883a 	add	r6,r6,r3
   1103c:	28800003 	ldbu	r2,0(r5)
   11040:	29400044 	addi	r5,r5,1
   11044:	18800005 	stb	r2,0(r3)
   11048:	18c00044 	addi	r3,r3,1
   1104c:	30fffb1e 	bne	r6,r3,1103c <memcpy+0x20>
   11050:	2005883a 	mov	r2,r4
   11054:	f800283a 	ret
   11058:	3811883a 	mov	r8,r7
   1105c:	200f883a 	mov	r7,r4
   11060:	28c00017 	ldw	r3,0(r5)
   11064:	31bffc04 	addi	r6,r6,-16
   11068:	38c00015 	stw	r3,0(r7)
   1106c:	28800117 	ldw	r2,4(r5)
   11070:	38800115 	stw	r2,4(r7)
   11074:	28c00217 	ldw	r3,8(r5)
   11078:	38c00215 	stw	r3,8(r7)
   1107c:	28800317 	ldw	r2,12(r5)
   11080:	29400404 	addi	r5,r5,16
   11084:	38800315 	stw	r2,12(r7)
   11088:	39c00404 	addi	r7,r7,16
   1108c:	41bff436 	bltu	r8,r6,11060 <memcpy+0x44>
   11090:	008000c4 	movi	r2,3
   11094:	1180072e 	bgeu	r2,r6,110b4 <memcpy+0x98>
   11098:	1007883a 	mov	r3,r2
   1109c:	28800017 	ldw	r2,0(r5)
   110a0:	31bfff04 	addi	r6,r6,-4
   110a4:	29400104 	addi	r5,r5,4
   110a8:	38800015 	stw	r2,0(r7)
   110ac:	39c00104 	addi	r7,r7,4
   110b0:	19bffa36 	bltu	r3,r6,1109c <memcpy+0x80>
   110b4:	3807883a 	mov	r3,r7
   110b8:	003fde06 	br	11034 <memcpy+0x18>

000110bc <memmove>:
   110bc:	2807883a 	mov	r3,r5
   110c0:	2011883a 	mov	r8,r4
   110c4:	29000c2e 	bgeu	r5,r4,110f8 <memmove+0x3c>
   110c8:	298f883a 	add	r7,r5,r6
   110cc:	21c00a2e 	bgeu	r4,r7,110f8 <memmove+0x3c>
   110d0:	30000726 	beq	r6,zero,110f0 <memmove+0x34>
   110d4:	2187883a 	add	r3,r4,r6
   110d8:	198dc83a 	sub	r6,r3,r6
   110dc:	39ffffc4 	addi	r7,r7,-1
   110e0:	38800003 	ldbu	r2,0(r7)
   110e4:	18ffffc4 	addi	r3,r3,-1
   110e8:	18800005 	stb	r2,0(r3)
   110ec:	19bffb1e 	bne	r3,r6,110dc <memmove+0x20>
   110f0:	2005883a 	mov	r2,r4
   110f4:	f800283a 	ret
   110f8:	01c003c4 	movi	r7,15
   110fc:	39800a36 	bltu	r7,r6,11128 <memmove+0x6c>
   11100:	303ffb26 	beq	r6,zero,110f0 <memmove+0x34>
   11104:	400f883a 	mov	r7,r8
   11108:	320d883a 	add	r6,r6,r8
   1110c:	28800003 	ldbu	r2,0(r5)
   11110:	29400044 	addi	r5,r5,1
   11114:	38800005 	stb	r2,0(r7)
   11118:	39c00044 	addi	r7,r7,1
   1111c:	39bffb1e 	bne	r7,r6,1110c <memmove+0x50>
   11120:	2005883a 	mov	r2,r4
   11124:	f800283a 	ret
   11128:	1904b03a 	or	r2,r3,r4
   1112c:	108000cc 	andi	r2,r2,3
   11130:	103ff31e 	bne	r2,zero,11100 <memmove+0x44>
   11134:	3811883a 	mov	r8,r7
   11138:	180b883a 	mov	r5,r3
   1113c:	200f883a 	mov	r7,r4
   11140:	28c00017 	ldw	r3,0(r5)
   11144:	31bffc04 	addi	r6,r6,-16
   11148:	38c00015 	stw	r3,0(r7)
   1114c:	28800117 	ldw	r2,4(r5)
   11150:	38800115 	stw	r2,4(r7)
   11154:	28c00217 	ldw	r3,8(r5)
   11158:	38c00215 	stw	r3,8(r7)
   1115c:	28800317 	ldw	r2,12(r5)
   11160:	29400404 	addi	r5,r5,16
   11164:	38800315 	stw	r2,12(r7)
   11168:	39c00404 	addi	r7,r7,16
   1116c:	41bff436 	bltu	r8,r6,11140 <memmove+0x84>
   11170:	008000c4 	movi	r2,3
   11174:	1180072e 	bgeu	r2,r6,11194 <memmove+0xd8>
   11178:	1007883a 	mov	r3,r2
   1117c:	28800017 	ldw	r2,0(r5)
   11180:	31bfff04 	addi	r6,r6,-4
   11184:	29400104 	addi	r5,r5,4
   11188:	38800015 	stw	r2,0(r7)
   1118c:	39c00104 	addi	r7,r7,4
   11190:	19bffa36 	bltu	r3,r6,1117c <memmove+0xc0>
   11194:	3811883a 	mov	r8,r7
   11198:	003fd906 	br	11100 <memmove+0x44>

0001119c <_realloc_r>:
   1119c:	defff404 	addi	sp,sp,-48
   111a0:	dd800815 	stw	r22,32(sp)
   111a4:	dc800415 	stw	r18,16(sp)
   111a8:	dc400315 	stw	r17,12(sp)
   111ac:	dfc00b15 	stw	ra,44(sp)
   111b0:	df000a15 	stw	fp,40(sp)
   111b4:	ddc00915 	stw	r23,36(sp)
   111b8:	dd400715 	stw	r21,28(sp)
   111bc:	dd000615 	stw	r20,24(sp)
   111c0:	dcc00515 	stw	r19,20(sp)
   111c4:	dc000215 	stw	r16,8(sp)
   111c8:	2825883a 	mov	r18,r5
   111cc:	3023883a 	mov	r17,r6
   111d0:	202d883a 	mov	r22,r4
   111d4:	2800c926 	beq	r5,zero,114fc <_realloc_r+0x360>
   111d8:	00131c80 	call	131c8 <__malloc_lock>
   111dc:	943ffe04 	addi	r16,r18,-8
   111e0:	88c002c4 	addi	r3,r17,11
   111e4:	00800584 	movi	r2,22
   111e8:	82000117 	ldw	r8,4(r16)
   111ec:	10c01b2e 	bgeu	r2,r3,1125c <_realloc_r+0xc0>
   111f0:	00bffe04 	movi	r2,-8
   111f4:	188e703a 	and	r7,r3,r2
   111f8:	3839883a 	mov	fp,r7
   111fc:	38001a16 	blt	r7,zero,11268 <_realloc_r+0xcc>
   11200:	e4401936 	bltu	fp,r17,11268 <_realloc_r+0xcc>
   11204:	013fff04 	movi	r4,-4
   11208:	4126703a 	and	r19,r8,r4
   1120c:	99c02616 	blt	r19,r7,112a8 <_realloc_r+0x10c>
   11210:	802b883a 	mov	r21,r16
   11214:	9829883a 	mov	r20,r19
   11218:	84000204 	addi	r16,r16,8
   1121c:	a80f883a 	mov	r7,r21
   11220:	a70dc83a 	sub	r6,r20,fp
   11224:	008003c4 	movi	r2,15
   11228:	1180c136 	bltu	r2,r6,11530 <_realloc_r+0x394>
   1122c:	38800117 	ldw	r2,4(r7)
   11230:	a549883a 	add	r4,r20,r21
   11234:	1080004c 	andi	r2,r2,1
   11238:	a084b03a 	or	r2,r20,r2
   1123c:	38800115 	stw	r2,4(r7)
   11240:	20c00117 	ldw	r3,4(r4)
   11244:	18c00054 	ori	r3,r3,1
   11248:	20c00115 	stw	r3,4(r4)
   1124c:	b009883a 	mov	r4,r22
   11250:	00131e80 	call	131e8 <__malloc_unlock>
   11254:	8023883a 	mov	r17,r16
   11258:	00000606 	br	11274 <_realloc_r+0xd8>
   1125c:	01c00404 	movi	r7,16
   11260:	3839883a 	mov	fp,r7
   11264:	e47fe72e 	bgeu	fp,r17,11204 <_realloc_r+0x68>
   11268:	00800304 	movi	r2,12
   1126c:	0023883a 	mov	r17,zero
   11270:	b0800015 	stw	r2,0(r22)
   11274:	8805883a 	mov	r2,r17
   11278:	dfc00b17 	ldw	ra,44(sp)
   1127c:	df000a17 	ldw	fp,40(sp)
   11280:	ddc00917 	ldw	r23,36(sp)
   11284:	dd800817 	ldw	r22,32(sp)
   11288:	dd400717 	ldw	r21,28(sp)
   1128c:	dd000617 	ldw	r20,24(sp)
   11290:	dcc00517 	ldw	r19,20(sp)
   11294:	dc800417 	ldw	r18,16(sp)
   11298:	dc400317 	ldw	r17,12(sp)
   1129c:	dc000217 	ldw	r16,8(sp)
   112a0:	dec00c04 	addi	sp,sp,48
   112a4:	f800283a 	ret
   112a8:	00800074 	movhi	r2,1
   112ac:	10964304 	addi	r2,r2,22796
   112b0:	12400217 	ldw	r9,8(r2)
   112b4:	84cd883a 	add	r6,r16,r19
   112b8:	802b883a 	mov	r21,r16
   112bc:	3240b926 	beq	r6,r9,115a4 <_realloc_r+0x408>
   112c0:	31400117 	ldw	r5,4(r6)
   112c4:	00bfff84 	movi	r2,-2
   112c8:	2884703a 	and	r2,r5,r2
   112cc:	1185883a 	add	r2,r2,r6
   112d0:	10c00117 	ldw	r3,4(r2)
   112d4:	18c0004c 	andi	r3,r3,1
   112d8:	1807003a 	cmpeq	r3,r3,zero
   112dc:	1800a326 	beq	r3,zero,1156c <_realloc_r+0x3d0>
   112e0:	2908703a 	and	r4,r5,r4
   112e4:	9929883a 	add	r20,r19,r4
   112e8:	a1c0a30e 	bge	r20,r7,11578 <_realloc_r+0x3dc>
   112ec:	4080004c 	andi	r2,r8,1
   112f0:	1000551e 	bne	r2,zero,11448 <_realloc_r+0x2ac>
   112f4:	80800017 	ldw	r2,0(r16)
   112f8:	80afc83a 	sub	r23,r16,r2
   112fc:	b8c00117 	ldw	r3,4(r23)
   11300:	00bfff04 	movi	r2,-4
   11304:	1884703a 	and	r2,r3,r2
   11308:	30002e26 	beq	r6,zero,113c4 <_realloc_r+0x228>
   1130c:	3240b926 	beq	r6,r9,115f4 <_realloc_r+0x458>
   11310:	98a9883a 	add	r20,r19,r2
   11314:	2509883a 	add	r4,r4,r20
   11318:	d9000015 	stw	r4,0(sp)
   1131c:	21c02a16 	blt	r4,r7,113c8 <_realloc_r+0x22c>
   11320:	30800317 	ldw	r2,12(r6)
   11324:	30c00217 	ldw	r3,8(r6)
   11328:	01400904 	movi	r5,36
   1132c:	99bfff04 	addi	r6,r19,-4
   11330:	18800315 	stw	r2,12(r3)
   11334:	10c00215 	stw	r3,8(r2)
   11338:	b9000317 	ldw	r4,12(r23)
   1133c:	b8800217 	ldw	r2,8(r23)
   11340:	b82b883a 	mov	r21,r23
   11344:	bc000204 	addi	r16,r23,8
   11348:	20800215 	stw	r2,8(r4)
   1134c:	11000315 	stw	r4,12(r2)
   11350:	2980e436 	bltu	r5,r6,116e4 <_realloc_r+0x548>
   11354:	008004c4 	movi	r2,19
   11358:	9009883a 	mov	r4,r18
   1135c:	8011883a 	mov	r8,r16
   11360:	11800f2e 	bgeu	r2,r6,113a0 <_realloc_r+0x204>
   11364:	90800017 	ldw	r2,0(r18)
   11368:	ba000404 	addi	r8,r23,16
   1136c:	91000204 	addi	r4,r18,8
   11370:	b8800215 	stw	r2,8(r23)
   11374:	90c00117 	ldw	r3,4(r18)
   11378:	008006c4 	movi	r2,27
   1137c:	b8c00315 	stw	r3,12(r23)
   11380:	1180072e 	bgeu	r2,r6,113a0 <_realloc_r+0x204>
   11384:	90c00217 	ldw	r3,8(r18)
   11388:	ba000604 	addi	r8,r23,24
   1138c:	91000404 	addi	r4,r18,16
   11390:	b8c00415 	stw	r3,16(r23)
   11394:	90800317 	ldw	r2,12(r18)
   11398:	b8800515 	stw	r2,20(r23)
   1139c:	3140e726 	beq	r6,r5,1173c <_realloc_r+0x5a0>
   113a0:	20800017 	ldw	r2,0(r4)
   113a4:	dd000017 	ldw	r20,0(sp)
   113a8:	b80f883a 	mov	r7,r23
   113ac:	40800015 	stw	r2,0(r8)
   113b0:	20c00117 	ldw	r3,4(r4)
   113b4:	40c00115 	stw	r3,4(r8)
   113b8:	20800217 	ldw	r2,8(r4)
   113bc:	40800215 	stw	r2,8(r8)
   113c0:	003f9706 	br	11220 <_realloc_r+0x84>
   113c4:	98a9883a 	add	r20,r19,r2
   113c8:	a1c01f16 	blt	r20,r7,11448 <_realloc_r+0x2ac>
   113cc:	b8c00317 	ldw	r3,12(r23)
   113d0:	b8800217 	ldw	r2,8(r23)
   113d4:	99bfff04 	addi	r6,r19,-4
   113d8:	01400904 	movi	r5,36
   113dc:	b82b883a 	mov	r21,r23
   113e0:	18800215 	stw	r2,8(r3)
   113e4:	10c00315 	stw	r3,12(r2)
   113e8:	bc000204 	addi	r16,r23,8
   113ec:	2980c336 	bltu	r5,r6,116fc <_realloc_r+0x560>
   113f0:	008004c4 	movi	r2,19
   113f4:	9009883a 	mov	r4,r18
   113f8:	8011883a 	mov	r8,r16
   113fc:	11800f2e 	bgeu	r2,r6,1143c <_realloc_r+0x2a0>
   11400:	90800017 	ldw	r2,0(r18)
   11404:	ba000404 	addi	r8,r23,16
   11408:	91000204 	addi	r4,r18,8
   1140c:	b8800215 	stw	r2,8(r23)
   11410:	90c00117 	ldw	r3,4(r18)
   11414:	008006c4 	movi	r2,27
   11418:	b8c00315 	stw	r3,12(r23)
   1141c:	1180072e 	bgeu	r2,r6,1143c <_realloc_r+0x2a0>
   11420:	90c00217 	ldw	r3,8(r18)
   11424:	ba000604 	addi	r8,r23,24
   11428:	91000404 	addi	r4,r18,16
   1142c:	b8c00415 	stw	r3,16(r23)
   11430:	90800317 	ldw	r2,12(r18)
   11434:	b8800515 	stw	r2,20(r23)
   11438:	3140c726 	beq	r6,r5,11758 <_realloc_r+0x5bc>
   1143c:	20800017 	ldw	r2,0(r4)
   11440:	b80f883a 	mov	r7,r23
   11444:	003fd906 	br	113ac <_realloc_r+0x210>
   11448:	880b883a 	mov	r5,r17
   1144c:	b009883a 	mov	r4,r22
   11450:	00107f80 	call	107f8 <_malloc_r>
   11454:	1023883a 	mov	r17,r2
   11458:	10002526 	beq	r2,zero,114f0 <_realloc_r+0x354>
   1145c:	80800117 	ldw	r2,4(r16)
   11460:	00ffff84 	movi	r3,-2
   11464:	893ffe04 	addi	r4,r17,-8
   11468:	10c4703a 	and	r2,r2,r3
   1146c:	8085883a 	add	r2,r16,r2
   11470:	20809526 	beq	r4,r2,116c8 <_realloc_r+0x52c>
   11474:	99bfff04 	addi	r6,r19,-4
   11478:	01c00904 	movi	r7,36
   1147c:	39804536 	bltu	r7,r6,11594 <_realloc_r+0x3f8>
   11480:	008004c4 	movi	r2,19
   11484:	9009883a 	mov	r4,r18
   11488:	880b883a 	mov	r5,r17
   1148c:	11800f2e 	bgeu	r2,r6,114cc <_realloc_r+0x330>
   11490:	90800017 	ldw	r2,0(r18)
   11494:	89400204 	addi	r5,r17,8
   11498:	91000204 	addi	r4,r18,8
   1149c:	88800015 	stw	r2,0(r17)
   114a0:	90c00117 	ldw	r3,4(r18)
   114a4:	008006c4 	movi	r2,27
   114a8:	88c00115 	stw	r3,4(r17)
   114ac:	1180072e 	bgeu	r2,r6,114cc <_realloc_r+0x330>
   114b0:	90c00217 	ldw	r3,8(r18)
   114b4:	89400404 	addi	r5,r17,16
   114b8:	91000404 	addi	r4,r18,16
   114bc:	88c00215 	stw	r3,8(r17)
   114c0:	90800317 	ldw	r2,12(r18)
   114c4:	88800315 	stw	r2,12(r17)
   114c8:	31c09126 	beq	r6,r7,11710 <_realloc_r+0x574>
   114cc:	20800017 	ldw	r2,0(r4)
   114d0:	28800015 	stw	r2,0(r5)
   114d4:	20c00117 	ldw	r3,4(r4)
   114d8:	28c00115 	stw	r3,4(r5)
   114dc:	20800217 	ldw	r2,8(r4)
   114e0:	28800215 	stw	r2,8(r5)
   114e4:	900b883a 	mov	r5,r18
   114e8:	b009883a 	mov	r4,r22
   114ec:	0011f580 	call	11f58 <_free_r>
   114f0:	b009883a 	mov	r4,r22
   114f4:	00131e80 	call	131e8 <__malloc_unlock>
   114f8:	003f5e06 	br	11274 <_realloc_r+0xd8>
   114fc:	300b883a 	mov	r5,r6
   11500:	dfc00b17 	ldw	ra,44(sp)
   11504:	df000a17 	ldw	fp,40(sp)
   11508:	ddc00917 	ldw	r23,36(sp)
   1150c:	dd800817 	ldw	r22,32(sp)
   11510:	dd400717 	ldw	r21,28(sp)
   11514:	dd000617 	ldw	r20,24(sp)
   11518:	dcc00517 	ldw	r19,20(sp)
   1151c:	dc800417 	ldw	r18,16(sp)
   11520:	dc400317 	ldw	r17,12(sp)
   11524:	dc000217 	ldw	r16,8(sp)
   11528:	dec00c04 	addi	sp,sp,48
   1152c:	00107f81 	jmpi	107f8 <_malloc_r>
   11530:	38800117 	ldw	r2,4(r7)
   11534:	e54b883a 	add	r5,fp,r21
   11538:	31000054 	ori	r4,r6,1
   1153c:	1080004c 	andi	r2,r2,1
   11540:	1704b03a 	or	r2,r2,fp
   11544:	38800115 	stw	r2,4(r7)
   11548:	29000115 	stw	r4,4(r5)
   1154c:	2987883a 	add	r3,r5,r6
   11550:	18800117 	ldw	r2,4(r3)
   11554:	29400204 	addi	r5,r5,8
   11558:	b009883a 	mov	r4,r22
   1155c:	10800054 	ori	r2,r2,1
   11560:	18800115 	stw	r2,4(r3)
   11564:	0011f580 	call	11f58 <_free_r>
   11568:	003f3806 	br	1124c <_realloc_r+0xb0>
   1156c:	000d883a 	mov	r6,zero
   11570:	0009883a 	mov	r4,zero
   11574:	003f5d06 	br	112ec <_realloc_r+0x150>
   11578:	30c00217 	ldw	r3,8(r6)
   1157c:	30800317 	ldw	r2,12(r6)
   11580:	800f883a 	mov	r7,r16
   11584:	84000204 	addi	r16,r16,8
   11588:	10c00215 	stw	r3,8(r2)
   1158c:	18800315 	stw	r2,12(r3)
   11590:	003f2306 	br	11220 <_realloc_r+0x84>
   11594:	8809883a 	mov	r4,r17
   11598:	900b883a 	mov	r5,r18
   1159c:	00110bc0 	call	110bc <memmove>
   115a0:	003fd006 	br	114e4 <_realloc_r+0x348>
   115a4:	30800117 	ldw	r2,4(r6)
   115a8:	e0c00404 	addi	r3,fp,16
   115ac:	1108703a 	and	r4,r2,r4
   115b0:	9905883a 	add	r2,r19,r4
   115b4:	10ff4d16 	blt	r2,r3,112ec <_realloc_r+0x150>
   115b8:	1705c83a 	sub	r2,r2,fp
   115bc:	870b883a 	add	r5,r16,fp
   115c0:	10800054 	ori	r2,r2,1
   115c4:	28800115 	stw	r2,4(r5)
   115c8:	80c00117 	ldw	r3,4(r16)
   115cc:	00800074 	movhi	r2,1
   115d0:	10964304 	addi	r2,r2,22796
   115d4:	b009883a 	mov	r4,r22
   115d8:	18c0004c 	andi	r3,r3,1
   115dc:	e0c6b03a 	or	r3,fp,r3
   115e0:	11400215 	stw	r5,8(r2)
   115e4:	80c00115 	stw	r3,4(r16)
   115e8:	00131e80 	call	131e8 <__malloc_unlock>
   115ec:	84400204 	addi	r17,r16,8
   115f0:	003f2006 	br	11274 <_realloc_r+0xd8>
   115f4:	98a9883a 	add	r20,r19,r2
   115f8:	2509883a 	add	r4,r4,r20
   115fc:	e0800404 	addi	r2,fp,16
   11600:	d9000115 	stw	r4,4(sp)
   11604:	20bf7016 	blt	r4,r2,113c8 <_realloc_r+0x22c>
   11608:	b8c00317 	ldw	r3,12(r23)
   1160c:	b8800217 	ldw	r2,8(r23)
   11610:	99bfff04 	addi	r6,r19,-4
   11614:	01400904 	movi	r5,36
   11618:	18800215 	stw	r2,8(r3)
   1161c:	10c00315 	stw	r3,12(r2)
   11620:	bc400204 	addi	r17,r23,8
   11624:	29804136 	bltu	r5,r6,1172c <_realloc_r+0x590>
   11628:	008004c4 	movi	r2,19
   1162c:	9009883a 	mov	r4,r18
   11630:	880f883a 	mov	r7,r17
   11634:	11800f2e 	bgeu	r2,r6,11674 <_realloc_r+0x4d8>
   11638:	90800017 	ldw	r2,0(r18)
   1163c:	b9c00404 	addi	r7,r23,16
   11640:	91000204 	addi	r4,r18,8
   11644:	b8800215 	stw	r2,8(r23)
   11648:	90c00117 	ldw	r3,4(r18)
   1164c:	008006c4 	movi	r2,27
   11650:	b8c00315 	stw	r3,12(r23)
   11654:	1180072e 	bgeu	r2,r6,11674 <_realloc_r+0x4d8>
   11658:	90c00217 	ldw	r3,8(r18)
   1165c:	b9c00604 	addi	r7,r23,24
   11660:	91000404 	addi	r4,r18,16
   11664:	b8c00415 	stw	r3,16(r23)
   11668:	90800317 	ldw	r2,12(r18)
   1166c:	b8800515 	stw	r2,20(r23)
   11670:	31404026 	beq	r6,r5,11774 <_realloc_r+0x5d8>
   11674:	20800017 	ldw	r2,0(r4)
   11678:	38800015 	stw	r2,0(r7)
   1167c:	20c00117 	ldw	r3,4(r4)
   11680:	38c00115 	stw	r3,4(r7)
   11684:	20800217 	ldw	r2,8(r4)
   11688:	38800215 	stw	r2,8(r7)
   1168c:	d8c00117 	ldw	r3,4(sp)
   11690:	bf0b883a 	add	r5,r23,fp
   11694:	b009883a 	mov	r4,r22
   11698:	1f05c83a 	sub	r2,r3,fp
   1169c:	10800054 	ori	r2,r2,1
   116a0:	28800115 	stw	r2,4(r5)
   116a4:	b8c00117 	ldw	r3,4(r23)
   116a8:	00800074 	movhi	r2,1
   116ac:	10964304 	addi	r2,r2,22796
   116b0:	11400215 	stw	r5,8(r2)
   116b4:	18c0004c 	andi	r3,r3,1
   116b8:	e0c6b03a 	or	r3,fp,r3
   116bc:	b8c00115 	stw	r3,4(r23)
   116c0:	00131e80 	call	131e8 <__malloc_unlock>
   116c4:	003eeb06 	br	11274 <_realloc_r+0xd8>
   116c8:	20800117 	ldw	r2,4(r4)
   116cc:	00ffff04 	movi	r3,-4
   116d0:	800f883a 	mov	r7,r16
   116d4:	10c4703a 	and	r2,r2,r3
   116d8:	98a9883a 	add	r20,r19,r2
   116dc:	84000204 	addi	r16,r16,8
   116e0:	003ecf06 	br	11220 <_realloc_r+0x84>
   116e4:	900b883a 	mov	r5,r18
   116e8:	8009883a 	mov	r4,r16
   116ec:	00110bc0 	call	110bc <memmove>
   116f0:	dd000017 	ldw	r20,0(sp)
   116f4:	b80f883a 	mov	r7,r23
   116f8:	003ec906 	br	11220 <_realloc_r+0x84>
   116fc:	900b883a 	mov	r5,r18
   11700:	8009883a 	mov	r4,r16
   11704:	00110bc0 	call	110bc <memmove>
   11708:	b80f883a 	mov	r7,r23
   1170c:	003ec406 	br	11220 <_realloc_r+0x84>
   11710:	90c00417 	ldw	r3,16(r18)
   11714:	89400604 	addi	r5,r17,24
   11718:	91000604 	addi	r4,r18,24
   1171c:	88c00415 	stw	r3,16(r17)
   11720:	90800517 	ldw	r2,20(r18)
   11724:	88800515 	stw	r2,20(r17)
   11728:	003f6806 	br	114cc <_realloc_r+0x330>
   1172c:	900b883a 	mov	r5,r18
   11730:	8809883a 	mov	r4,r17
   11734:	00110bc0 	call	110bc <memmove>
   11738:	003fd406 	br	1168c <_realloc_r+0x4f0>
   1173c:	90c00417 	ldw	r3,16(r18)
   11740:	91000604 	addi	r4,r18,24
   11744:	ba000804 	addi	r8,r23,32
   11748:	b8c00615 	stw	r3,24(r23)
   1174c:	90800517 	ldw	r2,20(r18)
   11750:	b8800715 	stw	r2,28(r23)
   11754:	003f1206 	br	113a0 <_realloc_r+0x204>
   11758:	90c00417 	ldw	r3,16(r18)
   1175c:	91000604 	addi	r4,r18,24
   11760:	ba000804 	addi	r8,r23,32
   11764:	b8c00615 	stw	r3,24(r23)
   11768:	90800517 	ldw	r2,20(r18)
   1176c:	b8800715 	stw	r2,28(r23)
   11770:	003f3206 	br	1143c <_realloc_r+0x2a0>
   11774:	90c00417 	ldw	r3,16(r18)
   11778:	91000604 	addi	r4,r18,24
   1177c:	b9c00804 	addi	r7,r23,32
   11780:	b8c00615 	stw	r3,24(r23)
   11784:	90800517 	ldw	r2,20(r18)
   11788:	b8800715 	stw	r2,28(r23)
   1178c:	003fb906 	br	11674 <_realloc_r+0x4d8>

00011790 <_sbrk_r>:
   11790:	defffd04 	addi	sp,sp,-12
   11794:	dc000015 	stw	r16,0(sp)
   11798:	040000b4 	movhi	r16,2
   1179c:	84226a04 	addi	r16,r16,-30296
   117a0:	dc400115 	stw	r17,4(sp)
   117a4:	80000015 	stw	zero,0(r16)
   117a8:	2023883a 	mov	r17,r4
   117ac:	2809883a 	mov	r4,r5
   117b0:	dfc00215 	stw	ra,8(sp)
   117b4:	00133e80 	call	133e8 <sbrk>
   117b8:	1007883a 	mov	r3,r2
   117bc:	00bfffc4 	movi	r2,-1
   117c0:	18800626 	beq	r3,r2,117dc <_sbrk_r+0x4c>
   117c4:	1805883a 	mov	r2,r3
   117c8:	dfc00217 	ldw	ra,8(sp)
   117cc:	dc400117 	ldw	r17,4(sp)
   117d0:	dc000017 	ldw	r16,0(sp)
   117d4:	dec00304 	addi	sp,sp,12
   117d8:	f800283a 	ret
   117dc:	80800017 	ldw	r2,0(r16)
   117e0:	103ff826 	beq	r2,zero,117c4 <_sbrk_r+0x34>
   117e4:	88800015 	stw	r2,0(r17)
   117e8:	1805883a 	mov	r2,r3
   117ec:	dfc00217 	ldw	ra,8(sp)
   117f0:	dc400117 	ldw	r17,4(sp)
   117f4:	dc000017 	ldw	r16,0(sp)
   117f8:	dec00304 	addi	sp,sp,12
   117fc:	f800283a 	ret

00011800 <__swsetup_r>:
   11800:	00800074 	movhi	r2,1
   11804:	109bc704 	addi	r2,r2,28444
   11808:	10c00017 	ldw	r3,0(r2)
   1180c:	defffd04 	addi	sp,sp,-12
   11810:	dc400115 	stw	r17,4(sp)
   11814:	dc000015 	stw	r16,0(sp)
   11818:	dfc00215 	stw	ra,8(sp)
   1181c:	2023883a 	mov	r17,r4
   11820:	2821883a 	mov	r16,r5
   11824:	18000226 	beq	r3,zero,11830 <__swsetup_r+0x30>
   11828:	18800e17 	ldw	r2,56(r3)
   1182c:	10001f26 	beq	r2,zero,118ac <__swsetup_r+0xac>
   11830:	8100030b 	ldhu	r4,12(r16)
   11834:	2080020c 	andi	r2,r4,8
   11838:	10002826 	beq	r2,zero,118dc <__swsetup_r+0xdc>
   1183c:	81400417 	ldw	r5,16(r16)
   11840:	28001d26 	beq	r5,zero,118b8 <__swsetup_r+0xb8>
   11844:	2080004c 	andi	r2,r4,1
   11848:	1005003a 	cmpeq	r2,r2,zero
   1184c:	10000b26 	beq	r2,zero,1187c <__swsetup_r+0x7c>
   11850:	2080008c 	andi	r2,r4,2
   11854:	10001226 	beq	r2,zero,118a0 <__swsetup_r+0xa0>
   11858:	0005883a 	mov	r2,zero
   1185c:	80800215 	stw	r2,8(r16)
   11860:	28000b26 	beq	r5,zero,11890 <__swsetup_r+0x90>
   11864:	0005883a 	mov	r2,zero
   11868:	dfc00217 	ldw	ra,8(sp)
   1186c:	dc400117 	ldw	r17,4(sp)
   11870:	dc000017 	ldw	r16,0(sp)
   11874:	dec00304 	addi	sp,sp,12
   11878:	f800283a 	ret
   1187c:	80800517 	ldw	r2,20(r16)
   11880:	80000215 	stw	zero,8(r16)
   11884:	0085c83a 	sub	r2,zero,r2
   11888:	80800615 	stw	r2,24(r16)
   1188c:	283ff51e 	bne	r5,zero,11864 <__swsetup_r+0x64>
   11890:	2080200c 	andi	r2,r4,128
   11894:	103ff326 	beq	r2,zero,11864 <__swsetup_r+0x64>
   11898:	00bfffc4 	movi	r2,-1
   1189c:	003ff206 	br	11868 <__swsetup_r+0x68>
   118a0:	80800517 	ldw	r2,20(r16)
   118a4:	80800215 	stw	r2,8(r16)
   118a8:	003fed06 	br	11860 <__swsetup_r+0x60>
   118ac:	1809883a 	mov	r4,r3
   118b0:	0011bd40 	call	11bd4 <__sinit>
   118b4:	003fde06 	br	11830 <__swsetup_r+0x30>
   118b8:	20c0a00c 	andi	r3,r4,640
   118bc:	00808004 	movi	r2,512
   118c0:	18bfe026 	beq	r3,r2,11844 <__swsetup_r+0x44>
   118c4:	8809883a 	mov	r4,r17
   118c8:	800b883a 	mov	r5,r16
   118cc:	00123ec0 	call	123ec <__smakebuf_r>
   118d0:	8100030b 	ldhu	r4,12(r16)
   118d4:	81400417 	ldw	r5,16(r16)
   118d8:	003fda06 	br	11844 <__swsetup_r+0x44>
   118dc:	2080040c 	andi	r2,r4,16
   118e0:	103fed26 	beq	r2,zero,11898 <__swsetup_r+0x98>
   118e4:	2080010c 	andi	r2,r4,4
   118e8:	10001226 	beq	r2,zero,11934 <__swsetup_r+0x134>
   118ec:	81400c17 	ldw	r5,48(r16)
   118f0:	28000526 	beq	r5,zero,11908 <__swsetup_r+0x108>
   118f4:	80801004 	addi	r2,r16,64
   118f8:	28800226 	beq	r5,r2,11904 <__swsetup_r+0x104>
   118fc:	8809883a 	mov	r4,r17
   11900:	0011f580 	call	11f58 <_free_r>
   11904:	80000c15 	stw	zero,48(r16)
   11908:	8080030b 	ldhu	r2,12(r16)
   1190c:	81400417 	ldw	r5,16(r16)
   11910:	80000115 	stw	zero,4(r16)
   11914:	10bff6cc 	andi	r2,r2,65499
   11918:	8080030d 	sth	r2,12(r16)
   1191c:	81400015 	stw	r5,0(r16)
   11920:	8080030b 	ldhu	r2,12(r16)
   11924:	10800214 	ori	r2,r2,8
   11928:	113fffcc 	andi	r4,r2,65535
   1192c:	8080030d 	sth	r2,12(r16)
   11930:	003fc306 	br	11840 <__swsetup_r+0x40>
   11934:	81400417 	ldw	r5,16(r16)
   11938:	003ff906 	br	11920 <__swsetup_r+0x120>

0001193c <_fflush_r>:
   1193c:	defffb04 	addi	sp,sp,-20
   11940:	dcc00315 	stw	r19,12(sp)
   11944:	dc800215 	stw	r18,8(sp)
   11948:	dfc00415 	stw	ra,16(sp)
   1194c:	dc400115 	stw	r17,4(sp)
   11950:	dc000015 	stw	r16,0(sp)
   11954:	2027883a 	mov	r19,r4
   11958:	2825883a 	mov	r18,r5
   1195c:	20000226 	beq	r4,zero,11968 <_fflush_r+0x2c>
   11960:	20800e17 	ldw	r2,56(r4)
   11964:	10005626 	beq	r2,zero,11ac0 <_fflush_r+0x184>
   11968:	9100030b 	ldhu	r4,12(r18)
   1196c:	20ffffcc 	andi	r3,r4,65535
   11970:	18e0001c 	xori	r3,r3,32768
   11974:	18e00004 	addi	r3,r3,-32768
   11978:	1880020c 	andi	r2,r3,8
   1197c:	1000261e 	bne	r2,zero,11a18 <_fflush_r+0xdc>
   11980:	90c00117 	ldw	r3,4(r18)
   11984:	20820014 	ori	r2,r4,2048
   11988:	9080030d 	sth	r2,12(r18)
   1198c:	1009883a 	mov	r4,r2
   11990:	00c0400e 	bge	zero,r3,11a94 <_fflush_r+0x158>
   11994:	92000a17 	ldw	r8,40(r18)
   11998:	40004026 	beq	r8,zero,11a9c <_fflush_r+0x160>
   1199c:	2084000c 	andi	r2,r4,4096
   119a0:	10005326 	beq	r2,zero,11af0 <_fflush_r+0x1b4>
   119a4:	94001417 	ldw	r16,80(r18)
   119a8:	9080030b 	ldhu	r2,12(r18)
   119ac:	1080010c 	andi	r2,r2,4
   119b0:	1000481e 	bne	r2,zero,11ad4 <_fflush_r+0x198>
   119b4:	91400717 	ldw	r5,28(r18)
   119b8:	9809883a 	mov	r4,r19
   119bc:	800d883a 	mov	r6,r16
   119c0:	000f883a 	mov	r7,zero
   119c4:	403ee83a 	callr	r8
   119c8:	8080261e 	bne	r16,r2,11a64 <_fflush_r+0x128>
   119cc:	9080030b 	ldhu	r2,12(r18)
   119d0:	91000417 	ldw	r4,16(r18)
   119d4:	90000115 	stw	zero,4(r18)
   119d8:	10bdffcc 	andi	r2,r2,63487
   119dc:	10ffffcc 	andi	r3,r2,65535
   119e0:	18c4000c 	andi	r3,r3,4096
   119e4:	9080030d 	sth	r2,12(r18)
   119e8:	91000015 	stw	r4,0(r18)
   119ec:	18002b26 	beq	r3,zero,11a9c <_fflush_r+0x160>
   119f0:	0007883a 	mov	r3,zero
   119f4:	1805883a 	mov	r2,r3
   119f8:	94001415 	stw	r16,80(r18)
   119fc:	dfc00417 	ldw	ra,16(sp)
   11a00:	dcc00317 	ldw	r19,12(sp)
   11a04:	dc800217 	ldw	r18,8(sp)
   11a08:	dc400117 	ldw	r17,4(sp)
   11a0c:	dc000017 	ldw	r16,0(sp)
   11a10:	dec00504 	addi	sp,sp,20
   11a14:	f800283a 	ret
   11a18:	94400417 	ldw	r17,16(r18)
   11a1c:	88001f26 	beq	r17,zero,11a9c <_fflush_r+0x160>
   11a20:	90800017 	ldw	r2,0(r18)
   11a24:	18c000cc 	andi	r3,r3,3
   11a28:	94400015 	stw	r17,0(r18)
   11a2c:	1461c83a 	sub	r16,r2,r17
   11a30:	18002526 	beq	r3,zero,11ac8 <_fflush_r+0x18c>
   11a34:	0005883a 	mov	r2,zero
   11a38:	90800215 	stw	r2,8(r18)
   11a3c:	0400170e 	bge	zero,r16,11a9c <_fflush_r+0x160>
   11a40:	90c00917 	ldw	r3,36(r18)
   11a44:	91400717 	ldw	r5,28(r18)
   11a48:	880d883a 	mov	r6,r17
   11a4c:	800f883a 	mov	r7,r16
   11a50:	9809883a 	mov	r4,r19
   11a54:	183ee83a 	callr	r3
   11a58:	88a3883a 	add	r17,r17,r2
   11a5c:	80a1c83a 	sub	r16,r16,r2
   11a60:	00bff616 	blt	zero,r2,11a3c <_fflush_r+0x100>
   11a64:	9080030b 	ldhu	r2,12(r18)
   11a68:	00ffffc4 	movi	r3,-1
   11a6c:	10801014 	ori	r2,r2,64
   11a70:	9080030d 	sth	r2,12(r18)
   11a74:	1805883a 	mov	r2,r3
   11a78:	dfc00417 	ldw	ra,16(sp)
   11a7c:	dcc00317 	ldw	r19,12(sp)
   11a80:	dc800217 	ldw	r18,8(sp)
   11a84:	dc400117 	ldw	r17,4(sp)
   11a88:	dc000017 	ldw	r16,0(sp)
   11a8c:	dec00504 	addi	sp,sp,20
   11a90:	f800283a 	ret
   11a94:	90800f17 	ldw	r2,60(r18)
   11a98:	00bfbe16 	blt	zero,r2,11994 <_fflush_r+0x58>
   11a9c:	0007883a 	mov	r3,zero
   11aa0:	1805883a 	mov	r2,r3
   11aa4:	dfc00417 	ldw	ra,16(sp)
   11aa8:	dcc00317 	ldw	r19,12(sp)
   11aac:	dc800217 	ldw	r18,8(sp)
   11ab0:	dc400117 	ldw	r17,4(sp)
   11ab4:	dc000017 	ldw	r16,0(sp)
   11ab8:	dec00504 	addi	sp,sp,20
   11abc:	f800283a 	ret
   11ac0:	0011bd40 	call	11bd4 <__sinit>
   11ac4:	003fa806 	br	11968 <_fflush_r+0x2c>
   11ac8:	90800517 	ldw	r2,20(r18)
   11acc:	90800215 	stw	r2,8(r18)
   11ad0:	003fda06 	br	11a3c <_fflush_r+0x100>
   11ad4:	90800117 	ldw	r2,4(r18)
   11ad8:	90c00c17 	ldw	r3,48(r18)
   11adc:	80a1c83a 	sub	r16,r16,r2
   11ae0:	183fb426 	beq	r3,zero,119b4 <_fflush_r+0x78>
   11ae4:	90800f17 	ldw	r2,60(r18)
   11ae8:	80a1c83a 	sub	r16,r16,r2
   11aec:	003fb106 	br	119b4 <_fflush_r+0x78>
   11af0:	91400717 	ldw	r5,28(r18)
   11af4:	9809883a 	mov	r4,r19
   11af8:	000d883a 	mov	r6,zero
   11afc:	01c00044 	movi	r7,1
   11b00:	403ee83a 	callr	r8
   11b04:	1021883a 	mov	r16,r2
   11b08:	00bfffc4 	movi	r2,-1
   11b0c:	80800226 	beq	r16,r2,11b18 <_fflush_r+0x1dc>
   11b10:	92000a17 	ldw	r8,40(r18)
   11b14:	003fa406 	br	119a8 <_fflush_r+0x6c>
   11b18:	98c00017 	ldw	r3,0(r19)
   11b1c:	00800744 	movi	r2,29
   11b20:	18bfde26 	beq	r3,r2,11a9c <_fflush_r+0x160>
   11b24:	9080030b 	ldhu	r2,12(r18)
   11b28:	8007883a 	mov	r3,r16
   11b2c:	10801014 	ori	r2,r2,64
   11b30:	9080030d 	sth	r2,12(r18)
   11b34:	003fcf06 	br	11a74 <_fflush_r+0x138>

00011b38 <fflush>:
   11b38:	01400074 	movhi	r5,1
   11b3c:	29464f04 	addi	r5,r5,6460
   11b40:	2007883a 	mov	r3,r4
   11b44:	20000526 	beq	r4,zero,11b5c <fflush+0x24>
   11b48:	00800074 	movhi	r2,1
   11b4c:	109bc704 	addi	r2,r2,28444
   11b50:	11000017 	ldw	r4,0(r2)
   11b54:	180b883a 	mov	r5,r3
   11b58:	001193c1 	jmpi	1193c <_fflush_r>
   11b5c:	00800074 	movhi	r2,1
   11b60:	109bc804 	addi	r2,r2,28448
   11b64:	11000017 	ldw	r4,0(r2)
   11b68:	001226c1 	jmpi	1226c <_fwalk_reent>

00011b6c <std>:
   11b6c:	00800074 	movhi	r2,1
   11b70:	10898604 	addi	r2,r2,9752
   11b74:	20800b15 	stw	r2,44(r4)
   11b78:	00800074 	movhi	r2,1
   11b7c:	1089c104 	addi	r2,r2,9988
   11b80:	20800815 	stw	r2,32(r4)
   11b84:	00c00074 	movhi	r3,1
   11b88:	18c9a204 	addi	r3,r3,9864
   11b8c:	00800074 	movhi	r2,1
   11b90:	10898804 	addi	r2,r2,9760
   11b94:	2140030d 	sth	r5,12(r4)
   11b98:	2180038d 	sth	r6,14(r4)
   11b9c:	20c00915 	stw	r3,36(r4)
   11ba0:	20800a15 	stw	r2,40(r4)
   11ba4:	20000015 	stw	zero,0(r4)
   11ba8:	20000115 	stw	zero,4(r4)
   11bac:	20000215 	stw	zero,8(r4)
   11bb0:	20000415 	stw	zero,16(r4)
   11bb4:	20000515 	stw	zero,20(r4)
   11bb8:	20000615 	stw	zero,24(r4)
   11bbc:	21000715 	stw	r4,28(r4)
   11bc0:	f800283a 	ret

00011bc4 <__sfp_lock_acquire>:
   11bc4:	f800283a 	ret

00011bc8 <__sfp_lock_release>:
   11bc8:	f800283a 	ret

00011bcc <__sinit_lock_acquire>:
   11bcc:	f800283a 	ret

00011bd0 <__sinit_lock_release>:
   11bd0:	f800283a 	ret

00011bd4 <__sinit>:
   11bd4:	20800e17 	ldw	r2,56(r4)
   11bd8:	defffd04 	addi	sp,sp,-12
   11bdc:	dc400115 	stw	r17,4(sp)
   11be0:	dc000015 	stw	r16,0(sp)
   11be4:	dfc00215 	stw	ra,8(sp)
   11be8:	04400044 	movi	r17,1
   11bec:	01400104 	movi	r5,4
   11bf0:	000d883a 	mov	r6,zero
   11bf4:	2021883a 	mov	r16,r4
   11bf8:	2200bb04 	addi	r8,r4,748
   11bfc:	200f883a 	mov	r7,r4
   11c00:	10000526 	beq	r2,zero,11c18 <__sinit+0x44>
   11c04:	dfc00217 	ldw	ra,8(sp)
   11c08:	dc400117 	ldw	r17,4(sp)
   11c0c:	dc000017 	ldw	r16,0(sp)
   11c10:	dec00304 	addi	sp,sp,12
   11c14:	f800283a 	ret
   11c18:	21000117 	ldw	r4,4(r4)
   11c1c:	00800074 	movhi	r2,1
   11c20:	10872e04 	addi	r2,r2,7352
   11c24:	00c000c4 	movi	r3,3
   11c28:	80800f15 	stw	r2,60(r16)
   11c2c:	80c0b915 	stw	r3,740(r16)
   11c30:	8200ba15 	stw	r8,744(r16)
   11c34:	84400e15 	stw	r17,56(r16)
   11c38:	8000b815 	stw	zero,736(r16)
   11c3c:	0011b6c0 	call	11b6c <std>
   11c40:	81000217 	ldw	r4,8(r16)
   11c44:	880d883a 	mov	r6,r17
   11c48:	800f883a 	mov	r7,r16
   11c4c:	01400284 	movi	r5,10
   11c50:	0011b6c0 	call	11b6c <std>
   11c54:	81000317 	ldw	r4,12(r16)
   11c58:	800f883a 	mov	r7,r16
   11c5c:	01400484 	movi	r5,18
   11c60:	01800084 	movi	r6,2
   11c64:	dfc00217 	ldw	ra,8(sp)
   11c68:	dc400117 	ldw	r17,4(sp)
   11c6c:	dc000017 	ldw	r16,0(sp)
   11c70:	dec00304 	addi	sp,sp,12
   11c74:	0011b6c1 	jmpi	11b6c <std>

00011c78 <__fp_lock>:
   11c78:	0005883a 	mov	r2,zero
   11c7c:	f800283a 	ret

00011c80 <__fp_unlock>:
   11c80:	0005883a 	mov	r2,zero
   11c84:	f800283a 	ret

00011c88 <__fp_unlock_all>:
   11c88:	00800074 	movhi	r2,1
   11c8c:	109bc704 	addi	r2,r2,28444
   11c90:	11000017 	ldw	r4,0(r2)
   11c94:	01400074 	movhi	r5,1
   11c98:	29472004 	addi	r5,r5,7296
   11c9c:	00123341 	jmpi	12334 <_fwalk>

00011ca0 <__fp_lock_all>:
   11ca0:	00800074 	movhi	r2,1
   11ca4:	109bc704 	addi	r2,r2,28444
   11ca8:	11000017 	ldw	r4,0(r2)
   11cac:	01400074 	movhi	r5,1
   11cb0:	29471e04 	addi	r5,r5,7288
   11cb4:	00123341 	jmpi	12334 <_fwalk>

00011cb8 <_cleanup_r>:
   11cb8:	01400074 	movhi	r5,1
   11cbc:	294a5704 	addi	r5,r5,10588
   11cc0:	00123341 	jmpi	12334 <_fwalk>

00011cc4 <_cleanup>:
   11cc4:	00800074 	movhi	r2,1
   11cc8:	109bc804 	addi	r2,r2,28448
   11ccc:	11000017 	ldw	r4,0(r2)
   11cd0:	0011cb81 	jmpi	11cb8 <_cleanup_r>

00011cd4 <__sfmoreglue>:
   11cd4:	defffc04 	addi	sp,sp,-16
   11cd8:	dc400115 	stw	r17,4(sp)
   11cdc:	2c401724 	muli	r17,r5,92
   11ce0:	dc800215 	stw	r18,8(sp)
   11ce4:	2825883a 	mov	r18,r5
   11ce8:	89400304 	addi	r5,r17,12
   11cec:	dc000015 	stw	r16,0(sp)
   11cf0:	dfc00315 	stw	ra,12(sp)
   11cf4:	00107f80 	call	107f8 <_malloc_r>
   11cf8:	0021883a 	mov	r16,zero
   11cfc:	880d883a 	mov	r6,r17
   11d00:	000b883a 	mov	r5,zero
   11d04:	10000626 	beq	r2,zero,11d20 <__sfmoreglue+0x4c>
   11d08:	11000304 	addi	r4,r2,12
   11d0c:	14800115 	stw	r18,4(r2)
   11d10:	10000015 	stw	zero,0(r2)
   11d14:	11000215 	stw	r4,8(r2)
   11d18:	1021883a 	mov	r16,r2
   11d1c:	00125800 	call	12580 <memset>
   11d20:	8005883a 	mov	r2,r16
   11d24:	dfc00317 	ldw	ra,12(sp)
   11d28:	dc800217 	ldw	r18,8(sp)
   11d2c:	dc400117 	ldw	r17,4(sp)
   11d30:	dc000017 	ldw	r16,0(sp)
   11d34:	dec00404 	addi	sp,sp,16
   11d38:	f800283a 	ret

00011d3c <__sfp>:
   11d3c:	defffd04 	addi	sp,sp,-12
   11d40:	00800074 	movhi	r2,1
   11d44:	109bc804 	addi	r2,r2,28448
   11d48:	dc000015 	stw	r16,0(sp)
   11d4c:	14000017 	ldw	r16,0(r2)
   11d50:	dc400115 	stw	r17,4(sp)
   11d54:	dfc00215 	stw	ra,8(sp)
   11d58:	80800e17 	ldw	r2,56(r16)
   11d5c:	2023883a 	mov	r17,r4
   11d60:	10002626 	beq	r2,zero,11dfc <__sfp+0xc0>
   11d64:	8400b804 	addi	r16,r16,736
   11d68:	80800117 	ldw	r2,4(r16)
   11d6c:	81000217 	ldw	r4,8(r16)
   11d70:	10ffffc4 	addi	r3,r2,-1
   11d74:	18000916 	blt	r3,zero,11d9c <__sfp+0x60>
   11d78:	2080030f 	ldh	r2,12(r4)
   11d7c:	10000b26 	beq	r2,zero,11dac <__sfp+0x70>
   11d80:	017fffc4 	movi	r5,-1
   11d84:	00000206 	br	11d90 <__sfp+0x54>
   11d88:	2080030f 	ldh	r2,12(r4)
   11d8c:	10000726 	beq	r2,zero,11dac <__sfp+0x70>
   11d90:	18ffffc4 	addi	r3,r3,-1
   11d94:	21001704 	addi	r4,r4,92
   11d98:	197ffb1e 	bne	r3,r5,11d88 <__sfp+0x4c>
   11d9c:	80800017 	ldw	r2,0(r16)
   11da0:	10001926 	beq	r2,zero,11e08 <__sfp+0xcc>
   11da4:	1021883a 	mov	r16,r2
   11da8:	003fef06 	br	11d68 <__sfp+0x2c>
   11dac:	00bfffc4 	movi	r2,-1
   11db0:	00c00044 	movi	r3,1
   11db4:	2080038d 	sth	r2,14(r4)
   11db8:	20c0030d 	sth	r3,12(r4)
   11dbc:	20000015 	stw	zero,0(r4)
   11dc0:	20000215 	stw	zero,8(r4)
   11dc4:	20000115 	stw	zero,4(r4)
   11dc8:	20000415 	stw	zero,16(r4)
   11dcc:	20000515 	stw	zero,20(r4)
   11dd0:	20000615 	stw	zero,24(r4)
   11dd4:	20000c15 	stw	zero,48(r4)
   11dd8:	20000d15 	stw	zero,52(r4)
   11ddc:	20001115 	stw	zero,68(r4)
   11de0:	20001215 	stw	zero,72(r4)
   11de4:	2005883a 	mov	r2,r4
   11de8:	dfc00217 	ldw	ra,8(sp)
   11dec:	dc400117 	ldw	r17,4(sp)
   11df0:	dc000017 	ldw	r16,0(sp)
   11df4:	dec00304 	addi	sp,sp,12
   11df8:	f800283a 	ret
   11dfc:	8009883a 	mov	r4,r16
   11e00:	0011bd40 	call	11bd4 <__sinit>
   11e04:	003fd706 	br	11d64 <__sfp+0x28>
   11e08:	8809883a 	mov	r4,r17
   11e0c:	01400104 	movi	r5,4
   11e10:	0011cd40 	call	11cd4 <__sfmoreglue>
   11e14:	80800015 	stw	r2,0(r16)
   11e18:	103fe21e 	bne	r2,zero,11da4 <__sfp+0x68>
   11e1c:	00800304 	movi	r2,12
   11e20:	0009883a 	mov	r4,zero
   11e24:	88800015 	stw	r2,0(r17)
   11e28:	003fee06 	br	11de4 <__sfp+0xa8>

00011e2c <_malloc_trim_r>:
   11e2c:	defffb04 	addi	sp,sp,-20
   11e30:	dcc00315 	stw	r19,12(sp)
   11e34:	04c00074 	movhi	r19,1
   11e38:	9cd64304 	addi	r19,r19,22796
   11e3c:	dc800215 	stw	r18,8(sp)
   11e40:	dc400115 	stw	r17,4(sp)
   11e44:	dc000015 	stw	r16,0(sp)
   11e48:	2823883a 	mov	r17,r5
   11e4c:	2025883a 	mov	r18,r4
   11e50:	dfc00415 	stw	ra,16(sp)
   11e54:	00131c80 	call	131c8 <__malloc_lock>
   11e58:	98800217 	ldw	r2,8(r19)
   11e5c:	9009883a 	mov	r4,r18
   11e60:	000b883a 	mov	r5,zero
   11e64:	10c00117 	ldw	r3,4(r2)
   11e68:	00bfff04 	movi	r2,-4
   11e6c:	18a0703a 	and	r16,r3,r2
   11e70:	8463c83a 	sub	r17,r16,r17
   11e74:	8c43fbc4 	addi	r17,r17,4079
   11e78:	8822d33a 	srli	r17,r17,12
   11e7c:	0083ffc4 	movi	r2,4095
   11e80:	8c7fffc4 	addi	r17,r17,-1
   11e84:	8822933a 	slli	r17,r17,12
   11e88:	1440060e 	bge	r2,r17,11ea4 <_malloc_trim_r+0x78>
   11e8c:	00117900 	call	11790 <_sbrk_r>
   11e90:	98c00217 	ldw	r3,8(r19)
   11e94:	9009883a 	mov	r4,r18
   11e98:	044bc83a 	sub	r5,zero,r17
   11e9c:	80c7883a 	add	r3,r16,r3
   11ea0:	10c00926 	beq	r2,r3,11ec8 <_malloc_trim_r+0x9c>
   11ea4:	00131e80 	call	131e8 <__malloc_unlock>
   11ea8:	0005883a 	mov	r2,zero
   11eac:	dfc00417 	ldw	ra,16(sp)
   11eb0:	dcc00317 	ldw	r19,12(sp)
   11eb4:	dc800217 	ldw	r18,8(sp)
   11eb8:	dc400117 	ldw	r17,4(sp)
   11ebc:	dc000017 	ldw	r16,0(sp)
   11ec0:	dec00504 	addi	sp,sp,20
   11ec4:	f800283a 	ret
   11ec8:	9009883a 	mov	r4,r18
   11ecc:	00117900 	call	11790 <_sbrk_r>
   11ed0:	844dc83a 	sub	r6,r16,r17
   11ed4:	00ffffc4 	movi	r3,-1
   11ed8:	9009883a 	mov	r4,r18
   11edc:	000b883a 	mov	r5,zero
   11ee0:	01c000b4 	movhi	r7,2
   11ee4:	39e27104 	addi	r7,r7,-30268
   11ee8:	31800054 	ori	r6,r6,1
   11eec:	10c00926 	beq	r2,r3,11f14 <_malloc_trim_r+0xe8>
   11ef0:	38800017 	ldw	r2,0(r7)
   11ef4:	98c00217 	ldw	r3,8(r19)
   11ef8:	9009883a 	mov	r4,r18
   11efc:	1445c83a 	sub	r2,r2,r17
   11f00:	38800015 	stw	r2,0(r7)
   11f04:	19800115 	stw	r6,4(r3)
   11f08:	00131e80 	call	131e8 <__malloc_unlock>
   11f0c:	00800044 	movi	r2,1
   11f10:	003fe606 	br	11eac <_malloc_trim_r+0x80>
   11f14:	00117900 	call	11790 <_sbrk_r>
   11f18:	99800217 	ldw	r6,8(r19)
   11f1c:	100f883a 	mov	r7,r2
   11f20:	9009883a 	mov	r4,r18
   11f24:	1187c83a 	sub	r3,r2,r6
   11f28:	008003c4 	movi	r2,15
   11f2c:	19400054 	ori	r5,r3,1
   11f30:	10ffdc0e 	bge	r2,r3,11ea4 <_malloc_trim_r+0x78>
   11f34:	00800074 	movhi	r2,1
   11f38:	109bca04 	addi	r2,r2,28456
   11f3c:	10c00017 	ldw	r3,0(r2)
   11f40:	008000b4 	movhi	r2,2
   11f44:	10a27104 	addi	r2,r2,-30268
   11f48:	31400115 	stw	r5,4(r6)
   11f4c:	38c7c83a 	sub	r3,r7,r3
   11f50:	10c00015 	stw	r3,0(r2)
   11f54:	003fd306 	br	11ea4 <_malloc_trim_r+0x78>

00011f58 <_free_r>:
   11f58:	defffd04 	addi	sp,sp,-12
   11f5c:	dc400115 	stw	r17,4(sp)
   11f60:	dc000015 	stw	r16,0(sp)
   11f64:	dfc00215 	stw	ra,8(sp)
   11f68:	2821883a 	mov	r16,r5
   11f6c:	2023883a 	mov	r17,r4
   11f70:	28005a26 	beq	r5,zero,120dc <_free_r+0x184>
   11f74:	00131c80 	call	131c8 <__malloc_lock>
   11f78:	823ffe04 	addi	r8,r16,-8
   11f7c:	41400117 	ldw	r5,4(r8)
   11f80:	00bfff84 	movi	r2,-2
   11f84:	02800074 	movhi	r10,1
   11f88:	52964304 	addi	r10,r10,22796
   11f8c:	288e703a 	and	r7,r5,r2
   11f90:	41cd883a 	add	r6,r8,r7
   11f94:	30c00117 	ldw	r3,4(r6)
   11f98:	51000217 	ldw	r4,8(r10)
   11f9c:	00bfff04 	movi	r2,-4
   11fa0:	1892703a 	and	r9,r3,r2
   11fa4:	5017883a 	mov	r11,r10
   11fa8:	31006726 	beq	r6,r4,12148 <_free_r+0x1f0>
   11fac:	2880004c 	andi	r2,r5,1
   11fb0:	1005003a 	cmpeq	r2,r2,zero
   11fb4:	32400115 	stw	r9,4(r6)
   11fb8:	10001a1e 	bne	r2,zero,12024 <_free_r+0xcc>
   11fbc:	000b883a 	mov	r5,zero
   11fc0:	3247883a 	add	r3,r6,r9
   11fc4:	18800117 	ldw	r2,4(r3)
   11fc8:	1080004c 	andi	r2,r2,1
   11fcc:	1000231e 	bne	r2,zero,1205c <_free_r+0x104>
   11fd0:	280ac03a 	cmpne	r5,r5,zero
   11fd4:	3a4f883a 	add	r7,r7,r9
   11fd8:	2800451e 	bne	r5,zero,120f0 <_free_r+0x198>
   11fdc:	31000217 	ldw	r4,8(r6)
   11fe0:	00800074 	movhi	r2,1
   11fe4:	10964504 	addi	r2,r2,22804
   11fe8:	20807b26 	beq	r4,r2,121d8 <_free_r+0x280>
   11fec:	30800317 	ldw	r2,12(r6)
   11ff0:	3a07883a 	add	r3,r7,r8
   11ff4:	19c00015 	stw	r7,0(r3)
   11ff8:	11000215 	stw	r4,8(r2)
   11ffc:	20800315 	stw	r2,12(r4)
   12000:	38800054 	ori	r2,r7,1
   12004:	40800115 	stw	r2,4(r8)
   12008:	28001a26 	beq	r5,zero,12074 <_free_r+0x11c>
   1200c:	8809883a 	mov	r4,r17
   12010:	dfc00217 	ldw	ra,8(sp)
   12014:	dc400117 	ldw	r17,4(sp)
   12018:	dc000017 	ldw	r16,0(sp)
   1201c:	dec00304 	addi	sp,sp,12
   12020:	00131e81 	jmpi	131e8 <__malloc_unlock>
   12024:	80bffe17 	ldw	r2,-8(r16)
   12028:	50c00204 	addi	r3,r10,8
   1202c:	4091c83a 	sub	r8,r8,r2
   12030:	41000217 	ldw	r4,8(r8)
   12034:	388f883a 	add	r7,r7,r2
   12038:	20c06126 	beq	r4,r3,121c0 <_free_r+0x268>
   1203c:	40800317 	ldw	r2,12(r8)
   12040:	3247883a 	add	r3,r6,r9
   12044:	000b883a 	mov	r5,zero
   12048:	11000215 	stw	r4,8(r2)
   1204c:	20800315 	stw	r2,12(r4)
   12050:	18800117 	ldw	r2,4(r3)
   12054:	1080004c 	andi	r2,r2,1
   12058:	103fdd26 	beq	r2,zero,11fd0 <_free_r+0x78>
   1205c:	38800054 	ori	r2,r7,1
   12060:	3a07883a 	add	r3,r7,r8
   12064:	280ac03a 	cmpne	r5,r5,zero
   12068:	40800115 	stw	r2,4(r8)
   1206c:	19c00015 	stw	r7,0(r3)
   12070:	283fe61e 	bne	r5,zero,1200c <_free_r+0xb4>
   12074:	00807fc4 	movi	r2,511
   12078:	11c01f2e 	bgeu	r2,r7,120f8 <_free_r+0x1a0>
   1207c:	3806d27a 	srli	r3,r7,9
   12080:	1800481e 	bne	r3,zero,121a4 <_free_r+0x24c>
   12084:	3804d0fa 	srli	r2,r7,3
   12088:	100690fa 	slli	r3,r2,3
   1208c:	1acd883a 	add	r6,r3,r11
   12090:	31400217 	ldw	r5,8(r6)
   12094:	31405926 	beq	r6,r5,121fc <_free_r+0x2a4>
   12098:	28800117 	ldw	r2,4(r5)
   1209c:	00ffff04 	movi	r3,-4
   120a0:	10c4703a 	and	r2,r2,r3
   120a4:	3880022e 	bgeu	r7,r2,120b0 <_free_r+0x158>
   120a8:	29400217 	ldw	r5,8(r5)
   120ac:	317ffa1e 	bne	r6,r5,12098 <_free_r+0x140>
   120b0:	29800317 	ldw	r6,12(r5)
   120b4:	41800315 	stw	r6,12(r8)
   120b8:	41400215 	stw	r5,8(r8)
   120bc:	8809883a 	mov	r4,r17
   120c0:	2a000315 	stw	r8,12(r5)
   120c4:	32000215 	stw	r8,8(r6)
   120c8:	dfc00217 	ldw	ra,8(sp)
   120cc:	dc400117 	ldw	r17,4(sp)
   120d0:	dc000017 	ldw	r16,0(sp)
   120d4:	dec00304 	addi	sp,sp,12
   120d8:	00131e81 	jmpi	131e8 <__malloc_unlock>
   120dc:	dfc00217 	ldw	ra,8(sp)
   120e0:	dc400117 	ldw	r17,4(sp)
   120e4:	dc000017 	ldw	r16,0(sp)
   120e8:	dec00304 	addi	sp,sp,12
   120ec:	f800283a 	ret
   120f0:	31000217 	ldw	r4,8(r6)
   120f4:	003fbd06 	br	11fec <_free_r+0x94>
   120f8:	3806d0fa 	srli	r3,r7,3
   120fc:	00800044 	movi	r2,1
   12100:	51400117 	ldw	r5,4(r10)
   12104:	180890fa 	slli	r4,r3,3
   12108:	1807d0ba 	srai	r3,r3,2
   1210c:	22c9883a 	add	r4,r4,r11
   12110:	21800217 	ldw	r6,8(r4)
   12114:	10c4983a 	sll	r2,r2,r3
   12118:	41000315 	stw	r4,12(r8)
   1211c:	41800215 	stw	r6,8(r8)
   12120:	288ab03a 	or	r5,r5,r2
   12124:	22000215 	stw	r8,8(r4)
   12128:	8809883a 	mov	r4,r17
   1212c:	51400115 	stw	r5,4(r10)
   12130:	32000315 	stw	r8,12(r6)
   12134:	dfc00217 	ldw	ra,8(sp)
   12138:	dc400117 	ldw	r17,4(sp)
   1213c:	dc000017 	ldw	r16,0(sp)
   12140:	dec00304 	addi	sp,sp,12
   12144:	00131e81 	jmpi	131e8 <__malloc_unlock>
   12148:	2880004c 	andi	r2,r5,1
   1214c:	3a4d883a 	add	r6,r7,r9
   12150:	1000071e 	bne	r2,zero,12170 <_free_r+0x218>
   12154:	80bffe17 	ldw	r2,-8(r16)
   12158:	4091c83a 	sub	r8,r8,r2
   1215c:	41000317 	ldw	r4,12(r8)
   12160:	40c00217 	ldw	r3,8(r8)
   12164:	308d883a 	add	r6,r6,r2
   12168:	20c00215 	stw	r3,8(r4)
   1216c:	19000315 	stw	r4,12(r3)
   12170:	00800074 	movhi	r2,1
   12174:	109bc904 	addi	r2,r2,28452
   12178:	11000017 	ldw	r4,0(r2)
   1217c:	30c00054 	ori	r3,r6,1
   12180:	52000215 	stw	r8,8(r10)
   12184:	40c00115 	stw	r3,4(r8)
   12188:	313fa036 	bltu	r6,r4,1200c <_free_r+0xb4>
   1218c:	008000b4 	movhi	r2,2
   12190:	10a26704 	addi	r2,r2,-30308
   12194:	11400017 	ldw	r5,0(r2)
   12198:	8809883a 	mov	r4,r17
   1219c:	0011e2c0 	call	11e2c <_malloc_trim_r>
   121a0:	003f9a06 	br	1200c <_free_r+0xb4>
   121a4:	00800104 	movi	r2,4
   121a8:	10c0072e 	bgeu	r2,r3,121c8 <_free_r+0x270>
   121ac:	00800504 	movi	r2,20
   121b0:	10c01936 	bltu	r2,r3,12218 <_free_r+0x2c0>
   121b4:	188016c4 	addi	r2,r3,91
   121b8:	100690fa 	slli	r3,r2,3
   121bc:	003fb306 	br	1208c <_free_r+0x134>
   121c0:	01400044 	movi	r5,1
   121c4:	003f7e06 	br	11fc0 <_free_r+0x68>
   121c8:	3804d1ba 	srli	r2,r7,6
   121cc:	10800e04 	addi	r2,r2,56
   121d0:	100690fa 	slli	r3,r2,3
   121d4:	003fad06 	br	1208c <_free_r+0x134>
   121d8:	22000315 	stw	r8,12(r4)
   121dc:	22000215 	stw	r8,8(r4)
   121e0:	3a05883a 	add	r2,r7,r8
   121e4:	38c00054 	ori	r3,r7,1
   121e8:	11c00015 	stw	r7,0(r2)
   121ec:	41000215 	stw	r4,8(r8)
   121f0:	40c00115 	stw	r3,4(r8)
   121f4:	41000315 	stw	r4,12(r8)
   121f8:	003f8406 	br	1200c <_free_r+0xb4>
   121fc:	1005d0ba 	srai	r2,r2,2
   12200:	00c00044 	movi	r3,1
   12204:	51000117 	ldw	r4,4(r10)
   12208:	1886983a 	sll	r3,r3,r2
   1220c:	20c8b03a 	or	r4,r4,r3
   12210:	51000115 	stw	r4,4(r10)
   12214:	003fa706 	br	120b4 <_free_r+0x15c>
   12218:	00801504 	movi	r2,84
   1221c:	10c00436 	bltu	r2,r3,12230 <_free_r+0x2d8>
   12220:	3804d33a 	srli	r2,r7,12
   12224:	10801b84 	addi	r2,r2,110
   12228:	100690fa 	slli	r3,r2,3
   1222c:	003f9706 	br	1208c <_free_r+0x134>
   12230:	00805504 	movi	r2,340
   12234:	10c00436 	bltu	r2,r3,12248 <_free_r+0x2f0>
   12238:	3804d3fa 	srli	r2,r7,15
   1223c:	10801dc4 	addi	r2,r2,119
   12240:	100690fa 	slli	r3,r2,3
   12244:	003f9106 	br	1208c <_free_r+0x134>
   12248:	00815504 	movi	r2,1364
   1224c:	10c0032e 	bgeu	r2,r3,1225c <_free_r+0x304>
   12250:	00801f84 	movi	r2,126
   12254:	00c0fc04 	movi	r3,1008
   12258:	003f8c06 	br	1208c <_free_r+0x134>
   1225c:	3804d4ba 	srli	r2,r7,18
   12260:	10801f04 	addi	r2,r2,124
   12264:	100690fa 	slli	r3,r2,3
   12268:	003f8806 	br	1208c <_free_r+0x134>

0001226c <_fwalk_reent>:
   1226c:	defff704 	addi	sp,sp,-36
   12270:	dcc00315 	stw	r19,12(sp)
   12274:	24c0b804 	addi	r19,r4,736
   12278:	dd800615 	stw	r22,24(sp)
   1227c:	dd400515 	stw	r21,20(sp)
   12280:	dfc00815 	stw	ra,32(sp)
   12284:	ddc00715 	stw	r23,28(sp)
   12288:	dd000415 	stw	r20,16(sp)
   1228c:	dc800215 	stw	r18,8(sp)
   12290:	dc400115 	stw	r17,4(sp)
   12294:	dc000015 	stw	r16,0(sp)
   12298:	202b883a 	mov	r21,r4
   1229c:	282d883a 	mov	r22,r5
   122a0:	0011bc40 	call	11bc4 <__sfp_lock_acquire>
   122a4:	98002126 	beq	r19,zero,1232c <_fwalk_reent+0xc0>
   122a8:	002f883a 	mov	r23,zero
   122ac:	9c800117 	ldw	r18,4(r19)
   122b0:	9c000217 	ldw	r16,8(r19)
   122b4:	90bfffc4 	addi	r2,r18,-1
   122b8:	10000d16 	blt	r2,zero,122f0 <_fwalk_reent+0x84>
   122bc:	0023883a 	mov	r17,zero
   122c0:	053fffc4 	movi	r20,-1
   122c4:	8080030f 	ldh	r2,12(r16)
   122c8:	8c400044 	addi	r17,r17,1
   122cc:	10000626 	beq	r2,zero,122e8 <_fwalk_reent+0x7c>
   122d0:	8080038f 	ldh	r2,14(r16)
   122d4:	800b883a 	mov	r5,r16
   122d8:	a809883a 	mov	r4,r21
   122dc:	15000226 	beq	r2,r20,122e8 <_fwalk_reent+0x7c>
   122e0:	b03ee83a 	callr	r22
   122e4:	b8aeb03a 	or	r23,r23,r2
   122e8:	84001704 	addi	r16,r16,92
   122ec:	947ff51e 	bne	r18,r17,122c4 <_fwalk_reent+0x58>
   122f0:	9cc00017 	ldw	r19,0(r19)
   122f4:	983fed1e 	bne	r19,zero,122ac <_fwalk_reent+0x40>
   122f8:	0011bc80 	call	11bc8 <__sfp_lock_release>
   122fc:	b805883a 	mov	r2,r23
   12300:	dfc00817 	ldw	ra,32(sp)
   12304:	ddc00717 	ldw	r23,28(sp)
   12308:	dd800617 	ldw	r22,24(sp)
   1230c:	dd400517 	ldw	r21,20(sp)
   12310:	dd000417 	ldw	r20,16(sp)
   12314:	dcc00317 	ldw	r19,12(sp)
   12318:	dc800217 	ldw	r18,8(sp)
   1231c:	dc400117 	ldw	r17,4(sp)
   12320:	dc000017 	ldw	r16,0(sp)
   12324:	dec00904 	addi	sp,sp,36
   12328:	f800283a 	ret
   1232c:	002f883a 	mov	r23,zero
   12330:	003ff106 	br	122f8 <_fwalk_reent+0x8c>

00012334 <_fwalk>:
   12334:	defff804 	addi	sp,sp,-32
   12338:	dcc00315 	stw	r19,12(sp)
   1233c:	24c0b804 	addi	r19,r4,736
   12340:	dd400515 	stw	r21,20(sp)
   12344:	dfc00715 	stw	ra,28(sp)
   12348:	dd800615 	stw	r22,24(sp)
   1234c:	dd000415 	stw	r20,16(sp)
   12350:	dc800215 	stw	r18,8(sp)
   12354:	dc400115 	stw	r17,4(sp)
   12358:	dc000015 	stw	r16,0(sp)
   1235c:	282b883a 	mov	r21,r5
   12360:	0011bc40 	call	11bc4 <__sfp_lock_acquire>
   12364:	98001f26 	beq	r19,zero,123e4 <_fwalk+0xb0>
   12368:	002d883a 	mov	r22,zero
   1236c:	9c800117 	ldw	r18,4(r19)
   12370:	9c000217 	ldw	r16,8(r19)
   12374:	90bfffc4 	addi	r2,r18,-1
   12378:	10000c16 	blt	r2,zero,123ac <_fwalk+0x78>
   1237c:	0023883a 	mov	r17,zero
   12380:	053fffc4 	movi	r20,-1
   12384:	8080030f 	ldh	r2,12(r16)
   12388:	8c400044 	addi	r17,r17,1
   1238c:	10000526 	beq	r2,zero,123a4 <_fwalk+0x70>
   12390:	8080038f 	ldh	r2,14(r16)
   12394:	8009883a 	mov	r4,r16
   12398:	15000226 	beq	r2,r20,123a4 <_fwalk+0x70>
   1239c:	a83ee83a 	callr	r21
   123a0:	b0acb03a 	or	r22,r22,r2
   123a4:	84001704 	addi	r16,r16,92
   123a8:	947ff61e 	bne	r18,r17,12384 <_fwalk+0x50>
   123ac:	9cc00017 	ldw	r19,0(r19)
   123b0:	983fee1e 	bne	r19,zero,1236c <_fwalk+0x38>
   123b4:	0011bc80 	call	11bc8 <__sfp_lock_release>
   123b8:	b005883a 	mov	r2,r22
   123bc:	dfc00717 	ldw	ra,28(sp)
   123c0:	dd800617 	ldw	r22,24(sp)
   123c4:	dd400517 	ldw	r21,20(sp)
   123c8:	dd000417 	ldw	r20,16(sp)
   123cc:	dcc00317 	ldw	r19,12(sp)
   123d0:	dc800217 	ldw	r18,8(sp)
   123d4:	dc400117 	ldw	r17,4(sp)
   123d8:	dc000017 	ldw	r16,0(sp)
   123dc:	dec00804 	addi	sp,sp,32
   123e0:	f800283a 	ret
   123e4:	002d883a 	mov	r22,zero
   123e8:	003ff206 	br	123b4 <_fwalk+0x80>

000123ec <__smakebuf_r>:
   123ec:	2880030b 	ldhu	r2,12(r5)
   123f0:	deffed04 	addi	sp,sp,-76
   123f4:	dc401015 	stw	r17,64(sp)
   123f8:	1080008c 	andi	r2,r2,2
   123fc:	dc000f15 	stw	r16,60(sp)
   12400:	dfc01215 	stw	ra,72(sp)
   12404:	dc801115 	stw	r18,68(sp)
   12408:	2821883a 	mov	r16,r5
   1240c:	2023883a 	mov	r17,r4
   12410:	10000b26 	beq	r2,zero,12440 <__smakebuf_r+0x54>
   12414:	28c010c4 	addi	r3,r5,67
   12418:	00800044 	movi	r2,1
   1241c:	28800515 	stw	r2,20(r5)
   12420:	28c00415 	stw	r3,16(r5)
   12424:	28c00015 	stw	r3,0(r5)
   12428:	dfc01217 	ldw	ra,72(sp)
   1242c:	dc801117 	ldw	r18,68(sp)
   12430:	dc401017 	ldw	r17,64(sp)
   12434:	dc000f17 	ldw	r16,60(sp)
   12438:	dec01304 	addi	sp,sp,76
   1243c:	f800283a 	ret
   12440:	2940038f 	ldh	r5,14(r5)
   12444:	28002116 	blt	r5,zero,124cc <__smakebuf_r+0xe0>
   12448:	d80d883a 	mov	r6,sp
   1244c:	00129700 	call	12970 <_fstat_r>
   12450:	10001e16 	blt	r2,zero,124cc <__smakebuf_r+0xe0>
   12454:	d8800117 	ldw	r2,4(sp)
   12458:	00e00014 	movui	r3,32768
   1245c:	113c000c 	andi	r4,r2,61440
   12460:	20c03126 	beq	r4,r3,12528 <__smakebuf_r+0x13c>
   12464:	8080030b 	ldhu	r2,12(r16)
   12468:	00c80004 	movi	r3,8192
   1246c:	10820014 	ori	r2,r2,2048
   12470:	8080030d 	sth	r2,12(r16)
   12474:	20c01e26 	beq	r4,r3,124f0 <__smakebuf_r+0x104>
   12478:	04810004 	movi	r18,1024
   1247c:	8809883a 	mov	r4,r17
   12480:	900b883a 	mov	r5,r18
   12484:	00107f80 	call	107f8 <_malloc_r>
   12488:	1009883a 	mov	r4,r2
   1248c:	10003126 	beq	r2,zero,12554 <__smakebuf_r+0x168>
   12490:	80c0030b 	ldhu	r3,12(r16)
   12494:	00800074 	movhi	r2,1
   12498:	10872e04 	addi	r2,r2,7352
   1249c:	88800f15 	stw	r2,60(r17)
   124a0:	18c02014 	ori	r3,r3,128
   124a4:	84800515 	stw	r18,20(r16)
   124a8:	80c0030d 	sth	r3,12(r16)
   124ac:	81000415 	stw	r4,16(r16)
   124b0:	81000015 	stw	r4,0(r16)
   124b4:	dfc01217 	ldw	ra,72(sp)
   124b8:	dc801117 	ldw	r18,68(sp)
   124bc:	dc401017 	ldw	r17,64(sp)
   124c0:	dc000f17 	ldw	r16,60(sp)
   124c4:	dec01304 	addi	sp,sp,76
   124c8:	f800283a 	ret
   124cc:	80c0030b 	ldhu	r3,12(r16)
   124d0:	1880200c 	andi	r2,r3,128
   124d4:	10000426 	beq	r2,zero,124e8 <__smakebuf_r+0xfc>
   124d8:	04801004 	movi	r18,64
   124dc:	18820014 	ori	r2,r3,2048
   124e0:	8080030d 	sth	r2,12(r16)
   124e4:	003fe506 	br	1247c <__smakebuf_r+0x90>
   124e8:	04810004 	movi	r18,1024
   124ec:	003ffb06 	br	124dc <__smakebuf_r+0xf0>
   124f0:	8140038f 	ldh	r5,14(r16)
   124f4:	8809883a 	mov	r4,r17
   124f8:	00129e40 	call	129e4 <_isatty_r>
   124fc:	103fde26 	beq	r2,zero,12478 <__smakebuf_r+0x8c>
   12500:	8080030b 	ldhu	r2,12(r16)
   12504:	80c010c4 	addi	r3,r16,67
   12508:	04810004 	movi	r18,1024
   1250c:	10800054 	ori	r2,r2,1
   12510:	8080030d 	sth	r2,12(r16)
   12514:	00800044 	movi	r2,1
   12518:	80c00415 	stw	r3,16(r16)
   1251c:	80800515 	stw	r2,20(r16)
   12520:	80c00015 	stw	r3,0(r16)
   12524:	003fd506 	br	1247c <__smakebuf_r+0x90>
   12528:	80c00a17 	ldw	r3,40(r16)
   1252c:	00800074 	movhi	r2,1
   12530:	10898804 	addi	r2,r2,9760
   12534:	18bfcb1e 	bne	r3,r2,12464 <__smakebuf_r+0x78>
   12538:	8080030b 	ldhu	r2,12(r16)
   1253c:	00c10004 	movi	r3,1024
   12540:	1825883a 	mov	r18,r3
   12544:	10c4b03a 	or	r2,r2,r3
   12548:	8080030d 	sth	r2,12(r16)
   1254c:	80c01315 	stw	r3,76(r16)
   12550:	003fca06 	br	1247c <__smakebuf_r+0x90>
   12554:	8100030b 	ldhu	r4,12(r16)
   12558:	2080800c 	andi	r2,r4,512
   1255c:	103fb21e 	bne	r2,zero,12428 <__smakebuf_r+0x3c>
   12560:	80c010c4 	addi	r3,r16,67
   12564:	21000094 	ori	r4,r4,2
   12568:	00800044 	movi	r2,1
   1256c:	80800515 	stw	r2,20(r16)
   12570:	8100030d 	sth	r4,12(r16)
   12574:	80c00415 	stw	r3,16(r16)
   12578:	80c00015 	stw	r3,0(r16)
   1257c:	003faa06 	br	12428 <__smakebuf_r+0x3c>

00012580 <memset>:
   12580:	008000c4 	movi	r2,3
   12584:	29403fcc 	andi	r5,r5,255
   12588:	2007883a 	mov	r3,r4
   1258c:	1180022e 	bgeu	r2,r6,12598 <memset+0x18>
   12590:	2084703a 	and	r2,r4,r2
   12594:	10000826 	beq	r2,zero,125b8 <memset+0x38>
   12598:	30000526 	beq	r6,zero,125b0 <memset+0x30>
   1259c:	2805883a 	mov	r2,r5
   125a0:	30cd883a 	add	r6,r6,r3
   125a4:	18800005 	stb	r2,0(r3)
   125a8:	18c00044 	addi	r3,r3,1
   125ac:	19bffd1e 	bne	r3,r6,125a4 <memset+0x24>
   125b0:	2005883a 	mov	r2,r4
   125b4:	f800283a 	ret
   125b8:	2804923a 	slli	r2,r5,8
   125bc:	020003c4 	movi	r8,15
   125c0:	200f883a 	mov	r7,r4
   125c4:	2884b03a 	or	r2,r5,r2
   125c8:	1006943a 	slli	r3,r2,16
   125cc:	10c6b03a 	or	r3,r2,r3
   125d0:	41800a2e 	bgeu	r8,r6,125fc <memset+0x7c>
   125d4:	4005883a 	mov	r2,r8
   125d8:	31bffc04 	addi	r6,r6,-16
   125dc:	38c00015 	stw	r3,0(r7)
   125e0:	38c00115 	stw	r3,4(r7)
   125e4:	38c00215 	stw	r3,8(r7)
   125e8:	38c00315 	stw	r3,12(r7)
   125ec:	39c00404 	addi	r7,r7,16
   125f0:	11bff936 	bltu	r2,r6,125d8 <memset+0x58>
   125f4:	008000c4 	movi	r2,3
   125f8:	1180052e 	bgeu	r2,r6,12610 <memset+0x90>
   125fc:	31bfff04 	addi	r6,r6,-4
   12600:	008000c4 	movi	r2,3
   12604:	38c00015 	stw	r3,0(r7)
   12608:	39c00104 	addi	r7,r7,4
   1260c:	11bffb36 	bltu	r2,r6,125fc <memset+0x7c>
   12610:	3807883a 	mov	r3,r7
   12614:	003fe006 	br	12598 <memset+0x18>

00012618 <__sclose>:
   12618:	2940038f 	ldh	r5,14(r5)
   1261c:	00127dc1 	jmpi	127dc <_close_r>

00012620 <__sseek>:
   12620:	defffe04 	addi	sp,sp,-8
   12624:	dc000015 	stw	r16,0(sp)
   12628:	2821883a 	mov	r16,r5
   1262c:	2940038f 	ldh	r5,14(r5)
   12630:	dfc00115 	stw	ra,4(sp)
   12634:	0012a540 	call	12a54 <_lseek_r>
   12638:	1007883a 	mov	r3,r2
   1263c:	00bfffc4 	movi	r2,-1
   12640:	18800926 	beq	r3,r2,12668 <__sseek+0x48>
   12644:	8080030b 	ldhu	r2,12(r16)
   12648:	80c01415 	stw	r3,80(r16)
   1264c:	10840014 	ori	r2,r2,4096
   12650:	8080030d 	sth	r2,12(r16)
   12654:	1805883a 	mov	r2,r3
   12658:	dfc00117 	ldw	ra,4(sp)
   1265c:	dc000017 	ldw	r16,0(sp)
   12660:	dec00204 	addi	sp,sp,8
   12664:	f800283a 	ret
   12668:	8080030b 	ldhu	r2,12(r16)
   1266c:	10bbffcc 	andi	r2,r2,61439
   12670:	8080030d 	sth	r2,12(r16)
   12674:	1805883a 	mov	r2,r3
   12678:	dfc00117 	ldw	ra,4(sp)
   1267c:	dc000017 	ldw	r16,0(sp)
   12680:	dec00204 	addi	sp,sp,8
   12684:	f800283a 	ret

00012688 <__swrite>:
   12688:	2880030b 	ldhu	r2,12(r5)
   1268c:	defffb04 	addi	sp,sp,-20
   12690:	dcc00315 	stw	r19,12(sp)
   12694:	1080400c 	andi	r2,r2,256
   12698:	dc800215 	stw	r18,8(sp)
   1269c:	dc400115 	stw	r17,4(sp)
   126a0:	dc000015 	stw	r16,0(sp)
   126a4:	3027883a 	mov	r19,r6
   126a8:	3825883a 	mov	r18,r7
   126ac:	dfc00415 	stw	ra,16(sp)
   126b0:	2821883a 	mov	r16,r5
   126b4:	000d883a 	mov	r6,zero
   126b8:	01c00084 	movi	r7,2
   126bc:	2023883a 	mov	r17,r4
   126c0:	10000226 	beq	r2,zero,126cc <__swrite+0x44>
   126c4:	2940038f 	ldh	r5,14(r5)
   126c8:	0012a540 	call	12a54 <_lseek_r>
   126cc:	8080030b 	ldhu	r2,12(r16)
   126d0:	8140038f 	ldh	r5,14(r16)
   126d4:	8809883a 	mov	r4,r17
   126d8:	10bbffcc 	andi	r2,r2,61439
   126dc:	980d883a 	mov	r6,r19
   126e0:	900f883a 	mov	r7,r18
   126e4:	8080030d 	sth	r2,12(r16)
   126e8:	dfc00417 	ldw	ra,16(sp)
   126ec:	dcc00317 	ldw	r19,12(sp)
   126f0:	dc800217 	ldw	r18,8(sp)
   126f4:	dc400117 	ldw	r17,4(sp)
   126f8:	dc000017 	ldw	r16,0(sp)
   126fc:	dec00504 	addi	sp,sp,20
   12700:	00127641 	jmpi	12764 <_write_r>

00012704 <__sread>:
   12704:	defffe04 	addi	sp,sp,-8
   12708:	dc000015 	stw	r16,0(sp)
   1270c:	2821883a 	mov	r16,r5
   12710:	2940038f 	ldh	r5,14(r5)
   12714:	dfc00115 	stw	ra,4(sp)
   12718:	0012acc0 	call	12acc <_read_r>
   1271c:	1007883a 	mov	r3,r2
   12720:	10000816 	blt	r2,zero,12744 <__sread+0x40>
   12724:	80801417 	ldw	r2,80(r16)
   12728:	10c5883a 	add	r2,r2,r3
   1272c:	80801415 	stw	r2,80(r16)
   12730:	1805883a 	mov	r2,r3
   12734:	dfc00117 	ldw	ra,4(sp)
   12738:	dc000017 	ldw	r16,0(sp)
   1273c:	dec00204 	addi	sp,sp,8
   12740:	f800283a 	ret
   12744:	8080030b 	ldhu	r2,12(r16)
   12748:	10bbffcc 	andi	r2,r2,61439
   1274c:	8080030d 	sth	r2,12(r16)
   12750:	1805883a 	mov	r2,r3
   12754:	dfc00117 	ldw	ra,4(sp)
   12758:	dc000017 	ldw	r16,0(sp)
   1275c:	dec00204 	addi	sp,sp,8
   12760:	f800283a 	ret

00012764 <_write_r>:
   12764:	defffd04 	addi	sp,sp,-12
   12768:	dc000015 	stw	r16,0(sp)
   1276c:	040000b4 	movhi	r16,2
   12770:	84226a04 	addi	r16,r16,-30296
   12774:	dc400115 	stw	r17,4(sp)
   12778:	80000015 	stw	zero,0(r16)
   1277c:	2023883a 	mov	r17,r4
   12780:	2809883a 	mov	r4,r5
   12784:	300b883a 	mov	r5,r6
   12788:	380d883a 	mov	r6,r7
   1278c:	dfc00215 	stw	ra,8(sp)
   12790:	00134a40 	call	134a4 <write>
   12794:	1007883a 	mov	r3,r2
   12798:	00bfffc4 	movi	r2,-1
   1279c:	18800626 	beq	r3,r2,127b8 <_write_r+0x54>
   127a0:	1805883a 	mov	r2,r3
   127a4:	dfc00217 	ldw	ra,8(sp)
   127a8:	dc400117 	ldw	r17,4(sp)
   127ac:	dc000017 	ldw	r16,0(sp)
   127b0:	dec00304 	addi	sp,sp,12
   127b4:	f800283a 	ret
   127b8:	80800017 	ldw	r2,0(r16)
   127bc:	103ff826 	beq	r2,zero,127a0 <_write_r+0x3c>
   127c0:	88800015 	stw	r2,0(r17)
   127c4:	1805883a 	mov	r2,r3
   127c8:	dfc00217 	ldw	ra,8(sp)
   127cc:	dc400117 	ldw	r17,4(sp)
   127d0:	dc000017 	ldw	r16,0(sp)
   127d4:	dec00304 	addi	sp,sp,12
   127d8:	f800283a 	ret

000127dc <_close_r>:
   127dc:	defffd04 	addi	sp,sp,-12
   127e0:	dc000015 	stw	r16,0(sp)
   127e4:	040000b4 	movhi	r16,2
   127e8:	84226a04 	addi	r16,r16,-30296
   127ec:	dc400115 	stw	r17,4(sp)
   127f0:	80000015 	stw	zero,0(r16)
   127f4:	2023883a 	mov	r17,r4
   127f8:	2809883a 	mov	r4,r5
   127fc:	dfc00215 	stw	ra,8(sp)
   12800:	0012b440 	call	12b44 <close>
   12804:	1007883a 	mov	r3,r2
   12808:	00bfffc4 	movi	r2,-1
   1280c:	18800626 	beq	r3,r2,12828 <_close_r+0x4c>
   12810:	1805883a 	mov	r2,r3
   12814:	dfc00217 	ldw	ra,8(sp)
   12818:	dc400117 	ldw	r17,4(sp)
   1281c:	dc000017 	ldw	r16,0(sp)
   12820:	dec00304 	addi	sp,sp,12
   12824:	f800283a 	ret
   12828:	80800017 	ldw	r2,0(r16)
   1282c:	103ff826 	beq	r2,zero,12810 <_close_r+0x34>
   12830:	88800015 	stw	r2,0(r17)
   12834:	1805883a 	mov	r2,r3
   12838:	dfc00217 	ldw	ra,8(sp)
   1283c:	dc400117 	ldw	r17,4(sp)
   12840:	dc000017 	ldw	r16,0(sp)
   12844:	dec00304 	addi	sp,sp,12
   12848:	f800283a 	ret

0001284c <_fclose_r>:
   1284c:	defffc04 	addi	sp,sp,-16
   12850:	dc400115 	stw	r17,4(sp)
   12854:	dc000015 	stw	r16,0(sp)
   12858:	dfc00315 	stw	ra,12(sp)
   1285c:	dc800215 	stw	r18,8(sp)
   12860:	2821883a 	mov	r16,r5
   12864:	2023883a 	mov	r17,r4
   12868:	28002926 	beq	r5,zero,12910 <_fclose_r+0xc4>
   1286c:	0011bc40 	call	11bc4 <__sfp_lock_acquire>
   12870:	88000226 	beq	r17,zero,1287c <_fclose_r+0x30>
   12874:	88800e17 	ldw	r2,56(r17)
   12878:	10002d26 	beq	r2,zero,12930 <_fclose_r+0xe4>
   1287c:	8080030f 	ldh	r2,12(r16)
   12880:	10002226 	beq	r2,zero,1290c <_fclose_r+0xc0>
   12884:	8809883a 	mov	r4,r17
   12888:	800b883a 	mov	r5,r16
   1288c:	001193c0 	call	1193c <_fflush_r>
   12890:	1025883a 	mov	r18,r2
   12894:	80800b17 	ldw	r2,44(r16)
   12898:	10000426 	beq	r2,zero,128ac <_fclose_r+0x60>
   1289c:	81400717 	ldw	r5,28(r16)
   128a0:	8809883a 	mov	r4,r17
   128a4:	103ee83a 	callr	r2
   128a8:	10002a16 	blt	r2,zero,12954 <_fclose_r+0x108>
   128ac:	8080030b 	ldhu	r2,12(r16)
   128b0:	1080200c 	andi	r2,r2,128
   128b4:	1000231e 	bne	r2,zero,12944 <_fclose_r+0xf8>
   128b8:	81400c17 	ldw	r5,48(r16)
   128bc:	28000526 	beq	r5,zero,128d4 <_fclose_r+0x88>
   128c0:	80801004 	addi	r2,r16,64
   128c4:	28800226 	beq	r5,r2,128d0 <_fclose_r+0x84>
   128c8:	8809883a 	mov	r4,r17
   128cc:	0011f580 	call	11f58 <_free_r>
   128d0:	80000c15 	stw	zero,48(r16)
   128d4:	81401117 	ldw	r5,68(r16)
   128d8:	28000326 	beq	r5,zero,128e8 <_fclose_r+0x9c>
   128dc:	8809883a 	mov	r4,r17
   128e0:	0011f580 	call	11f58 <_free_r>
   128e4:	80001115 	stw	zero,68(r16)
   128e8:	8000030d 	sth	zero,12(r16)
   128ec:	0011bc80 	call	11bc8 <__sfp_lock_release>
   128f0:	9005883a 	mov	r2,r18
   128f4:	dfc00317 	ldw	ra,12(sp)
   128f8:	dc800217 	ldw	r18,8(sp)
   128fc:	dc400117 	ldw	r17,4(sp)
   12900:	dc000017 	ldw	r16,0(sp)
   12904:	dec00404 	addi	sp,sp,16
   12908:	f800283a 	ret
   1290c:	0011bc80 	call	11bc8 <__sfp_lock_release>
   12910:	0025883a 	mov	r18,zero
   12914:	9005883a 	mov	r2,r18
   12918:	dfc00317 	ldw	ra,12(sp)
   1291c:	dc800217 	ldw	r18,8(sp)
   12920:	dc400117 	ldw	r17,4(sp)
   12924:	dc000017 	ldw	r16,0(sp)
   12928:	dec00404 	addi	sp,sp,16
   1292c:	f800283a 	ret
   12930:	8809883a 	mov	r4,r17
   12934:	0011bd40 	call	11bd4 <__sinit>
   12938:	8080030f 	ldh	r2,12(r16)
   1293c:	103fd11e 	bne	r2,zero,12884 <_fclose_r+0x38>
   12940:	003ff206 	br	1290c <_fclose_r+0xc0>
   12944:	81400417 	ldw	r5,16(r16)
   12948:	8809883a 	mov	r4,r17
   1294c:	0011f580 	call	11f58 <_free_r>
   12950:	003fd906 	br	128b8 <_fclose_r+0x6c>
   12954:	04bfffc4 	movi	r18,-1
   12958:	003fd406 	br	128ac <_fclose_r+0x60>

0001295c <fclose>:
   1295c:	00800074 	movhi	r2,1
   12960:	109bc704 	addi	r2,r2,28444
   12964:	200b883a 	mov	r5,r4
   12968:	11000017 	ldw	r4,0(r2)
   1296c:	001284c1 	jmpi	1284c <_fclose_r>

00012970 <_fstat_r>:
   12970:	defffd04 	addi	sp,sp,-12
   12974:	dc000015 	stw	r16,0(sp)
   12978:	040000b4 	movhi	r16,2
   1297c:	84226a04 	addi	r16,r16,-30296
   12980:	dc400115 	stw	r17,4(sp)
   12984:	80000015 	stw	zero,0(r16)
   12988:	2023883a 	mov	r17,r4
   1298c:	2809883a 	mov	r4,r5
   12990:	300b883a 	mov	r5,r6
   12994:	dfc00215 	stw	ra,8(sp)
   12998:	0012ccc0 	call	12ccc <fstat>
   1299c:	1007883a 	mov	r3,r2
   129a0:	00bfffc4 	movi	r2,-1
   129a4:	18800626 	beq	r3,r2,129c0 <_fstat_r+0x50>
   129a8:	1805883a 	mov	r2,r3
   129ac:	dfc00217 	ldw	ra,8(sp)
   129b0:	dc400117 	ldw	r17,4(sp)
   129b4:	dc000017 	ldw	r16,0(sp)
   129b8:	dec00304 	addi	sp,sp,12
   129bc:	f800283a 	ret
   129c0:	80800017 	ldw	r2,0(r16)
   129c4:	103ff826 	beq	r2,zero,129a8 <_fstat_r+0x38>
   129c8:	88800015 	stw	r2,0(r17)
   129cc:	1805883a 	mov	r2,r3
   129d0:	dfc00217 	ldw	ra,8(sp)
   129d4:	dc400117 	ldw	r17,4(sp)
   129d8:	dc000017 	ldw	r16,0(sp)
   129dc:	dec00304 	addi	sp,sp,12
   129e0:	f800283a 	ret

000129e4 <_isatty_r>:
   129e4:	defffd04 	addi	sp,sp,-12
   129e8:	dc000015 	stw	r16,0(sp)
   129ec:	040000b4 	movhi	r16,2
   129f0:	84226a04 	addi	r16,r16,-30296
   129f4:	dc400115 	stw	r17,4(sp)
   129f8:	80000015 	stw	zero,0(r16)
   129fc:	2023883a 	mov	r17,r4
   12a00:	2809883a 	mov	r4,r5
   12a04:	dfc00215 	stw	ra,8(sp)
   12a08:	0012e000 	call	12e00 <isatty>
   12a0c:	1007883a 	mov	r3,r2
   12a10:	00bfffc4 	movi	r2,-1
   12a14:	18800626 	beq	r3,r2,12a30 <_isatty_r+0x4c>
   12a18:	1805883a 	mov	r2,r3
   12a1c:	dfc00217 	ldw	ra,8(sp)
   12a20:	dc400117 	ldw	r17,4(sp)
   12a24:	dc000017 	ldw	r16,0(sp)
   12a28:	dec00304 	addi	sp,sp,12
   12a2c:	f800283a 	ret
   12a30:	80800017 	ldw	r2,0(r16)
   12a34:	103ff826 	beq	r2,zero,12a18 <_isatty_r+0x34>
   12a38:	88800015 	stw	r2,0(r17)
   12a3c:	1805883a 	mov	r2,r3
   12a40:	dfc00217 	ldw	ra,8(sp)
   12a44:	dc400117 	ldw	r17,4(sp)
   12a48:	dc000017 	ldw	r16,0(sp)
   12a4c:	dec00304 	addi	sp,sp,12
   12a50:	f800283a 	ret

00012a54 <_lseek_r>:
   12a54:	defffd04 	addi	sp,sp,-12
   12a58:	dc000015 	stw	r16,0(sp)
   12a5c:	040000b4 	movhi	r16,2
   12a60:	84226a04 	addi	r16,r16,-30296
   12a64:	dc400115 	stw	r17,4(sp)
   12a68:	80000015 	stw	zero,0(r16)
   12a6c:	2023883a 	mov	r17,r4
   12a70:	2809883a 	mov	r4,r5
   12a74:	300b883a 	mov	r5,r6
   12a78:	380d883a 	mov	r6,r7
   12a7c:	dfc00215 	stw	ra,8(sp)
   12a80:	001300c0 	call	1300c <lseek>
   12a84:	1007883a 	mov	r3,r2
   12a88:	00bfffc4 	movi	r2,-1
   12a8c:	18800626 	beq	r3,r2,12aa8 <_lseek_r+0x54>
   12a90:	1805883a 	mov	r2,r3
   12a94:	dfc00217 	ldw	ra,8(sp)
   12a98:	dc400117 	ldw	r17,4(sp)
   12a9c:	dc000017 	ldw	r16,0(sp)
   12aa0:	dec00304 	addi	sp,sp,12
   12aa4:	f800283a 	ret
   12aa8:	80800017 	ldw	r2,0(r16)
   12aac:	103ff826 	beq	r2,zero,12a90 <_lseek_r+0x3c>
   12ab0:	88800015 	stw	r2,0(r17)
   12ab4:	1805883a 	mov	r2,r3
   12ab8:	dfc00217 	ldw	ra,8(sp)
   12abc:	dc400117 	ldw	r17,4(sp)
   12ac0:	dc000017 	ldw	r16,0(sp)
   12ac4:	dec00304 	addi	sp,sp,12
   12ac8:	f800283a 	ret

00012acc <_read_r>:
   12acc:	defffd04 	addi	sp,sp,-12
   12ad0:	dc000015 	stw	r16,0(sp)
   12ad4:	040000b4 	movhi	r16,2
   12ad8:	84226a04 	addi	r16,r16,-30296
   12adc:	dc400115 	stw	r17,4(sp)
   12ae0:	80000015 	stw	zero,0(r16)
   12ae4:	2023883a 	mov	r17,r4
   12ae8:	2809883a 	mov	r4,r5
   12aec:	300b883a 	mov	r5,r6
   12af0:	380d883a 	mov	r6,r7
   12af4:	dfc00215 	stw	ra,8(sp)
   12af8:	00132080 	call	13208 <read>
   12afc:	1007883a 	mov	r3,r2
   12b00:	00bfffc4 	movi	r2,-1
   12b04:	18800626 	beq	r3,r2,12b20 <_read_r+0x54>
   12b08:	1805883a 	mov	r2,r3
   12b0c:	dfc00217 	ldw	ra,8(sp)
   12b10:	dc400117 	ldw	r17,4(sp)
   12b14:	dc000017 	ldw	r16,0(sp)
   12b18:	dec00304 	addi	sp,sp,12
   12b1c:	f800283a 	ret
   12b20:	80800017 	ldw	r2,0(r16)
   12b24:	103ff826 	beq	r2,zero,12b08 <_read_r+0x3c>
   12b28:	88800015 	stw	r2,0(r17)
   12b2c:	1805883a 	mov	r2,r3
   12b30:	dfc00217 	ldw	ra,8(sp)
   12b34:	dc400117 	ldw	r17,4(sp)
   12b38:	dc000017 	ldw	r16,0(sp)
   12b3c:	dec00304 	addi	sp,sp,12
   12b40:	f800283a 	ret

00012b44 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   12b44:	defff804 	addi	sp,sp,-32
   12b48:	dfc00715 	stw	ra,28(sp)
   12b4c:	df000615 	stw	fp,24(sp)
   12b50:	df000604 	addi	fp,sp,24
   12b54:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12b58:	e0bffc17 	ldw	r2,-16(fp)
   12b5c:	1004803a 	cmplt	r2,r2,zero
   12b60:	1000081e 	bne	r2,zero,12b84 <close+0x40>
   12b64:	e0bffc17 	ldw	r2,-16(fp)
   12b68:	10800324 	muli	r2,r2,12
   12b6c:	1007883a 	mov	r3,r2
   12b70:	00800074 	movhi	r2,1
   12b74:	10974f04 	addi	r2,r2,23868
   12b78:	1887883a 	add	r3,r3,r2
   12b7c:	e0ffff15 	stw	r3,-4(fp)
   12b80:	00000106 	br	12b88 <close+0x44>
   12b84:	e03fff15 	stw	zero,-4(fp)
   12b88:	e0bfff17 	ldw	r2,-4(fp)
   12b8c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   12b90:	e0bffb17 	ldw	r2,-20(fp)
   12b94:	1005003a 	cmpeq	r2,r2,zero
   12b98:	10001d1e 	bne	r2,zero,12c10 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12b9c:	e0bffb17 	ldw	r2,-20(fp)
   12ba0:	10800017 	ldw	r2,0(r2)
   12ba4:	10800417 	ldw	r2,16(r2)
   12ba8:	1005003a 	cmpeq	r2,r2,zero
   12bac:	1000071e 	bne	r2,zero,12bcc <close+0x88>
   12bb0:	e0bffb17 	ldw	r2,-20(fp)
   12bb4:	10800017 	ldw	r2,0(r2)
   12bb8:	10800417 	ldw	r2,16(r2)
   12bbc:	e13ffb17 	ldw	r4,-20(fp)
   12bc0:	103ee83a 	callr	r2
   12bc4:	e0bffe15 	stw	r2,-8(fp)
   12bc8:	00000106 	br	12bd0 <close+0x8c>
   12bcc:	e03ffe15 	stw	zero,-8(fp)
   12bd0:	e0bffe17 	ldw	r2,-8(fp)
   12bd4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   12bd8:	e13ffc17 	ldw	r4,-16(fp)
   12bdc:	00133880 	call	13388 <alt_release_fd>
    if (rval < 0)
   12be0:	e0bffa17 	ldw	r2,-24(fp)
   12be4:	1004403a 	cmpge	r2,r2,zero
   12be8:	1000071e 	bne	r2,zero,12c08 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   12bec:	0012c400 	call	12c40 <alt_get_errno>
   12bf0:	e0fffa17 	ldw	r3,-24(fp)
   12bf4:	00c7c83a 	sub	r3,zero,r3
   12bf8:	10c00015 	stw	r3,0(r2)
      return -1;
   12bfc:	00bfffc4 	movi	r2,-1
   12c00:	e0bffd15 	stw	r2,-12(fp)
   12c04:	00000806 	br	12c28 <close+0xe4>
    }
    return 0;
   12c08:	e03ffd15 	stw	zero,-12(fp)
   12c0c:	00000606 	br	12c28 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12c10:	0012c400 	call	12c40 <alt_get_errno>
   12c14:	1007883a 	mov	r3,r2
   12c18:	00801444 	movi	r2,81
   12c1c:	18800015 	stw	r2,0(r3)
    return -1;
   12c20:	00bfffc4 	movi	r2,-1
   12c24:	e0bffd15 	stw	r2,-12(fp)
   12c28:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   12c2c:	e037883a 	mov	sp,fp
   12c30:	dfc00117 	ldw	ra,4(sp)
   12c34:	df000017 	ldw	fp,0(sp)
   12c38:	dec00204 	addi	sp,sp,8
   12c3c:	f800283a 	ret

00012c40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12c40:	defffd04 	addi	sp,sp,-12
   12c44:	dfc00215 	stw	ra,8(sp)
   12c48:	df000115 	stw	fp,4(sp)
   12c4c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   12c50:	00800074 	movhi	r2,1
   12c54:	109bd004 	addi	r2,r2,28480
   12c58:	10800017 	ldw	r2,0(r2)
   12c5c:	1005003a 	cmpeq	r2,r2,zero
   12c60:	1000061e 	bne	r2,zero,12c7c <alt_get_errno+0x3c>
   12c64:	00800074 	movhi	r2,1
   12c68:	109bd004 	addi	r2,r2,28480
   12c6c:	10800017 	ldw	r2,0(r2)
   12c70:	103ee83a 	callr	r2
   12c74:	e0bfff15 	stw	r2,-4(fp)
   12c78:	00000306 	br	12c88 <alt_get_errno+0x48>
   12c7c:	008000b4 	movhi	r2,2
   12c80:	10a26a04 	addi	r2,r2,-30296
   12c84:	e0bfff15 	stw	r2,-4(fp)
   12c88:	e0bfff17 	ldw	r2,-4(fp)
}
   12c8c:	e037883a 	mov	sp,fp
   12c90:	dfc00117 	ldw	ra,4(sp)
   12c94:	df000017 	ldw	fp,0(sp)
   12c98:	dec00204 	addi	sp,sp,8
   12c9c:	f800283a 	ret

00012ca0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   12ca0:	defffc04 	addi	sp,sp,-16
   12ca4:	df000315 	stw	fp,12(sp)
   12ca8:	df000304 	addi	fp,sp,12
   12cac:	e13ffd15 	stw	r4,-12(fp)
   12cb0:	e17ffe15 	stw	r5,-8(fp)
   12cb4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   12cb8:	e0bfff17 	ldw	r2,-4(fp)
}
   12cbc:	e037883a 	mov	sp,fp
   12cc0:	df000017 	ldw	fp,0(sp)
   12cc4:	dec00104 	addi	sp,sp,4
   12cc8:	f800283a 	ret

00012ccc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   12ccc:	defff904 	addi	sp,sp,-28
   12cd0:	dfc00615 	stw	ra,24(sp)
   12cd4:	df000515 	stw	fp,20(sp)
   12cd8:	df000504 	addi	fp,sp,20
   12cdc:	e13ffc15 	stw	r4,-16(fp)
   12ce0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12ce4:	e0bffc17 	ldw	r2,-16(fp)
   12ce8:	1004803a 	cmplt	r2,r2,zero
   12cec:	1000081e 	bne	r2,zero,12d10 <fstat+0x44>
   12cf0:	e0bffc17 	ldw	r2,-16(fp)
   12cf4:	10800324 	muli	r2,r2,12
   12cf8:	1007883a 	mov	r3,r2
   12cfc:	00800074 	movhi	r2,1
   12d00:	10974f04 	addi	r2,r2,23868
   12d04:	1887883a 	add	r3,r3,r2
   12d08:	e0ffff15 	stw	r3,-4(fp)
   12d0c:	00000106 	br	12d14 <fstat+0x48>
   12d10:	e03fff15 	stw	zero,-4(fp)
   12d14:	e0bfff17 	ldw	r2,-4(fp)
   12d18:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12d1c:	e0bffb17 	ldw	r2,-20(fp)
   12d20:	1005003a 	cmpeq	r2,r2,zero
   12d24:	1000121e 	bne	r2,zero,12d70 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   12d28:	e0bffb17 	ldw	r2,-20(fp)
   12d2c:	10800017 	ldw	r2,0(r2)
   12d30:	10800817 	ldw	r2,32(r2)
   12d34:	1005003a 	cmpeq	r2,r2,zero
   12d38:	1000081e 	bne	r2,zero,12d5c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   12d3c:	e0bffb17 	ldw	r2,-20(fp)
   12d40:	10800017 	ldw	r2,0(r2)
   12d44:	10800817 	ldw	r2,32(r2)
   12d48:	e13ffb17 	ldw	r4,-20(fp)
   12d4c:	e17ffd17 	ldw	r5,-12(fp)
   12d50:	103ee83a 	callr	r2
   12d54:	e0bffe15 	stw	r2,-8(fp)
   12d58:	00000b06 	br	12d88 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   12d5c:	e0fffd17 	ldw	r3,-12(fp)
   12d60:	00880004 	movi	r2,8192
   12d64:	18800115 	stw	r2,4(r3)
      return 0;
   12d68:	e03ffe15 	stw	zero,-8(fp)
   12d6c:	00000606 	br	12d88 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12d70:	0012da00 	call	12da0 <alt_get_errno>
   12d74:	1007883a 	mov	r3,r2
   12d78:	00801444 	movi	r2,81
   12d7c:	18800015 	stw	r2,0(r3)
    return -1;
   12d80:	00bfffc4 	movi	r2,-1
   12d84:	e0bffe15 	stw	r2,-8(fp)
   12d88:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   12d8c:	e037883a 	mov	sp,fp
   12d90:	dfc00117 	ldw	ra,4(sp)
   12d94:	df000017 	ldw	fp,0(sp)
   12d98:	dec00204 	addi	sp,sp,8
   12d9c:	f800283a 	ret

00012da0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12da0:	defffd04 	addi	sp,sp,-12
   12da4:	dfc00215 	stw	ra,8(sp)
   12da8:	df000115 	stw	fp,4(sp)
   12dac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   12db0:	00800074 	movhi	r2,1
   12db4:	109bd004 	addi	r2,r2,28480
   12db8:	10800017 	ldw	r2,0(r2)
   12dbc:	1005003a 	cmpeq	r2,r2,zero
   12dc0:	1000061e 	bne	r2,zero,12ddc <alt_get_errno+0x3c>
   12dc4:	00800074 	movhi	r2,1
   12dc8:	109bd004 	addi	r2,r2,28480
   12dcc:	10800017 	ldw	r2,0(r2)
   12dd0:	103ee83a 	callr	r2
   12dd4:	e0bfff15 	stw	r2,-4(fp)
   12dd8:	00000306 	br	12de8 <alt_get_errno+0x48>
   12ddc:	008000b4 	movhi	r2,2
   12de0:	10a26a04 	addi	r2,r2,-30296
   12de4:	e0bfff15 	stw	r2,-4(fp)
   12de8:	e0bfff17 	ldw	r2,-4(fp)
}
   12dec:	e037883a 	mov	sp,fp
   12df0:	dfc00117 	ldw	ra,4(sp)
   12df4:	df000017 	ldw	fp,0(sp)
   12df8:	dec00204 	addi	sp,sp,8
   12dfc:	f800283a 	ret

00012e00 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   12e00:	deffeb04 	addi	sp,sp,-84
   12e04:	dfc01415 	stw	ra,80(sp)
   12e08:	df001315 	stw	fp,76(sp)
   12e0c:	df001304 	addi	fp,sp,76
   12e10:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12e14:	e0bffd17 	ldw	r2,-12(fp)
   12e18:	1004803a 	cmplt	r2,r2,zero
   12e1c:	1000081e 	bne	r2,zero,12e40 <isatty+0x40>
   12e20:	e0bffd17 	ldw	r2,-12(fp)
   12e24:	10800324 	muli	r2,r2,12
   12e28:	1007883a 	mov	r3,r2
   12e2c:	00800074 	movhi	r2,1
   12e30:	10974f04 	addi	r2,r2,23868
   12e34:	1887883a 	add	r3,r3,r2
   12e38:	e0ffff15 	stw	r3,-4(fp)
   12e3c:	00000106 	br	12e44 <isatty+0x44>
   12e40:	e03fff15 	stw	zero,-4(fp)
   12e44:	e0bfff17 	ldw	r2,-4(fp)
   12e48:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   12e4c:	e0bfed17 	ldw	r2,-76(fp)
   12e50:	1005003a 	cmpeq	r2,r2,zero
   12e54:	10000f1e 	bne	r2,zero,12e94 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   12e58:	e0bfed17 	ldw	r2,-76(fp)
   12e5c:	10800017 	ldw	r2,0(r2)
   12e60:	10800817 	ldw	r2,32(r2)
   12e64:	1004c03a 	cmpne	r2,r2,zero
   12e68:	1000031e 	bne	r2,zero,12e78 <isatty+0x78>
    {
      return 1;
   12e6c:	00800044 	movi	r2,1
   12e70:	e0bffe15 	stw	r2,-8(fp)
   12e74:	00000c06 	br	12ea8 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   12e78:	e17fee04 	addi	r5,fp,-72
   12e7c:	e13ffd17 	ldw	r4,-12(fp)
   12e80:	0012ccc0 	call	12ccc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   12e84:	e0bfef17 	ldw	r2,-68(fp)
   12e88:	10880020 	cmpeqi	r2,r2,8192
   12e8c:	e0bffe15 	stw	r2,-8(fp)
   12e90:	00000506 	br	12ea8 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12e94:	0012ec00 	call	12ec0 <alt_get_errno>
   12e98:	1007883a 	mov	r3,r2
   12e9c:	00801444 	movi	r2,81
   12ea0:	18800015 	stw	r2,0(r3)
    return 0;
   12ea4:	e03ffe15 	stw	zero,-8(fp)
   12ea8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   12eac:	e037883a 	mov	sp,fp
   12eb0:	dfc00117 	ldw	ra,4(sp)
   12eb4:	df000017 	ldw	fp,0(sp)
   12eb8:	dec00204 	addi	sp,sp,8
   12ebc:	f800283a 	ret

00012ec0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12ec0:	defffd04 	addi	sp,sp,-12
   12ec4:	dfc00215 	stw	ra,8(sp)
   12ec8:	df000115 	stw	fp,4(sp)
   12ecc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   12ed0:	00800074 	movhi	r2,1
   12ed4:	109bd004 	addi	r2,r2,28480
   12ed8:	10800017 	ldw	r2,0(r2)
   12edc:	1005003a 	cmpeq	r2,r2,zero
   12ee0:	1000061e 	bne	r2,zero,12efc <alt_get_errno+0x3c>
   12ee4:	00800074 	movhi	r2,1
   12ee8:	109bd004 	addi	r2,r2,28480
   12eec:	10800017 	ldw	r2,0(r2)
   12ef0:	103ee83a 	callr	r2
   12ef4:	e0bfff15 	stw	r2,-4(fp)
   12ef8:	00000306 	br	12f08 <alt_get_errno+0x48>
   12efc:	008000b4 	movhi	r2,2
   12f00:	10a26a04 	addi	r2,r2,-30296
   12f04:	e0bfff15 	stw	r2,-4(fp)
   12f08:	e0bfff17 	ldw	r2,-4(fp)
}
   12f0c:	e037883a 	mov	sp,fp
   12f10:	dfc00117 	ldw	ra,4(sp)
   12f14:	df000017 	ldw	fp,0(sp)
   12f18:	dec00204 	addi	sp,sp,8
   12f1c:	f800283a 	ret

00012f20 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12f20:	defffe04 	addi	sp,sp,-8
   12f24:	dfc00115 	stw	ra,4(sp)
   12f28:	df000015 	stw	fp,0(sp)
   12f2c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   12f30:	01000074 	movhi	r4,1
   12f34:	211bd504 	addi	r4,r4,28500
   12f38:	01400074 	movhi	r5,1
   12f3c:	29554304 	addi	r5,r5,21772
   12f40:	01800074 	movhi	r6,1
   12f44:	319bd504 	addi	r6,r6,28500
   12f48:	0012fa00 	call	12fa0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   12f4c:	01000074 	movhi	r4,1
   12f50:	21000804 	addi	r4,r4,32
   12f54:	01400074 	movhi	r5,1
   12f58:	29400804 	addi	r5,r5,32
   12f5c:	01800074 	movhi	r6,1
   12f60:	31806d04 	addi	r6,r6,436
   12f64:	0012fa00 	call	12fa0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   12f68:	01000074 	movhi	r4,1
   12f6c:	21152f04 	addi	r4,r4,21692
   12f70:	01400074 	movhi	r5,1
   12f74:	29552f04 	addi	r5,r5,21692
   12f78:	01800074 	movhi	r6,1
   12f7c:	31954304 	addi	r6,r6,21772
   12f80:	0012fa00 	call	12fa0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   12f84:	00142d40 	call	142d4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   12f88:	00144f40 	call	144f4 <alt_icache_flush_all>
}
   12f8c:	e037883a 	mov	sp,fp
   12f90:	dfc00117 	ldw	ra,4(sp)
   12f94:	df000017 	ldw	fp,0(sp)
   12f98:	dec00204 	addi	sp,sp,8
   12f9c:	f800283a 	ret

00012fa0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   12fa0:	defffc04 	addi	sp,sp,-16
   12fa4:	df000315 	stw	fp,12(sp)
   12fa8:	df000304 	addi	fp,sp,12
   12fac:	e13ffd15 	stw	r4,-12(fp)
   12fb0:	e17ffe15 	stw	r5,-8(fp)
   12fb4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   12fb8:	e0fffe17 	ldw	r3,-8(fp)
   12fbc:	e0bffd17 	ldw	r2,-12(fp)
   12fc0:	18800e26 	beq	r3,r2,12ffc <alt_load_section+0x5c>
  {
    while( to != end )
   12fc4:	00000a06 	br	12ff0 <alt_load_section+0x50>
    {
      *to++ = *from++;
   12fc8:	e0bffd17 	ldw	r2,-12(fp)
   12fcc:	10c00017 	ldw	r3,0(r2)
   12fd0:	e0bffe17 	ldw	r2,-8(fp)
   12fd4:	10c00015 	stw	r3,0(r2)
   12fd8:	e0bffe17 	ldw	r2,-8(fp)
   12fdc:	10800104 	addi	r2,r2,4
   12fe0:	e0bffe15 	stw	r2,-8(fp)
   12fe4:	e0bffd17 	ldw	r2,-12(fp)
   12fe8:	10800104 	addi	r2,r2,4
   12fec:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   12ff0:	e0fffe17 	ldw	r3,-8(fp)
   12ff4:	e0bfff17 	ldw	r2,-4(fp)
   12ff8:	18bff31e 	bne	r3,r2,12fc8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   12ffc:	e037883a 	mov	sp,fp
   13000:	df000017 	ldw	fp,0(sp)
   13004:	dec00104 	addi	sp,sp,4
   13008:	f800283a 	ret

0001300c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1300c:	defff804 	addi	sp,sp,-32
   13010:	dfc00715 	stw	ra,28(sp)
   13014:	df000615 	stw	fp,24(sp)
   13018:	df000604 	addi	fp,sp,24
   1301c:	e13ffc15 	stw	r4,-16(fp)
   13020:	e17ffd15 	stw	r5,-12(fp)
   13024:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   13028:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1302c:	e0bffc17 	ldw	r2,-16(fp)
   13030:	1004803a 	cmplt	r2,r2,zero
   13034:	1000081e 	bne	r2,zero,13058 <lseek+0x4c>
   13038:	e0bffc17 	ldw	r2,-16(fp)
   1303c:	10800324 	muli	r2,r2,12
   13040:	1007883a 	mov	r3,r2
   13044:	00800074 	movhi	r2,1
   13048:	10974f04 	addi	r2,r2,23868
   1304c:	1887883a 	add	r3,r3,r2
   13050:	e0ffff15 	stw	r3,-4(fp)
   13054:	00000106 	br	1305c <lseek+0x50>
   13058:	e03fff15 	stw	zero,-4(fp)
   1305c:	e0bfff17 	ldw	r2,-4(fp)
   13060:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   13064:	e0bffb17 	ldw	r2,-20(fp)
   13068:	1005003a 	cmpeq	r2,r2,zero
   1306c:	1000111e 	bne	r2,zero,130b4 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   13070:	e0bffb17 	ldw	r2,-20(fp)
   13074:	10800017 	ldw	r2,0(r2)
   13078:	10800717 	ldw	r2,28(r2)
   1307c:	1005003a 	cmpeq	r2,r2,zero
   13080:	1000091e 	bne	r2,zero,130a8 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   13084:	e0bffb17 	ldw	r2,-20(fp)
   13088:	10800017 	ldw	r2,0(r2)
   1308c:	10800717 	ldw	r2,28(r2)
   13090:	e13ffb17 	ldw	r4,-20(fp)
   13094:	e17ffd17 	ldw	r5,-12(fp)
   13098:	e1bffe17 	ldw	r6,-8(fp)
   1309c:	103ee83a 	callr	r2
   130a0:	e0bffa15 	stw	r2,-24(fp)
   130a4:	00000506 	br	130bc <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   130a8:	00bfde84 	movi	r2,-134
   130ac:	e0bffa15 	stw	r2,-24(fp)
   130b0:	00000206 	br	130bc <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   130b4:	00bfebc4 	movi	r2,-81
   130b8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   130bc:	e0bffa17 	ldw	r2,-24(fp)
   130c0:	1004403a 	cmpge	r2,r2,zero
   130c4:	1000071e 	bne	r2,zero,130e4 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   130c8:	00130fc0 	call	130fc <alt_get_errno>
   130cc:	1007883a 	mov	r3,r2
   130d0:	e0bffa17 	ldw	r2,-24(fp)
   130d4:	0085c83a 	sub	r2,zero,r2
   130d8:	18800015 	stw	r2,0(r3)
    rc = -1;
   130dc:	00bfffc4 	movi	r2,-1
   130e0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   130e4:	e0bffa17 	ldw	r2,-24(fp)
}
   130e8:	e037883a 	mov	sp,fp
   130ec:	dfc00117 	ldw	ra,4(sp)
   130f0:	df000017 	ldw	fp,0(sp)
   130f4:	dec00204 	addi	sp,sp,8
   130f8:	f800283a 	ret

000130fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   130fc:	defffd04 	addi	sp,sp,-12
   13100:	dfc00215 	stw	ra,8(sp)
   13104:	df000115 	stw	fp,4(sp)
   13108:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1310c:	00800074 	movhi	r2,1
   13110:	109bd004 	addi	r2,r2,28480
   13114:	10800017 	ldw	r2,0(r2)
   13118:	1005003a 	cmpeq	r2,r2,zero
   1311c:	1000061e 	bne	r2,zero,13138 <alt_get_errno+0x3c>
   13120:	00800074 	movhi	r2,1
   13124:	109bd004 	addi	r2,r2,28480
   13128:	10800017 	ldw	r2,0(r2)
   1312c:	103ee83a 	callr	r2
   13130:	e0bfff15 	stw	r2,-4(fp)
   13134:	00000306 	br	13144 <alt_get_errno+0x48>
   13138:	008000b4 	movhi	r2,2
   1313c:	10a26a04 	addi	r2,r2,-30296
   13140:	e0bfff15 	stw	r2,-4(fp)
   13144:	e0bfff17 	ldw	r2,-4(fp)
}
   13148:	e037883a 	mov	sp,fp
   1314c:	dfc00117 	ldw	ra,4(sp)
   13150:	df000017 	ldw	fp,0(sp)
   13154:	dec00204 	addi	sp,sp,8
   13158:	f800283a 	ret

0001315c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1315c:	defffd04 	addi	sp,sp,-12
   13160:	dfc00215 	stw	ra,8(sp)
   13164:	df000115 	stw	fp,4(sp)
   13168:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1316c:	0009883a 	mov	r4,zero
   13170:	00136240 	call	13624 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13174:	00136580 	call	13658 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13178:	01000074 	movhi	r4,1
   1317c:	21153904 	addi	r4,r4,21732
   13180:	01400074 	movhi	r5,1
   13184:	29553904 	addi	r5,r5,21732
   13188:	01800074 	movhi	r6,1
   1318c:	31953904 	addi	r6,r6,21732
   13190:	00148b40 	call	148b4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13194:	001442c0 	call	1442c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13198:	01000074 	movhi	r4,1
   1319c:	21112404 	addi	r4,r4,17552
   131a0:	00150b00 	call	150b0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   131a4:	d126a417 	ldw	r4,-25968(gp)
   131a8:	d166a517 	ldw	r5,-25964(gp)
   131ac:	d1a6a617 	ldw	r6,-25960(gp)
   131b0:	00102000 	call	10200 <main>
   131b4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   131b8:	01000044 	movi	r4,1
   131bc:	0012b440 	call	12b44 <close>
  exit (result);
   131c0:	e13fff17 	ldw	r4,-4(fp)
   131c4:	00150c40 	call	150c4 <exit>

000131c8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   131c8:	defffe04 	addi	sp,sp,-8
   131cc:	df000115 	stw	fp,4(sp)
   131d0:	df000104 	addi	fp,sp,4
   131d4:	e13fff15 	stw	r4,-4(fp)
}
   131d8:	e037883a 	mov	sp,fp
   131dc:	df000017 	ldw	fp,0(sp)
   131e0:	dec00104 	addi	sp,sp,4
   131e4:	f800283a 	ret

000131e8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   131e8:	defffe04 	addi	sp,sp,-8
   131ec:	df000115 	stw	fp,4(sp)
   131f0:	df000104 	addi	fp,sp,4
   131f4:	e13fff15 	stw	r4,-4(fp)
}
   131f8:	e037883a 	mov	sp,fp
   131fc:	df000017 	ldw	fp,0(sp)
   13200:	dec00104 	addi	sp,sp,4
   13204:	f800283a 	ret

00013208 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   13208:	defff704 	addi	sp,sp,-36
   1320c:	dfc00815 	stw	ra,32(sp)
   13210:	df000715 	stw	fp,28(sp)
   13214:	df000704 	addi	fp,sp,28
   13218:	e13ffb15 	stw	r4,-20(fp)
   1321c:	e17ffc15 	stw	r5,-16(fp)
   13220:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13224:	e0bffb17 	ldw	r2,-20(fp)
   13228:	1004803a 	cmplt	r2,r2,zero
   1322c:	1000081e 	bne	r2,zero,13250 <read+0x48>
   13230:	e0bffb17 	ldw	r2,-20(fp)
   13234:	10800324 	muli	r2,r2,12
   13238:	1007883a 	mov	r3,r2
   1323c:	00800074 	movhi	r2,1
   13240:	10974f04 	addi	r2,r2,23868
   13244:	1887883a 	add	r3,r3,r2
   13248:	e0ffff15 	stw	r3,-4(fp)
   1324c:	00000106 	br	13254 <read+0x4c>
   13250:	e03fff15 	stw	zero,-4(fp)
   13254:	e0bfff17 	ldw	r2,-4(fp)
   13258:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   1325c:	e0bffa17 	ldw	r2,-24(fp)
   13260:	1005003a 	cmpeq	r2,r2,zero
   13264:	1000241e 	bne	r2,zero,132f8 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13268:	e0bffa17 	ldw	r2,-24(fp)
   1326c:	10800217 	ldw	r2,8(r2)
   13270:	108000cc 	andi	r2,r2,3
   13274:	10800060 	cmpeqi	r2,r2,1
   13278:	10001a1e 	bne	r2,zero,132e4 <read+0xdc>
   1327c:	e0bffa17 	ldw	r2,-24(fp)
   13280:	10800017 	ldw	r2,0(r2)
   13284:	10800517 	ldw	r2,20(r2)
   13288:	1005003a 	cmpeq	r2,r2,zero
   1328c:	1000151e 	bne	r2,zero,132e4 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13290:	e0bffa17 	ldw	r2,-24(fp)
   13294:	10800017 	ldw	r2,0(r2)
   13298:	10800517 	ldw	r2,20(r2)
   1329c:	e17ffc17 	ldw	r5,-16(fp)
   132a0:	e1bffd17 	ldw	r6,-12(fp)
   132a4:	e13ffa17 	ldw	r4,-24(fp)
   132a8:	103ee83a 	callr	r2
   132ac:	e0bff915 	stw	r2,-28(fp)
   132b0:	e0bff917 	ldw	r2,-28(fp)
   132b4:	1004403a 	cmpge	r2,r2,zero
   132b8:	1000071e 	bne	r2,zero,132d8 <read+0xd0>
        {
          ALT_ERRNO = -rval;
   132bc:	00133280 	call	13328 <alt_get_errno>
   132c0:	e0fff917 	ldw	r3,-28(fp)
   132c4:	00c7c83a 	sub	r3,zero,r3
   132c8:	10c00015 	stw	r3,0(r2)
          return -1;
   132cc:	00bfffc4 	movi	r2,-1
   132d0:	e0bffe15 	stw	r2,-8(fp)
   132d4:	00000e06 	br	13310 <read+0x108>
        }
        return rval;
   132d8:	e0bff917 	ldw	r2,-28(fp)
   132dc:	e0bffe15 	stw	r2,-8(fp)
   132e0:	00000b06 	br	13310 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   132e4:	00133280 	call	13328 <alt_get_errno>
   132e8:	1007883a 	mov	r3,r2
   132ec:	00800344 	movi	r2,13
   132f0:	18800015 	stw	r2,0(r3)
   132f4:	00000406 	br	13308 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   132f8:	00133280 	call	13328 <alt_get_errno>
   132fc:	1007883a 	mov	r3,r2
   13300:	00801444 	movi	r2,81
   13304:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13308:	00bfffc4 	movi	r2,-1
   1330c:	e0bffe15 	stw	r2,-8(fp)
   13310:	e0bffe17 	ldw	r2,-8(fp)
}
   13314:	e037883a 	mov	sp,fp
   13318:	dfc00117 	ldw	ra,4(sp)
   1331c:	df000017 	ldw	fp,0(sp)
   13320:	dec00204 	addi	sp,sp,8
   13324:	f800283a 	ret

00013328 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13328:	defffd04 	addi	sp,sp,-12
   1332c:	dfc00215 	stw	ra,8(sp)
   13330:	df000115 	stw	fp,4(sp)
   13334:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   13338:	00800074 	movhi	r2,1
   1333c:	109bd004 	addi	r2,r2,28480
   13340:	10800017 	ldw	r2,0(r2)
   13344:	1005003a 	cmpeq	r2,r2,zero
   13348:	1000061e 	bne	r2,zero,13364 <alt_get_errno+0x3c>
   1334c:	00800074 	movhi	r2,1
   13350:	109bd004 	addi	r2,r2,28480
   13354:	10800017 	ldw	r2,0(r2)
   13358:	103ee83a 	callr	r2
   1335c:	e0bfff15 	stw	r2,-4(fp)
   13360:	00000306 	br	13370 <alt_get_errno+0x48>
   13364:	008000b4 	movhi	r2,2
   13368:	10a26a04 	addi	r2,r2,-30296
   1336c:	e0bfff15 	stw	r2,-4(fp)
   13370:	e0bfff17 	ldw	r2,-4(fp)
}
   13374:	e037883a 	mov	sp,fp
   13378:	dfc00117 	ldw	ra,4(sp)
   1337c:	df000017 	ldw	fp,0(sp)
   13380:	dec00204 	addi	sp,sp,8
   13384:	f800283a 	ret

00013388 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13388:	defffe04 	addi	sp,sp,-8
   1338c:	df000115 	stw	fp,4(sp)
   13390:	df000104 	addi	fp,sp,4
   13394:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   13398:	e0bfff17 	ldw	r2,-4(fp)
   1339c:	108000d0 	cmplti	r2,r2,3
   133a0:	10000d1e 	bne	r2,zero,133d8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   133a4:	e0bfff17 	ldw	r2,-4(fp)
   133a8:	00c00074 	movhi	r3,1
   133ac:	18d74f04 	addi	r3,r3,23868
   133b0:	10800324 	muli	r2,r2,12
   133b4:	10c5883a 	add	r2,r2,r3
   133b8:	10800204 	addi	r2,r2,8
   133bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   133c0:	e0bfff17 	ldw	r2,-4(fp)
   133c4:	00c00074 	movhi	r3,1
   133c8:	18d74f04 	addi	r3,r3,23868
   133cc:	10800324 	muli	r2,r2,12
   133d0:	10c5883a 	add	r2,r2,r3
   133d4:	10000015 	stw	zero,0(r2)
  }
}
   133d8:	e037883a 	mov	sp,fp
   133dc:	df000017 	ldw	fp,0(sp)
   133e0:	dec00104 	addi	sp,sp,4
   133e4:	f800283a 	ret

000133e8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   133e8:	defff804 	addi	sp,sp,-32
   133ec:	df000715 	stw	fp,28(sp)
   133f0:	df000704 	addi	fp,sp,28
   133f4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   133f8:	0005303a 	rdctl	r2,status
   133fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13400:	e0fffb17 	ldw	r3,-20(fp)
   13404:	00bfff84 	movi	r2,-2
   13408:	1884703a 	and	r2,r3,r2
   1340c:	1001703a 	wrctl	status,r2
  
  return context;
   13410:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13414:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13418:	d0a00a17 	ldw	r2,-32728(gp)
   1341c:	10c000c4 	addi	r3,r2,3
   13420:	00bfff04 	movi	r2,-4
   13424:	1884703a 	and	r2,r3,r2
   13428:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1342c:	d0e00a17 	ldw	r3,-32728(gp)
   13430:	e0bffe17 	ldw	r2,-8(fp)
   13434:	1887883a 	add	r3,r3,r2
   13438:	008000b4 	movhi	r2,2
   1343c:	10a80004 	addi	r2,r2,-24576
   13440:	10c0072e 	bgeu	r2,r3,13460 <sbrk+0x78>
   13444:	e0bffd17 	ldw	r2,-12(fp)
   13448:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1344c:	e0bffa17 	ldw	r2,-24(fp)
   13450:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13454:	00bfffc4 	movi	r2,-1
   13458:	e0bfff15 	stw	r2,-4(fp)
   1345c:	00000c06 	br	13490 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   13460:	d0a00a17 	ldw	r2,-32728(gp)
   13464:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   13468:	d0e00a17 	ldw	r3,-32728(gp)
   1346c:	e0bffe17 	ldw	r2,-8(fp)
   13470:	1885883a 	add	r2,r3,r2
   13474:	d0a00a15 	stw	r2,-32728(gp)
   13478:	e0bffd17 	ldw	r2,-12(fp)
   1347c:	e0bff915 	stw	r2,-28(fp)
   13480:	e0bff917 	ldw	r2,-28(fp)
   13484:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   13488:	e0bffc17 	ldw	r2,-16(fp)
   1348c:	e0bfff15 	stw	r2,-4(fp)
   13490:	e0bfff17 	ldw	r2,-4(fp)
} 
   13494:	e037883a 	mov	sp,fp
   13498:	df000017 	ldw	fp,0(sp)
   1349c:	dec00104 	addi	sp,sp,4
   134a0:	f800283a 	ret

000134a4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   134a4:	defff704 	addi	sp,sp,-36
   134a8:	dfc00815 	stw	ra,32(sp)
   134ac:	df000715 	stw	fp,28(sp)
   134b0:	df000704 	addi	fp,sp,28
   134b4:	e13ffb15 	stw	r4,-20(fp)
   134b8:	e17ffc15 	stw	r5,-16(fp)
   134bc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   134c0:	e0bffb17 	ldw	r2,-20(fp)
   134c4:	1004803a 	cmplt	r2,r2,zero
   134c8:	1000081e 	bne	r2,zero,134ec <write+0x48>
   134cc:	e0bffb17 	ldw	r2,-20(fp)
   134d0:	10800324 	muli	r2,r2,12
   134d4:	1007883a 	mov	r3,r2
   134d8:	00800074 	movhi	r2,1
   134dc:	10974f04 	addi	r2,r2,23868
   134e0:	1887883a 	add	r3,r3,r2
   134e4:	e0ffff15 	stw	r3,-4(fp)
   134e8:	00000106 	br	134f0 <write+0x4c>
   134ec:	e03fff15 	stw	zero,-4(fp)
   134f0:	e0bfff17 	ldw	r2,-4(fp)
   134f4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   134f8:	e0bffa17 	ldw	r2,-24(fp)
   134fc:	1005003a 	cmpeq	r2,r2,zero
   13500:	1000241e 	bne	r2,zero,13594 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13504:	e0bffa17 	ldw	r2,-24(fp)
   13508:	10800217 	ldw	r2,8(r2)
   1350c:	108000cc 	andi	r2,r2,3
   13510:	1005003a 	cmpeq	r2,r2,zero
   13514:	10001a1e 	bne	r2,zero,13580 <write+0xdc>
   13518:	e0bffa17 	ldw	r2,-24(fp)
   1351c:	10800017 	ldw	r2,0(r2)
   13520:	10800617 	ldw	r2,24(r2)
   13524:	1005003a 	cmpeq	r2,r2,zero
   13528:	1000151e 	bne	r2,zero,13580 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1352c:	e0bffa17 	ldw	r2,-24(fp)
   13530:	10800017 	ldw	r2,0(r2)
   13534:	10800617 	ldw	r2,24(r2)
   13538:	e17ffc17 	ldw	r5,-16(fp)
   1353c:	e1bffd17 	ldw	r6,-12(fp)
   13540:	e13ffa17 	ldw	r4,-24(fp)
   13544:	103ee83a 	callr	r2
   13548:	e0bff915 	stw	r2,-28(fp)
   1354c:	e0bff917 	ldw	r2,-28(fp)
   13550:	1004403a 	cmpge	r2,r2,zero
   13554:	1000071e 	bne	r2,zero,13574 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   13558:	00135c40 	call	135c4 <alt_get_errno>
   1355c:	e0fff917 	ldw	r3,-28(fp)
   13560:	00c7c83a 	sub	r3,zero,r3
   13564:	10c00015 	stw	r3,0(r2)
        return -1;
   13568:	00bfffc4 	movi	r2,-1
   1356c:	e0bffe15 	stw	r2,-8(fp)
   13570:	00000e06 	br	135ac <write+0x108>
      }
      return rval;
   13574:	e0bff917 	ldw	r2,-28(fp)
   13578:	e0bffe15 	stw	r2,-8(fp)
   1357c:	00000b06 	br	135ac <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   13580:	00135c40 	call	135c4 <alt_get_errno>
   13584:	1007883a 	mov	r3,r2
   13588:	00800344 	movi	r2,13
   1358c:	18800015 	stw	r2,0(r3)
   13590:	00000406 	br	135a4 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   13594:	00135c40 	call	135c4 <alt_get_errno>
   13598:	1007883a 	mov	r3,r2
   1359c:	00801444 	movi	r2,81
   135a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   135a4:	00bfffc4 	movi	r2,-1
   135a8:	e0bffe15 	stw	r2,-8(fp)
   135ac:	e0bffe17 	ldw	r2,-8(fp)
}
   135b0:	e037883a 	mov	sp,fp
   135b4:	dfc00117 	ldw	ra,4(sp)
   135b8:	df000017 	ldw	fp,0(sp)
   135bc:	dec00204 	addi	sp,sp,8
   135c0:	f800283a 	ret

000135c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   135c4:	defffd04 	addi	sp,sp,-12
   135c8:	dfc00215 	stw	ra,8(sp)
   135cc:	df000115 	stw	fp,4(sp)
   135d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   135d4:	00800074 	movhi	r2,1
   135d8:	109bd004 	addi	r2,r2,28480
   135dc:	10800017 	ldw	r2,0(r2)
   135e0:	1005003a 	cmpeq	r2,r2,zero
   135e4:	1000061e 	bne	r2,zero,13600 <alt_get_errno+0x3c>
   135e8:	00800074 	movhi	r2,1
   135ec:	109bd004 	addi	r2,r2,28480
   135f0:	10800017 	ldw	r2,0(r2)
   135f4:	103ee83a 	callr	r2
   135f8:	e0bfff15 	stw	r2,-4(fp)
   135fc:	00000306 	br	1360c <alt_get_errno+0x48>
   13600:	008000b4 	movhi	r2,2
   13604:	10a26a04 	addi	r2,r2,-30296
   13608:	e0bfff15 	stw	r2,-4(fp)
   1360c:	e0bfff17 	ldw	r2,-4(fp)
}
   13610:	e037883a 	mov	sp,fp
   13614:	dfc00117 	ldw	ra,4(sp)
   13618:	df000017 	ldw	fp,0(sp)
   1361c:	dec00204 	addi	sp,sp,8
   13620:	f800283a 	ret

00013624 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13624:	defffd04 	addi	sp,sp,-12
   13628:	dfc00215 	stw	ra,8(sp)
   1362c:	df000115 	stw	fp,4(sp)
   13630:	df000104 	addi	fp,sp,4
   13634:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
   13638:	0014d940 	call	14d94 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1363c:	00800044 	movi	r2,1
   13640:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13644:	e037883a 	mov	sp,fp
   13648:	dfc00117 	ldw	ra,4(sp)
   1364c:	df000017 	ldw	fp,0(sp)
   13650:	dec00204 	addi	sp,sp,8
   13654:	f800283a 	ret

00013658 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13658:	defffe04 	addi	sp,sp,-8
   1365c:	dfc00115 	stw	ra,4(sp)
   13660:	df000015 	stw	fp,0(sp)
   13664:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   13668:	01000074 	movhi	r4,1
   1366c:	2117b904 	addi	r4,r4,24292
   13670:	000b883a 	mov	r5,zero
   13674:	000d883a 	mov	r6,zero
   13678:	001381c0 	call	1381c <altera_avalon_jtag_uart_init>
   1367c:	01000074 	movhi	r4,1
   13680:	2117af04 	addi	r4,r4,24252
   13684:	001369c0 	call	1369c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
   13688:	e037883a 	mov	sp,fp
   1368c:	dfc00117 	ldw	ra,4(sp)
   13690:	df000017 	ldw	fp,0(sp)
   13694:	dec00204 	addi	sp,sp,8
   13698:	f800283a 	ret

0001369c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1369c:	defffd04 	addi	sp,sp,-12
   136a0:	dfc00215 	stw	ra,8(sp)
   136a4:	df000115 	stw	fp,4(sp)
   136a8:	df000104 	addi	fp,sp,4
   136ac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   136b0:	e13fff17 	ldw	r4,-4(fp)
   136b4:	01400074 	movhi	r5,1
   136b8:	295bcd04 	addi	r5,r5,28468
   136bc:	00143180 	call	14318 <alt_dev_llist_insert>
}
   136c0:	e037883a 	mov	sp,fp
   136c4:	dfc00117 	ldw	ra,4(sp)
   136c8:	df000017 	ldw	fp,0(sp)
   136cc:	dec00204 	addi	sp,sp,8
   136d0:	f800283a 	ret

000136d4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   136d4:	defffa04 	addi	sp,sp,-24
   136d8:	dfc00515 	stw	ra,20(sp)
   136dc:	df000415 	stw	fp,16(sp)
   136e0:	df000404 	addi	fp,sp,16
   136e4:	e13ffd15 	stw	r4,-12(fp)
   136e8:	e17ffe15 	stw	r5,-8(fp)
   136ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   136f0:	e0bffd17 	ldw	r2,-12(fp)
   136f4:	10800017 	ldw	r2,0(r2)
   136f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   136fc:	e0bffc17 	ldw	r2,-16(fp)
   13700:	11000a04 	addi	r4,r2,40
   13704:	e0bffd17 	ldw	r2,-12(fp)
   13708:	11c00217 	ldw	r7,8(r2)
   1370c:	e17ffe17 	ldw	r5,-8(fp)
   13710:	e1bfff17 	ldw	r6,-4(fp)
   13714:	0013d1c0 	call	13d1c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13718:	e037883a 	mov	sp,fp
   1371c:	dfc00117 	ldw	ra,4(sp)
   13720:	df000017 	ldw	fp,0(sp)
   13724:	dec00204 	addi	sp,sp,8
   13728:	f800283a 	ret

0001372c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1372c:	defffa04 	addi	sp,sp,-24
   13730:	dfc00515 	stw	ra,20(sp)
   13734:	df000415 	stw	fp,16(sp)
   13738:	df000404 	addi	fp,sp,16
   1373c:	e13ffd15 	stw	r4,-12(fp)
   13740:	e17ffe15 	stw	r5,-8(fp)
   13744:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13748:	e0bffd17 	ldw	r2,-12(fp)
   1374c:	10800017 	ldw	r2,0(r2)
   13750:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13754:	e0bffc17 	ldw	r2,-16(fp)
   13758:	11000a04 	addi	r4,r2,40
   1375c:	e0bffd17 	ldw	r2,-12(fp)
   13760:	11c00217 	ldw	r7,8(r2)
   13764:	e17ffe17 	ldw	r5,-8(fp)
   13768:	e1bfff17 	ldw	r6,-4(fp)
   1376c:	0013f400 	call	13f40 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13770:	e037883a 	mov	sp,fp
   13774:	dfc00117 	ldw	ra,4(sp)
   13778:	df000017 	ldw	fp,0(sp)
   1377c:	dec00204 	addi	sp,sp,8
   13780:	f800283a 	ret

00013784 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   13784:	defffc04 	addi	sp,sp,-16
   13788:	dfc00315 	stw	ra,12(sp)
   1378c:	df000215 	stw	fp,8(sp)
   13790:	df000204 	addi	fp,sp,8
   13794:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13798:	e0bfff17 	ldw	r2,-4(fp)
   1379c:	10800017 	ldw	r2,0(r2)
   137a0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   137a4:	e0bffe17 	ldw	r2,-8(fp)
   137a8:	11000a04 	addi	r4,r2,40
   137ac:	e0bfff17 	ldw	r2,-4(fp)
   137b0:	11400217 	ldw	r5,8(r2)
   137b4:	0013bb40 	call	13bb4 <altera_avalon_jtag_uart_close>
}
   137b8:	e037883a 	mov	sp,fp
   137bc:	dfc00117 	ldw	ra,4(sp)
   137c0:	df000017 	ldw	fp,0(sp)
   137c4:	dec00204 	addi	sp,sp,8
   137c8:	f800283a 	ret

000137cc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   137cc:	defffa04 	addi	sp,sp,-24
   137d0:	dfc00515 	stw	ra,20(sp)
   137d4:	df000415 	stw	fp,16(sp)
   137d8:	df000404 	addi	fp,sp,16
   137dc:	e13ffd15 	stw	r4,-12(fp)
   137e0:	e17ffe15 	stw	r5,-8(fp)
   137e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   137e8:	e0bffd17 	ldw	r2,-12(fp)
   137ec:	10800017 	ldw	r2,0(r2)
   137f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   137f4:	e0bffc17 	ldw	r2,-16(fp)
   137f8:	11000a04 	addi	r4,r2,40
   137fc:	e17ffe17 	ldw	r5,-8(fp)
   13800:	e1bfff17 	ldw	r6,-4(fp)
   13804:	0013c280 	call	13c28 <altera_avalon_jtag_uart_ioctl>
}
   13808:	e037883a 	mov	sp,fp
   1380c:	dfc00117 	ldw	ra,4(sp)
   13810:	df000017 	ldw	fp,0(sp)
   13814:	dec00204 	addi	sp,sp,8
   13818:	f800283a 	ret

0001381c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1381c:	defffa04 	addi	sp,sp,-24
   13820:	dfc00515 	stw	ra,20(sp)
   13824:	df000415 	stw	fp,16(sp)
   13828:	df000404 	addi	fp,sp,16
   1382c:	e13ffd15 	stw	r4,-12(fp)
   13830:	e17ffe15 	stw	r5,-8(fp)
   13834:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13838:	e0fffd17 	ldw	r3,-12(fp)
   1383c:	00800044 	movi	r2,1
   13840:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   13844:	e0bffd17 	ldw	r2,-12(fp)
   13848:	10800017 	ldw	r2,0(r2)
   1384c:	11000104 	addi	r4,r2,4
   13850:	e0bffd17 	ldw	r2,-12(fp)
   13854:	10800817 	ldw	r2,32(r2)
   13858:	1007883a 	mov	r3,r2
   1385c:	2005883a 	mov	r2,r4
   13860:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   13864:	e13ffe17 	ldw	r4,-8(fp)
   13868:	e17fff17 	ldw	r5,-4(fp)
   1386c:	d8000015 	stw	zero,0(sp)
   13870:	01800074 	movhi	r6,1
   13874:	318e3704 	addi	r6,r6,14556
   13878:	e1fffd17 	ldw	r7,-12(fp)
   1387c:	00145240 	call	14524 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   13880:	e0bffd17 	ldw	r2,-12(fp)
   13884:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   13888:	e0bffd17 	ldw	r2,-12(fp)
   1388c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   13890:	008000b4 	movhi	r2,2
   13894:	10a26f04 	addi	r2,r2,-30276
   13898:	10800017 	ldw	r2,0(r2)
   1389c:	100b883a 	mov	r5,r2
   138a0:	01800074 	movhi	r6,1
   138a4:	318ec104 	addi	r6,r6,15108
   138a8:	e1fffd17 	ldw	r7,-12(fp)
   138ac:	00141800 	call	14180 <alt_alarm_start>
   138b0:	1004403a 	cmpge	r2,r2,zero
   138b4:	1000041e 	bne	r2,zero,138c8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   138b8:	e0fffd17 	ldw	r3,-12(fp)
   138bc:	00a00034 	movhi	r2,32768
   138c0:	10bfffc4 	addi	r2,r2,-1
   138c4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   138c8:	e037883a 	mov	sp,fp
   138cc:	dfc00117 	ldw	ra,4(sp)
   138d0:	df000017 	ldw	fp,0(sp)
   138d4:	dec00204 	addi	sp,sp,8
   138d8:	f800283a 	ret

000138dc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   138dc:	defff804 	addi	sp,sp,-32
   138e0:	df000715 	stw	fp,28(sp)
   138e4:	df000704 	addi	fp,sp,28
   138e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   138ec:	e0bfff17 	ldw	r2,-4(fp)
   138f0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   138f4:	e0bffe17 	ldw	r2,-8(fp)
   138f8:	10800017 	ldw	r2,0(r2)
   138fc:	e0bffd15 	stw	r2,-12(fp)
   13900:	00000006 	br	13904 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13904:	e0bffd17 	ldw	r2,-12(fp)
   13908:	10800104 	addi	r2,r2,4
   1390c:	10800037 	ldwio	r2,0(r2)
   13910:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   13914:	e0bffc17 	ldw	r2,-16(fp)
   13918:	1080c00c 	andi	r2,r2,768
   1391c:	1005003a 	cmpeq	r2,r2,zero
   13920:	1000741e 	bne	r2,zero,13af4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   13924:	e0bffc17 	ldw	r2,-16(fp)
   13928:	1080400c 	andi	r2,r2,256
   1392c:	1005003a 	cmpeq	r2,r2,zero
   13930:	1000351e 	bne	r2,zero,13a08 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   13934:	00800074 	movhi	r2,1
   13938:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1393c:	e0bffe17 	ldw	r2,-8(fp)
   13940:	10800a17 	ldw	r2,40(r2)
   13944:	10800044 	addi	r2,r2,1
   13948:	1081ffcc 	andi	r2,r2,2047
   1394c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   13950:	e0bffe17 	ldw	r2,-8(fp)
   13954:	10c00b17 	ldw	r3,44(r2)
   13958:	e0bffa17 	ldw	r2,-24(fp)
   1395c:	18801626 	beq	r3,r2,139b8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   13960:	e0bffd17 	ldw	r2,-12(fp)
   13964:	10800037 	ldwio	r2,0(r2)
   13968:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1396c:	e0bffb17 	ldw	r2,-20(fp)
   13970:	10a0000c 	andi	r2,r2,32768
   13974:	1005003a 	cmpeq	r2,r2,zero
   13978:	10000f1e 	bne	r2,zero,139b8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1397c:	e0bffe17 	ldw	r2,-8(fp)
   13980:	10c00a17 	ldw	r3,40(r2)
   13984:	e0bffb17 	ldw	r2,-20(fp)
   13988:	1009883a 	mov	r4,r2
   1398c:	e0bffe17 	ldw	r2,-8(fp)
   13990:	1885883a 	add	r2,r3,r2
   13994:	10800e04 	addi	r2,r2,56
   13998:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1399c:	e0bffe17 	ldw	r2,-8(fp)
   139a0:	10800a17 	ldw	r2,40(r2)
   139a4:	10800044 	addi	r2,r2,1
   139a8:	10c1ffcc 	andi	r3,r2,2047
   139ac:	e0bffe17 	ldw	r2,-8(fp)
   139b0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   139b4:	003fe106 	br	1393c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   139b8:	e0bffb17 	ldw	r2,-20(fp)
   139bc:	10bfffec 	andhi	r2,r2,65535
   139c0:	1005003a 	cmpeq	r2,r2,zero
   139c4:	1000101e 	bne	r2,zero,13a08 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   139c8:	e0bffe17 	ldw	r2,-8(fp)
   139cc:	10c00817 	ldw	r3,32(r2)
   139d0:	00bfff84 	movi	r2,-2
   139d4:	1886703a 	and	r3,r3,r2
   139d8:	e0bffe17 	ldw	r2,-8(fp)
   139dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   139e0:	e0bffd17 	ldw	r2,-12(fp)
   139e4:	11000104 	addi	r4,r2,4
   139e8:	e0bffe17 	ldw	r2,-8(fp)
   139ec:	10800817 	ldw	r2,32(r2)
   139f0:	1007883a 	mov	r3,r2
   139f4:	2005883a 	mov	r2,r4
   139f8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   139fc:	e0bffd17 	ldw	r2,-12(fp)
   13a00:	10800104 	addi	r2,r2,4
   13a04:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   13a08:	e0bffc17 	ldw	r2,-16(fp)
   13a0c:	1080800c 	andi	r2,r2,512
   13a10:	1005003a 	cmpeq	r2,r2,zero
   13a14:	103fbb1e 	bne	r2,zero,13904 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   13a18:	e0bffc17 	ldw	r2,-16(fp)
   13a1c:	10bfffec 	andhi	r2,r2,65535
   13a20:	1004d43a 	srli	r2,r2,16
   13a24:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   13a28:	00001506 	br	13a80 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   13a2c:	e13ffd17 	ldw	r4,-12(fp)
   13a30:	e0bffe17 	ldw	r2,-8(fp)
   13a34:	10c00d17 	ldw	r3,52(r2)
   13a38:	e0bffe17 	ldw	r2,-8(fp)
   13a3c:	1885883a 	add	r2,r3,r2
   13a40:	10820e04 	addi	r2,r2,2104
   13a44:	10800003 	ldbu	r2,0(r2)
   13a48:	10c03fcc 	andi	r3,r2,255
   13a4c:	18c0201c 	xori	r3,r3,128
   13a50:	18ffe004 	addi	r3,r3,-128
   13a54:	2005883a 	mov	r2,r4
   13a58:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13a5c:	e0bffe17 	ldw	r2,-8(fp)
   13a60:	10800d17 	ldw	r2,52(r2)
   13a64:	10800044 	addi	r2,r2,1
   13a68:	10c1ffcc 	andi	r3,r2,2047
   13a6c:	e0bffe17 	ldw	r2,-8(fp)
   13a70:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   13a74:	e0bff917 	ldw	r2,-28(fp)
   13a78:	10bfffc4 	addi	r2,r2,-1
   13a7c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   13a80:	e0bff917 	ldw	r2,-28(fp)
   13a84:	1005003a 	cmpeq	r2,r2,zero
   13a88:	1000051e 	bne	r2,zero,13aa0 <altera_avalon_jtag_uart_irq+0x1c4>
   13a8c:	e0bffe17 	ldw	r2,-8(fp)
   13a90:	10c00d17 	ldw	r3,52(r2)
   13a94:	e0bffe17 	ldw	r2,-8(fp)
   13a98:	10800c17 	ldw	r2,48(r2)
   13a9c:	18bfe31e 	bne	r3,r2,13a2c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   13aa0:	e0bff917 	ldw	r2,-28(fp)
   13aa4:	1005003a 	cmpeq	r2,r2,zero
   13aa8:	103f961e 	bne	r2,zero,13904 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13aac:	e0bffe17 	ldw	r2,-8(fp)
   13ab0:	10c00817 	ldw	r3,32(r2)
   13ab4:	00bfff44 	movi	r2,-3
   13ab8:	1886703a 	and	r3,r3,r2
   13abc:	e0bffe17 	ldw	r2,-8(fp)
   13ac0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13ac4:	e0bffe17 	ldw	r2,-8(fp)
   13ac8:	10800017 	ldw	r2,0(r2)
   13acc:	11000104 	addi	r4,r2,4
   13ad0:	e0bffe17 	ldw	r2,-8(fp)
   13ad4:	10800817 	ldw	r2,32(r2)
   13ad8:	1007883a 	mov	r3,r2
   13adc:	2005883a 	mov	r2,r4
   13ae0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13ae4:	e0bffd17 	ldw	r2,-12(fp)
   13ae8:	10800104 	addi	r2,r2,4
   13aec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   13af0:	003f8406 	br	13904 <altera_avalon_jtag_uart_irq+0x28>
}
   13af4:	e037883a 	mov	sp,fp
   13af8:	df000017 	ldw	fp,0(sp)
   13afc:	dec00104 	addi	sp,sp,4
   13b00:	f800283a 	ret

00013b04 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   13b04:	defffc04 	addi	sp,sp,-16
   13b08:	df000315 	stw	fp,12(sp)
   13b0c:	df000304 	addi	fp,sp,12
   13b10:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   13b14:	e0bfff17 	ldw	r2,-4(fp)
   13b18:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   13b1c:	e0bffe17 	ldw	r2,-8(fp)
   13b20:	10800017 	ldw	r2,0(r2)
   13b24:	10800104 	addi	r2,r2,4
   13b28:	10800037 	ldwio	r2,0(r2)
   13b2c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   13b30:	e0bffd17 	ldw	r2,-12(fp)
   13b34:	1081000c 	andi	r2,r2,1024
   13b38:	1005003a 	cmpeq	r2,r2,zero
   13b3c:	10000c1e 	bne	r2,zero,13b70 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   13b40:	e0bffe17 	ldw	r2,-8(fp)
   13b44:	10800017 	ldw	r2,0(r2)
   13b48:	11000104 	addi	r4,r2,4
   13b4c:	e0bffe17 	ldw	r2,-8(fp)
   13b50:	10800817 	ldw	r2,32(r2)
   13b54:	10810014 	ori	r2,r2,1024
   13b58:	1007883a 	mov	r3,r2
   13b5c:	2005883a 	mov	r2,r4
   13b60:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   13b64:	e0bffe17 	ldw	r2,-8(fp)
   13b68:	10000915 	stw	zero,36(r2)
   13b6c:	00000a06 	br	13b98 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   13b70:	e0bffe17 	ldw	r2,-8(fp)
   13b74:	10c00917 	ldw	r3,36(r2)
   13b78:	00a00034 	movhi	r2,32768
   13b7c:	10bfff04 	addi	r2,r2,-4
   13b80:	10c00536 	bltu	r2,r3,13b98 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   13b84:	e0bffe17 	ldw	r2,-8(fp)
   13b88:	10800917 	ldw	r2,36(r2)
   13b8c:	10c00044 	addi	r3,r2,1
   13b90:	e0bffe17 	ldw	r2,-8(fp)
   13b94:	10c00915 	stw	r3,36(r2)
   13b98:	008000b4 	movhi	r2,2
   13b9c:	10a26f04 	addi	r2,r2,-30276
   13ba0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   13ba4:	e037883a 	mov	sp,fp
   13ba8:	df000017 	ldw	fp,0(sp)
   13bac:	dec00104 	addi	sp,sp,4
   13bb0:	f800283a 	ret

00013bb4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   13bb4:	defffc04 	addi	sp,sp,-16
   13bb8:	df000315 	stw	fp,12(sp)
   13bbc:	df000304 	addi	fp,sp,12
   13bc0:	e13ffd15 	stw	r4,-12(fp)
   13bc4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13bc8:	00000706 	br	13be8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   13bcc:	e0bffe17 	ldw	r2,-8(fp)
   13bd0:	1090000c 	andi	r2,r2,16384
   13bd4:	1005003a 	cmpeq	r2,r2,zero
   13bd8:	1000031e 	bne	r2,zero,13be8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   13bdc:	00bffd44 	movi	r2,-11
   13be0:	e0bfff15 	stw	r2,-4(fp)
   13be4:	00000b06 	br	13c14 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13be8:	e0bffd17 	ldw	r2,-12(fp)
   13bec:	10c00d17 	ldw	r3,52(r2)
   13bf0:	e0bffd17 	ldw	r2,-12(fp)
   13bf4:	10800c17 	ldw	r2,48(r2)
   13bf8:	18800526 	beq	r3,r2,13c10 <altera_avalon_jtag_uart_close+0x5c>
   13bfc:	e0bffd17 	ldw	r2,-12(fp)
   13c00:	10c00917 	ldw	r3,36(r2)
   13c04:	e0bffd17 	ldw	r2,-12(fp)
   13c08:	10800117 	ldw	r2,4(r2)
   13c0c:	18bfef36 	bltu	r3,r2,13bcc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   13c10:	e03fff15 	stw	zero,-4(fp)
   13c14:	e0bfff17 	ldw	r2,-4(fp)
}
   13c18:	e037883a 	mov	sp,fp
   13c1c:	df000017 	ldw	fp,0(sp)
   13c20:	dec00104 	addi	sp,sp,4
   13c24:	f800283a 	ret

00013c28 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   13c28:	defff804 	addi	sp,sp,-32
   13c2c:	df000715 	stw	fp,28(sp)
   13c30:	df000704 	addi	fp,sp,28
   13c34:	e13ffb15 	stw	r4,-20(fp)
   13c38:	e17ffc15 	stw	r5,-16(fp)
   13c3c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   13c40:	00bff9c4 	movi	r2,-25
   13c44:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   13c48:	e0bffc17 	ldw	r2,-16(fp)
   13c4c:	e0bfff15 	stw	r2,-4(fp)
   13c50:	e0ffff17 	ldw	r3,-4(fp)
   13c54:	189a8060 	cmpeqi	r2,r3,27137
   13c58:	1000041e 	bne	r2,zero,13c6c <altera_avalon_jtag_uart_ioctl+0x44>
   13c5c:	e0ffff17 	ldw	r3,-4(fp)
   13c60:	189a80a0 	cmpeqi	r2,r3,27138
   13c64:	10001b1e 	bne	r2,zero,13cd4 <altera_avalon_jtag_uart_ioctl+0xac>
   13c68:	00002706 	br	13d08 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   13c6c:	e0bffb17 	ldw	r2,-20(fp)
   13c70:	10c00117 	ldw	r3,4(r2)
   13c74:	00a00034 	movhi	r2,32768
   13c78:	10bfffc4 	addi	r2,r2,-1
   13c7c:	18802226 	beq	r3,r2,13d08 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   13c80:	e0bffd17 	ldw	r2,-12(fp)
   13c84:	10800017 	ldw	r2,0(r2)
   13c88:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   13c8c:	e0bff917 	ldw	r2,-28(fp)
   13c90:	10800090 	cmplti	r2,r2,2
   13c94:	1000071e 	bne	r2,zero,13cb4 <altera_avalon_jtag_uart_ioctl+0x8c>
   13c98:	e0fff917 	ldw	r3,-28(fp)
   13c9c:	00a00034 	movhi	r2,32768
   13ca0:	10bfffc4 	addi	r2,r2,-1
   13ca4:	18800326 	beq	r3,r2,13cb4 <altera_avalon_jtag_uart_ioctl+0x8c>
   13ca8:	e0bff917 	ldw	r2,-28(fp)
   13cac:	e0bffe15 	stw	r2,-8(fp)
   13cb0:	00000306 	br	13cc0 <altera_avalon_jtag_uart_ioctl+0x98>
   13cb4:	00e00034 	movhi	r3,32768
   13cb8:	18ffff84 	addi	r3,r3,-2
   13cbc:	e0fffe15 	stw	r3,-8(fp)
   13cc0:	e0bffb17 	ldw	r2,-20(fp)
   13cc4:	e0fffe17 	ldw	r3,-8(fp)
   13cc8:	10c00115 	stw	r3,4(r2)
      rc = 0;
   13ccc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   13cd0:	00000d06 	br	13d08 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   13cd4:	e0bffb17 	ldw	r2,-20(fp)
   13cd8:	10c00117 	ldw	r3,4(r2)
   13cdc:	00a00034 	movhi	r2,32768
   13ce0:	10bfffc4 	addi	r2,r2,-1
   13ce4:	18800826 	beq	r3,r2,13d08 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   13ce8:	e13ffd17 	ldw	r4,-12(fp)
   13cec:	e0bffb17 	ldw	r2,-20(fp)
   13cf0:	10c00917 	ldw	r3,36(r2)
   13cf4:	e0bffb17 	ldw	r2,-20(fp)
   13cf8:	10800117 	ldw	r2,4(r2)
   13cfc:	1885803a 	cmpltu	r2,r3,r2
   13d00:	20800015 	stw	r2,0(r4)
      rc = 0;
   13d04:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   13d08:	e0bffa17 	ldw	r2,-24(fp)
}
   13d0c:	e037883a 	mov	sp,fp
   13d10:	df000017 	ldw	fp,0(sp)
   13d14:	dec00104 	addi	sp,sp,4
   13d18:	f800283a 	ret

00013d1c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   13d1c:	defff204 	addi	sp,sp,-56
   13d20:	dfc00d15 	stw	ra,52(sp)
   13d24:	df000c15 	stw	fp,48(sp)
   13d28:	df000c04 	addi	fp,sp,48
   13d2c:	e13ffb15 	stw	r4,-20(fp)
   13d30:	e17ffc15 	stw	r5,-16(fp)
   13d34:	e1bffd15 	stw	r6,-12(fp)
   13d38:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   13d3c:	e0bffc17 	ldw	r2,-16(fp)
   13d40:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   13d44:	00004806 	br	13e68 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   13d48:	e0bffb17 	ldw	r2,-20(fp)
   13d4c:	10800a17 	ldw	r2,40(r2)
   13d50:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   13d54:	e0bffb17 	ldw	r2,-20(fp)
   13d58:	10800b17 	ldw	r2,44(r2)
   13d5c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   13d60:	e0fff717 	ldw	r3,-36(fp)
   13d64:	e0bff617 	ldw	r2,-40(fp)
   13d68:	18800536 	bltu	r3,r2,13d80 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   13d6c:	e0bff717 	ldw	r2,-36(fp)
   13d70:	e0fff617 	ldw	r3,-40(fp)
   13d74:	10c5c83a 	sub	r2,r2,r3
   13d78:	e0bff815 	stw	r2,-32(fp)
   13d7c:	00000406 	br	13d90 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   13d80:	00820004 	movi	r2,2048
   13d84:	e0fff617 	ldw	r3,-40(fp)
   13d88:	10c5c83a 	sub	r2,r2,r3
   13d8c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   13d90:	e0bff817 	ldw	r2,-32(fp)
   13d94:	1005003a 	cmpeq	r2,r2,zero
   13d98:	10001f1e 	bne	r2,zero,13e18 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   13d9c:	e0fffd17 	ldw	r3,-12(fp)
   13da0:	e0bff817 	ldw	r2,-32(fp)
   13da4:	1880022e 	bgeu	r3,r2,13db0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   13da8:	e0bffd17 	ldw	r2,-12(fp)
   13dac:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   13db0:	e0bffb17 	ldw	r2,-20(fp)
   13db4:	10c00e04 	addi	r3,r2,56
   13db8:	e0bff617 	ldw	r2,-40(fp)
   13dbc:	1887883a 	add	r3,r3,r2
   13dc0:	e0bffa17 	ldw	r2,-24(fp)
   13dc4:	1009883a 	mov	r4,r2
   13dc8:	180b883a 	mov	r5,r3
   13dcc:	e1bff817 	ldw	r6,-32(fp)
   13dd0:	001101c0 	call	1101c <memcpy>
      ptr   += n;
   13dd4:	e0fff817 	ldw	r3,-32(fp)
   13dd8:	e0bffa17 	ldw	r2,-24(fp)
   13ddc:	10c5883a 	add	r2,r2,r3
   13de0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   13de4:	e0fffd17 	ldw	r3,-12(fp)
   13de8:	e0bff817 	ldw	r2,-32(fp)
   13dec:	1885c83a 	sub	r2,r3,r2
   13df0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13df4:	e0fff617 	ldw	r3,-40(fp)
   13df8:	e0bff817 	ldw	r2,-32(fp)
   13dfc:	1885883a 	add	r2,r3,r2
   13e00:	10c1ffcc 	andi	r3,r2,2047
   13e04:	e0bffb17 	ldw	r2,-20(fp)
   13e08:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   13e0c:	e0bffd17 	ldw	r2,-12(fp)
   13e10:	10800048 	cmpgei	r2,r2,1
   13e14:	103fcc1e 	bne	r2,zero,13d48 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   13e18:	e0fffa17 	ldw	r3,-24(fp)
   13e1c:	e0bffc17 	ldw	r2,-16(fp)
   13e20:	1880141e 	bne	r3,r2,13e74 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   13e24:	e0bffe17 	ldw	r2,-8(fp)
   13e28:	1090000c 	andi	r2,r2,16384
   13e2c:	1004c03a 	cmpne	r2,r2,zero
   13e30:	1000101e 	bne	r2,zero,13e74 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   13e34:	e0bffb17 	ldw	r2,-20(fp)
   13e38:	10c00a17 	ldw	r3,40(r2)
   13e3c:	e0bff717 	ldw	r2,-36(fp)
   13e40:	1880051e 	bne	r3,r2,13e58 <altera_avalon_jtag_uart_read+0x13c>
   13e44:	e0bffb17 	ldw	r2,-20(fp)
   13e48:	10c00917 	ldw	r3,36(r2)
   13e4c:	e0bffb17 	ldw	r2,-20(fp)
   13e50:	10800117 	ldw	r2,4(r2)
   13e54:	18bff736 	bltu	r3,r2,13e34 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   13e58:	e0bffb17 	ldw	r2,-20(fp)
   13e5c:	10c00a17 	ldw	r3,40(r2)
   13e60:	e0bff717 	ldw	r2,-36(fp)
   13e64:	18800326 	beq	r3,r2,13e74 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   13e68:	e0bffd17 	ldw	r2,-12(fp)
   13e6c:	10800048 	cmpgei	r2,r2,1
   13e70:	103fb51e 	bne	r2,zero,13d48 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   13e74:	e0fffa17 	ldw	r3,-24(fp)
   13e78:	e0bffc17 	ldw	r2,-16(fp)
   13e7c:	18801926 	beq	r3,r2,13ee4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e80:	0005303a 	rdctl	r2,status
   13e84:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e88:	e0fff517 	ldw	r3,-44(fp)
   13e8c:	00bfff84 	movi	r2,-2
   13e90:	1884703a 	and	r2,r3,r2
   13e94:	1001703a 	wrctl	status,r2
  
  return context;
   13e98:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   13e9c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13ea0:	e0bffb17 	ldw	r2,-20(fp)
   13ea4:	10800817 	ldw	r2,32(r2)
   13ea8:	10c00054 	ori	r3,r2,1
   13eac:	e0bffb17 	ldw	r2,-20(fp)
   13eb0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13eb4:	e0bffb17 	ldw	r2,-20(fp)
   13eb8:	10800017 	ldw	r2,0(r2)
   13ebc:	11000104 	addi	r4,r2,4
   13ec0:	e0bffb17 	ldw	r2,-20(fp)
   13ec4:	10800817 	ldw	r2,32(r2)
   13ec8:	1007883a 	mov	r3,r2
   13ecc:	2005883a 	mov	r2,r4
   13ed0:	10c00035 	stwio	r3,0(r2)
   13ed4:	e0bff917 	ldw	r2,-28(fp)
   13ed8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13edc:	e0bff417 	ldw	r2,-48(fp)
   13ee0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   13ee4:	e0fffa17 	ldw	r3,-24(fp)
   13ee8:	e0bffc17 	ldw	r2,-16(fp)
   13eec:	18800526 	beq	r3,r2,13f04 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   13ef0:	e0fffa17 	ldw	r3,-24(fp)
   13ef4:	e0bffc17 	ldw	r2,-16(fp)
   13ef8:	1887c83a 	sub	r3,r3,r2
   13efc:	e0ffff15 	stw	r3,-4(fp)
   13f00:	00000906 	br	13f28 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   13f04:	e0bffe17 	ldw	r2,-8(fp)
   13f08:	1090000c 	andi	r2,r2,16384
   13f0c:	1005003a 	cmpeq	r2,r2,zero
   13f10:	1000031e 	bne	r2,zero,13f20 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   13f14:	00bffd44 	movi	r2,-11
   13f18:	e0bfff15 	stw	r2,-4(fp)
   13f1c:	00000206 	br	13f28 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   13f20:	00bffec4 	movi	r2,-5
   13f24:	e0bfff15 	stw	r2,-4(fp)
   13f28:	e0bfff17 	ldw	r2,-4(fp)
}
   13f2c:	e037883a 	mov	sp,fp
   13f30:	dfc00117 	ldw	ra,4(sp)
   13f34:	df000017 	ldw	fp,0(sp)
   13f38:	dec00204 	addi	sp,sp,8
   13f3c:	f800283a 	ret

00013f40 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   13f40:	defff204 	addi	sp,sp,-56
   13f44:	dfc00d15 	stw	ra,52(sp)
   13f48:	df000c15 	stw	fp,48(sp)
   13f4c:	df000c04 	addi	fp,sp,48
   13f50:	e13ffb15 	stw	r4,-20(fp)
   13f54:	e17ffc15 	stw	r5,-16(fp)
   13f58:	e1bffd15 	stw	r6,-12(fp)
   13f5c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   13f60:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   13f64:	e0bffc17 	ldw	r2,-16(fp)
   13f68:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   13f6c:	00003a06 	br	14058 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   13f70:	e0bffb17 	ldw	r2,-20(fp)
   13f74:	10800c17 	ldw	r2,48(r2)
   13f78:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   13f7c:	e0bffb17 	ldw	r2,-20(fp)
   13f80:	10800d17 	ldw	r2,52(r2)
   13f84:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   13f88:	e0fffa17 	ldw	r3,-24(fp)
   13f8c:	e0bff917 	ldw	r2,-28(fp)
   13f90:	1880062e 	bgeu	r3,r2,13fac <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   13f94:	e0fff917 	ldw	r3,-28(fp)
   13f98:	e0bffa17 	ldw	r2,-24(fp)
   13f9c:	1885c83a 	sub	r2,r3,r2
   13fa0:	10bfffc4 	addi	r2,r2,-1
   13fa4:	e0bff815 	stw	r2,-32(fp)
   13fa8:	00000c06 	br	13fdc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   13fac:	e0bff917 	ldw	r2,-28(fp)
   13fb0:	1005003a 	cmpeq	r2,r2,zero
   13fb4:	1000051e 	bne	r2,zero,13fcc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   13fb8:	00820004 	movi	r2,2048
   13fbc:	e0fffa17 	ldw	r3,-24(fp)
   13fc0:	10c5c83a 	sub	r2,r2,r3
   13fc4:	e0bff815 	stw	r2,-32(fp)
   13fc8:	00000406 	br	13fdc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   13fcc:	0081ffc4 	movi	r2,2047
   13fd0:	e0fffa17 	ldw	r3,-24(fp)
   13fd4:	10c5c83a 	sub	r2,r2,r3
   13fd8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   13fdc:	e0bff817 	ldw	r2,-32(fp)
   13fe0:	1005003a 	cmpeq	r2,r2,zero
   13fe4:	10001f1e 	bne	r2,zero,14064 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   13fe8:	e0fffd17 	ldw	r3,-12(fp)
   13fec:	e0bff817 	ldw	r2,-32(fp)
   13ff0:	1880022e 	bgeu	r3,r2,13ffc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   13ff4:	e0bffd17 	ldw	r2,-12(fp)
   13ff8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   13ffc:	e0bffb17 	ldw	r2,-20(fp)
   14000:	10c20e04 	addi	r3,r2,2104
   14004:	e0bffa17 	ldw	r2,-24(fp)
   14008:	1885883a 	add	r2,r3,r2
   1400c:	e0fffc17 	ldw	r3,-16(fp)
   14010:	1009883a 	mov	r4,r2
   14014:	180b883a 	mov	r5,r3
   14018:	e1bff817 	ldw	r6,-32(fp)
   1401c:	001101c0 	call	1101c <memcpy>
      ptr   += n;
   14020:	e0fff817 	ldw	r3,-32(fp)
   14024:	e0bffc17 	ldw	r2,-16(fp)
   14028:	10c5883a 	add	r2,r2,r3
   1402c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   14030:	e0fffd17 	ldw	r3,-12(fp)
   14034:	e0bff817 	ldw	r2,-32(fp)
   14038:	1885c83a 	sub	r2,r3,r2
   1403c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14040:	e0fffa17 	ldw	r3,-24(fp)
   14044:	e0bff817 	ldw	r2,-32(fp)
   14048:	1885883a 	add	r2,r3,r2
   1404c:	10c1ffcc 	andi	r3,r2,2047
   14050:	e0bffb17 	ldw	r2,-20(fp)
   14054:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14058:	e0bffd17 	ldw	r2,-12(fp)
   1405c:	10800048 	cmpgei	r2,r2,1
   14060:	103fc31e 	bne	r2,zero,13f70 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14064:	0005303a 	rdctl	r2,status
   14068:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1406c:	e0fff517 	ldw	r3,-44(fp)
   14070:	00bfff84 	movi	r2,-2
   14074:	1884703a 	and	r2,r3,r2
   14078:	1001703a 	wrctl	status,r2
  
  return context;
   1407c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   14080:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14084:	e0bffb17 	ldw	r2,-20(fp)
   14088:	10800817 	ldw	r2,32(r2)
   1408c:	10c00094 	ori	r3,r2,2
   14090:	e0bffb17 	ldw	r2,-20(fp)
   14094:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14098:	e0bffb17 	ldw	r2,-20(fp)
   1409c:	10800017 	ldw	r2,0(r2)
   140a0:	11000104 	addi	r4,r2,4
   140a4:	e0bffb17 	ldw	r2,-20(fp)
   140a8:	10800817 	ldw	r2,32(r2)
   140ac:	1007883a 	mov	r3,r2
   140b0:	2005883a 	mov	r2,r4
   140b4:	10c00035 	stwio	r3,0(r2)
   140b8:	e0bff717 	ldw	r2,-36(fp)
   140bc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   140c0:	e0bff417 	ldw	r2,-48(fp)
   140c4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   140c8:	e0bffd17 	ldw	r2,-12(fp)
   140cc:	10800050 	cmplti	r2,r2,1
   140d0:	1000111e 	bne	r2,zero,14118 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   140d4:	e0bffe17 	ldw	r2,-8(fp)
   140d8:	1090000c 	andi	r2,r2,16384
   140dc:	1004c03a 	cmpne	r2,r2,zero
   140e0:	1000101e 	bne	r2,zero,14124 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   140e4:	e0bffb17 	ldw	r2,-20(fp)
   140e8:	10c00d17 	ldw	r3,52(r2)
   140ec:	e0bff917 	ldw	r2,-28(fp)
   140f0:	1880051e 	bne	r3,r2,14108 <altera_avalon_jtag_uart_write+0x1c8>
   140f4:	e0bffb17 	ldw	r2,-20(fp)
   140f8:	10c00917 	ldw	r3,36(r2)
   140fc:	e0bffb17 	ldw	r2,-20(fp)
   14100:	10800117 	ldw	r2,4(r2)
   14104:	18bff736 	bltu	r3,r2,140e4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   14108:	e0bffb17 	ldw	r2,-20(fp)
   1410c:	10c00d17 	ldw	r3,52(r2)
   14110:	e0bff917 	ldw	r2,-28(fp)
   14114:	18800326 	beq	r3,r2,14124 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   14118:	e0bffd17 	ldw	r2,-12(fp)
   1411c:	10800048 	cmpgei	r2,r2,1
   14120:	103fcd1e 	bne	r2,zero,14058 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   14124:	e0fffc17 	ldw	r3,-16(fp)
   14128:	e0bff617 	ldw	r2,-40(fp)
   1412c:	18800526 	beq	r3,r2,14144 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   14130:	e0fffc17 	ldw	r3,-16(fp)
   14134:	e0bff617 	ldw	r2,-40(fp)
   14138:	1887c83a 	sub	r3,r3,r2
   1413c:	e0ffff15 	stw	r3,-4(fp)
   14140:	00000906 	br	14168 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   14144:	e0bffe17 	ldw	r2,-8(fp)
   14148:	1090000c 	andi	r2,r2,16384
   1414c:	1005003a 	cmpeq	r2,r2,zero
   14150:	1000031e 	bne	r2,zero,14160 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   14154:	00bffd44 	movi	r2,-11
   14158:	e0bfff15 	stw	r2,-4(fp)
   1415c:	00000206 	br	14168 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   14160:	00bffec4 	movi	r2,-5
   14164:	e0bfff15 	stw	r2,-4(fp)
   14168:	e0bfff17 	ldw	r2,-4(fp)
}
   1416c:	e037883a 	mov	sp,fp
   14170:	dfc00117 	ldw	ra,4(sp)
   14174:	df000017 	ldw	fp,0(sp)
   14178:	dec00204 	addi	sp,sp,8
   1417c:	f800283a 	ret

00014180 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   14180:	defff404 	addi	sp,sp,-48
   14184:	df000b15 	stw	fp,44(sp)
   14188:	df000b04 	addi	fp,sp,44
   1418c:	e13ffb15 	stw	r4,-20(fp)
   14190:	e17ffc15 	stw	r5,-16(fp)
   14194:	e1bffd15 	stw	r6,-12(fp)
   14198:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1419c:	e03ff915 	stw	zero,-28(fp)
   141a0:	008000b4 	movhi	r2,2
   141a4:	10a26f04 	addi	r2,r2,-30276
   141a8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   141ac:	1005003a 	cmpeq	r2,r2,zero
   141b0:	1000411e 	bne	r2,zero,142b8 <alt_alarm_start+0x138>
  {
    if (alarm)
   141b4:	e0bffb17 	ldw	r2,-20(fp)
   141b8:	1005003a 	cmpeq	r2,r2,zero
   141bc:	10003b1e 	bne	r2,zero,142ac <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   141c0:	e0fffb17 	ldw	r3,-20(fp)
   141c4:	e0bffd17 	ldw	r2,-12(fp)
   141c8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   141cc:	e0fffb17 	ldw	r3,-20(fp)
   141d0:	e0bffe17 	ldw	r2,-8(fp)
   141d4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   141d8:	0005303a 	rdctl	r2,status
   141dc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   141e0:	e0fff817 	ldw	r3,-32(fp)
   141e4:	00bfff84 	movi	r2,-2
   141e8:	1884703a 	and	r2,r3,r2
   141ec:	1001703a 	wrctl	status,r2
  
  return context;
   141f0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   141f4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   141f8:	008000b4 	movhi	r2,2
   141fc:	10a27004 	addi	r2,r2,-30272
   14200:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   14204:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   14208:	e0fffc17 	ldw	r3,-16(fp)
   1420c:	e0bff917 	ldw	r2,-28(fp)
   14210:	1885883a 	add	r2,r3,r2
   14214:	10c00044 	addi	r3,r2,1
   14218:	e0bffb17 	ldw	r2,-20(fp)
   1421c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   14220:	e0bffb17 	ldw	r2,-20(fp)
   14224:	10c00217 	ldw	r3,8(r2)
   14228:	e0bff917 	ldw	r2,-28(fp)
   1422c:	1880042e 	bgeu	r3,r2,14240 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   14230:	e0fffb17 	ldw	r3,-20(fp)
   14234:	00800044 	movi	r2,1
   14238:	18800405 	stb	r2,16(r3)
   1423c:	00000206 	br	14248 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   14240:	e0bffb17 	ldw	r2,-20(fp)
   14244:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   14248:	e0fffb17 	ldw	r3,-20(fp)
   1424c:	00800074 	movhi	r2,1
   14250:	109bd304 	addi	r2,r2,28492
   14254:	e0bff615 	stw	r2,-40(fp)
   14258:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1425c:	e0fff717 	ldw	r3,-36(fp)
   14260:	e0bff617 	ldw	r2,-40(fp)
   14264:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   14268:	e0bff617 	ldw	r2,-40(fp)
   1426c:	10c00017 	ldw	r3,0(r2)
   14270:	e0bff717 	ldw	r2,-36(fp)
   14274:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14278:	e0bff617 	ldw	r2,-40(fp)
   1427c:	10c00017 	ldw	r3,0(r2)
   14280:	e0bff717 	ldw	r2,-36(fp)
   14284:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   14288:	e0fff617 	ldw	r3,-40(fp)
   1428c:	e0bff717 	ldw	r2,-36(fp)
   14290:	18800015 	stw	r2,0(r3)
   14294:	e0bffa17 	ldw	r2,-24(fp)
   14298:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1429c:	e0bff517 	ldw	r2,-44(fp)
   142a0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   142a4:	e03fff15 	stw	zero,-4(fp)
   142a8:	00000506 	br	142c0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   142ac:	00bffa84 	movi	r2,-22
   142b0:	e0bfff15 	stw	r2,-4(fp)
   142b4:	00000206 	br	142c0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   142b8:	00bfde84 	movi	r2,-134
   142bc:	e0bfff15 	stw	r2,-4(fp)
   142c0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   142c4:	e037883a 	mov	sp,fp
   142c8:	df000017 	ldw	fp,0(sp)
   142cc:	dec00104 	addi	sp,sp,4
   142d0:	f800283a 	ret

000142d4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   142d4:	defffe04 	addi	sp,sp,-8
   142d8:	df000115 	stw	fp,4(sp)
   142dc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   142e0:	e03fff15 	stw	zero,-4(fp)
   142e4:	00000506 	br	142fc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   142e8:	e0bfff17 	ldw	r2,-4(fp)
   142ec:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   142f0:	e0bfff17 	ldw	r2,-4(fp)
   142f4:	10800804 	addi	r2,r2,32
   142f8:	e0bfff15 	stw	r2,-4(fp)
   142fc:	e0bfff17 	ldw	r2,-4(fp)
   14300:	10820030 	cmpltui	r2,r2,2048
   14304:	103ff81e 	bne	r2,zero,142e8 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   14308:	e037883a 	mov	sp,fp
   1430c:	df000017 	ldw	fp,0(sp)
   14310:	dec00104 	addi	sp,sp,4
   14314:	f800283a 	ret

00014318 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   14318:	defff904 	addi	sp,sp,-28
   1431c:	dfc00615 	stw	ra,24(sp)
   14320:	df000515 	stw	fp,20(sp)
   14324:	df000504 	addi	fp,sp,20
   14328:	e13ffd15 	stw	r4,-12(fp)
   1432c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   14330:	e0bffd17 	ldw	r2,-12(fp)
   14334:	1005003a 	cmpeq	r2,r2,zero
   14338:	1000041e 	bne	r2,zero,1434c <alt_dev_llist_insert+0x34>
   1433c:	e0bffd17 	ldw	r2,-12(fp)
   14340:	10800217 	ldw	r2,8(r2)
   14344:	1004c03a 	cmpne	r2,r2,zero
   14348:	1000071e 	bne	r2,zero,14368 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   1434c:	00143cc0 	call	143cc <alt_get_errno>
   14350:	1007883a 	mov	r3,r2
   14354:	00800584 	movi	r2,22
   14358:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1435c:	00bffa84 	movi	r2,-22
   14360:	e0bfff15 	stw	r2,-4(fp)
   14364:	00001306 	br	143b4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   14368:	e0fffd17 	ldw	r3,-12(fp)
   1436c:	e0bffe17 	ldw	r2,-8(fp)
   14370:	e0bffb15 	stw	r2,-20(fp)
   14374:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14378:	e0fffc17 	ldw	r3,-16(fp)
   1437c:	e0bffb17 	ldw	r2,-20(fp)
   14380:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   14384:	e0bffb17 	ldw	r2,-20(fp)
   14388:	10c00017 	ldw	r3,0(r2)
   1438c:	e0bffc17 	ldw	r2,-16(fp)
   14390:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14394:	e0bffb17 	ldw	r2,-20(fp)
   14398:	10c00017 	ldw	r3,0(r2)
   1439c:	e0bffc17 	ldw	r2,-16(fp)
   143a0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   143a4:	e0fffb17 	ldw	r3,-20(fp)
   143a8:	e0bffc17 	ldw	r2,-16(fp)
   143ac:	18800015 	stw	r2,0(r3)

  return 0;  
   143b0:	e03fff15 	stw	zero,-4(fp)
   143b4:	e0bfff17 	ldw	r2,-4(fp)
}
   143b8:	e037883a 	mov	sp,fp
   143bc:	dfc00117 	ldw	ra,4(sp)
   143c0:	df000017 	ldw	fp,0(sp)
   143c4:	dec00204 	addi	sp,sp,8
   143c8:	f800283a 	ret

000143cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   143cc:	defffd04 	addi	sp,sp,-12
   143d0:	dfc00215 	stw	ra,8(sp)
   143d4:	df000115 	stw	fp,4(sp)
   143d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   143dc:	00800074 	movhi	r2,1
   143e0:	109bd004 	addi	r2,r2,28480
   143e4:	10800017 	ldw	r2,0(r2)
   143e8:	1005003a 	cmpeq	r2,r2,zero
   143ec:	1000061e 	bne	r2,zero,14408 <alt_get_errno+0x3c>
   143f0:	00800074 	movhi	r2,1
   143f4:	109bd004 	addi	r2,r2,28480
   143f8:	10800017 	ldw	r2,0(r2)
   143fc:	103ee83a 	callr	r2
   14400:	e0bfff15 	stw	r2,-4(fp)
   14404:	00000306 	br	14414 <alt_get_errno+0x48>
   14408:	008000b4 	movhi	r2,2
   1440c:	10a26a04 	addi	r2,r2,-30296
   14410:	e0bfff15 	stw	r2,-4(fp)
   14414:	e0bfff17 	ldw	r2,-4(fp)
}
   14418:	e037883a 	mov	sp,fp
   1441c:	dfc00117 	ldw	ra,4(sp)
   14420:	df000017 	ldw	fp,0(sp)
   14424:	dec00204 	addi	sp,sp,8
   14428:	f800283a 	ret

0001442c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1442c:	defffd04 	addi	sp,sp,-12
   14430:	dfc00215 	stw	ra,8(sp)
   14434:	df000115 	stw	fp,4(sp)
   14438:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1443c:	00bfff04 	movi	r2,-4
   14440:	00c00074 	movhi	r3,1
   14444:	18d52f04 	addi	r3,r3,21692
   14448:	1885883a 	add	r2,r3,r2
   1444c:	e0bfff15 	stw	r2,-4(fp)
   14450:	00000606 	br	1446c <_do_ctors+0x40>
        (*ctor) (); 
   14454:	e0bfff17 	ldw	r2,-4(fp)
   14458:	10800017 	ldw	r2,0(r2)
   1445c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14460:	e0bfff17 	ldw	r2,-4(fp)
   14464:	10bfff04 	addi	r2,r2,-4
   14468:	e0bfff15 	stw	r2,-4(fp)
   1446c:	e0ffff17 	ldw	r3,-4(fp)
   14470:	00800074 	movhi	r2,1
   14474:	10952e04 	addi	r2,r2,21688
   14478:	18bff62e 	bgeu	r3,r2,14454 <_do_ctors+0x28>
        (*ctor) (); 
}
   1447c:	e037883a 	mov	sp,fp
   14480:	dfc00117 	ldw	ra,4(sp)
   14484:	df000017 	ldw	fp,0(sp)
   14488:	dec00204 	addi	sp,sp,8
   1448c:	f800283a 	ret

00014490 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   14490:	defffd04 	addi	sp,sp,-12
   14494:	dfc00215 	stw	ra,8(sp)
   14498:	df000115 	stw	fp,4(sp)
   1449c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   144a0:	00bfff04 	movi	r2,-4
   144a4:	00c00074 	movhi	r3,1
   144a8:	18d52f04 	addi	r3,r3,21692
   144ac:	1885883a 	add	r2,r3,r2
   144b0:	e0bfff15 	stw	r2,-4(fp)
   144b4:	00000606 	br	144d0 <_do_dtors+0x40>
        (*dtor) (); 
   144b8:	e0bfff17 	ldw	r2,-4(fp)
   144bc:	10800017 	ldw	r2,0(r2)
   144c0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   144c4:	e0bfff17 	ldw	r2,-4(fp)
   144c8:	10bfff04 	addi	r2,r2,-4
   144cc:	e0bfff15 	stw	r2,-4(fp)
   144d0:	e0ffff17 	ldw	r3,-4(fp)
   144d4:	00800074 	movhi	r2,1
   144d8:	10952f04 	addi	r2,r2,21692
   144dc:	18bff62e 	bgeu	r3,r2,144b8 <_do_dtors+0x28>
        (*dtor) (); 
}
   144e0:	e037883a 	mov	sp,fp
   144e4:	dfc00117 	ldw	ra,4(sp)
   144e8:	df000017 	ldw	fp,0(sp)
   144ec:	dec00204 	addi	sp,sp,8
   144f0:	f800283a 	ret

000144f4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   144f4:	defffe04 	addi	sp,sp,-8
   144f8:	dfc00115 	stw	ra,4(sp)
   144fc:	df000015 	stw	fp,0(sp)
   14500:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   14504:	0009883a 	mov	r4,zero
   14508:	01440004 	movi	r5,4096
   1450c:	00150200 	call	15020 <alt_icache_flush>
#endif
}
   14510:	e037883a 	mov	sp,fp
   14514:	dfc00117 	ldw	ra,4(sp)
   14518:	df000017 	ldw	fp,0(sp)
   1451c:	dec00204 	addi	sp,sp,8
   14520:	f800283a 	ret

00014524 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14524:	defff904 	addi	sp,sp,-28
   14528:	dfc00615 	stw	ra,24(sp)
   1452c:	df000515 	stw	fp,20(sp)
   14530:	df000504 	addi	fp,sp,20
   14534:	e13ffc15 	stw	r4,-16(fp)
   14538:	e17ffd15 	stw	r5,-12(fp)
   1453c:	e1bffe15 	stw	r6,-8(fp)
   14540:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   14544:	e0800217 	ldw	r2,8(fp)
   14548:	d8800015 	stw	r2,0(sp)
   1454c:	e13ffc17 	ldw	r4,-16(fp)
   14550:	e17ffd17 	ldw	r5,-12(fp)
   14554:	e1bffe17 	ldw	r6,-8(fp)
   14558:	e1ffff17 	ldw	r7,-4(fp)
   1455c:	00146f80 	call	146f8 <alt_iic_isr_register>
}  
   14560:	e037883a 	mov	sp,fp
   14564:	dfc00117 	ldw	ra,4(sp)
   14568:	df000017 	ldw	fp,0(sp)
   1456c:	dec00204 	addi	sp,sp,8
   14570:	f800283a 	ret

00014574 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   14574:	defff904 	addi	sp,sp,-28
   14578:	df000615 	stw	fp,24(sp)
   1457c:	df000604 	addi	fp,sp,24
   14580:	e13ffe15 	stw	r4,-8(fp)
   14584:	e17fff15 	stw	r5,-4(fp)
   14588:	e0bfff17 	ldw	r2,-4(fp)
   1458c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14590:	0005303a 	rdctl	r2,status
   14594:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14598:	e0fffb17 	ldw	r3,-20(fp)
   1459c:	00bfff84 	movi	r2,-2
   145a0:	1884703a 	and	r2,r3,r2
   145a4:	1001703a 	wrctl	status,r2
  
  return context;
   145a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   145ac:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   145b0:	e0fffc17 	ldw	r3,-16(fp)
   145b4:	00800044 	movi	r2,1
   145b8:	10c4983a 	sll	r2,r2,r3
   145bc:	1007883a 	mov	r3,r2
   145c0:	008000b4 	movhi	r2,2
   145c4:	10a26e04 	addi	r2,r2,-30280
   145c8:	10800017 	ldw	r2,0(r2)
   145cc:	1886b03a 	or	r3,r3,r2
   145d0:	008000b4 	movhi	r2,2
   145d4:	10a26e04 	addi	r2,r2,-30280
   145d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   145dc:	008000b4 	movhi	r2,2
   145e0:	10a26e04 	addi	r2,r2,-30280
   145e4:	10800017 	ldw	r2,0(r2)
   145e8:	100170fa 	wrctl	ienable,r2
   145ec:	e0bffd17 	ldw	r2,-12(fp)
   145f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   145f4:	e0bffa17 	ldw	r2,-24(fp)
   145f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   145fc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   14600:	e037883a 	mov	sp,fp
   14604:	df000017 	ldw	fp,0(sp)
   14608:	dec00104 	addi	sp,sp,4
   1460c:	f800283a 	ret

00014610 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   14610:	defff904 	addi	sp,sp,-28
   14614:	df000615 	stw	fp,24(sp)
   14618:	df000604 	addi	fp,sp,24
   1461c:	e13ffe15 	stw	r4,-8(fp)
   14620:	e17fff15 	stw	r5,-4(fp)
   14624:	e0bfff17 	ldw	r2,-4(fp)
   14628:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1462c:	0005303a 	rdctl	r2,status
   14630:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14634:	e0fffb17 	ldw	r3,-20(fp)
   14638:	00bfff84 	movi	r2,-2
   1463c:	1884703a 	and	r2,r3,r2
   14640:	1001703a 	wrctl	status,r2
  
  return context;
   14644:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14648:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   1464c:	e0fffc17 	ldw	r3,-16(fp)
   14650:	00800044 	movi	r2,1
   14654:	10c4983a 	sll	r2,r2,r3
   14658:	0084303a 	nor	r2,zero,r2
   1465c:	1007883a 	mov	r3,r2
   14660:	008000b4 	movhi	r2,2
   14664:	10a26e04 	addi	r2,r2,-30280
   14668:	10800017 	ldw	r2,0(r2)
   1466c:	1886703a 	and	r3,r3,r2
   14670:	008000b4 	movhi	r2,2
   14674:	10a26e04 	addi	r2,r2,-30280
   14678:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1467c:	008000b4 	movhi	r2,2
   14680:	10a26e04 	addi	r2,r2,-30280
   14684:	10800017 	ldw	r2,0(r2)
   14688:	100170fa 	wrctl	ienable,r2
   1468c:	e0bffd17 	ldw	r2,-12(fp)
   14690:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14694:	e0bffa17 	ldw	r2,-24(fp)
   14698:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1469c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   146a0:	e037883a 	mov	sp,fp
   146a4:	df000017 	ldw	fp,0(sp)
   146a8:	dec00104 	addi	sp,sp,4
   146ac:	f800283a 	ret

000146b0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   146b0:	defffc04 	addi	sp,sp,-16
   146b4:	df000315 	stw	fp,12(sp)
   146b8:	df000304 	addi	fp,sp,12
   146bc:	e13ffe15 	stw	r4,-8(fp)
   146c0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   146c4:	000530fa 	rdctl	r2,ienable
   146c8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   146cc:	e0ffff17 	ldw	r3,-4(fp)
   146d0:	00800044 	movi	r2,1
   146d4:	10c4983a 	sll	r2,r2,r3
   146d8:	1007883a 	mov	r3,r2
   146dc:	e0bffd17 	ldw	r2,-12(fp)
   146e0:	1884703a 	and	r2,r3,r2
   146e4:	1004c03a 	cmpne	r2,r2,zero
}
   146e8:	e037883a 	mov	sp,fp
   146ec:	df000017 	ldw	fp,0(sp)
   146f0:	dec00104 	addi	sp,sp,4
   146f4:	f800283a 	ret

000146f8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   146f8:	defff404 	addi	sp,sp,-48
   146fc:	dfc00b15 	stw	ra,44(sp)
   14700:	df000a15 	stw	fp,40(sp)
   14704:	df000a04 	addi	fp,sp,40
   14708:	e13ffb15 	stw	r4,-20(fp)
   1470c:	e17ffc15 	stw	r5,-16(fp)
   14710:	e1bffd15 	stw	r6,-12(fp)
   14714:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   14718:	00bffa84 	movi	r2,-22
   1471c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   14720:	e0bffc17 	ldw	r2,-16(fp)
   14724:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14728:	e0bff917 	ldw	r2,-28(fp)
   1472c:	10800808 	cmpgei	r2,r2,32
   14730:	1000291e 	bne	r2,zero,147d8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14734:	0005303a 	rdctl	r2,status
   14738:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1473c:	e0fff717 	ldw	r3,-36(fp)
   14740:	00bfff84 	movi	r2,-2
   14744:	1884703a 	and	r2,r3,r2
   14748:	1001703a 	wrctl	status,r2
  
  return context;
   1474c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   14750:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   14754:	e0bff917 	ldw	r2,-28(fp)
   14758:	00c000b4 	movhi	r3,2
   1475c:	18e27b04 	addi	r3,r3,-30228
   14760:	100490fa 	slli	r2,r2,3
   14764:	10c7883a 	add	r3,r2,r3
   14768:	e0bffd17 	ldw	r2,-12(fp)
   1476c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   14770:	e0bff917 	ldw	r2,-28(fp)
   14774:	00c000b4 	movhi	r3,2
   14778:	18e27b04 	addi	r3,r3,-30228
   1477c:	100490fa 	slli	r2,r2,3
   14780:	10c5883a 	add	r2,r2,r3
   14784:	10c00104 	addi	r3,r2,4
   14788:	e0bffe17 	ldw	r2,-8(fp)
   1478c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   14790:	e0bffd17 	ldw	r2,-12(fp)
   14794:	1005003a 	cmpeq	r2,r2,zero
   14798:	1000051e 	bne	r2,zero,147b0 <alt_iic_isr_register+0xb8>
   1479c:	e17ff917 	ldw	r5,-28(fp)
   147a0:	e13ffb17 	ldw	r4,-20(fp)
   147a4:	00145740 	call	14574 <alt_ic_irq_enable>
   147a8:	e0bfff15 	stw	r2,-4(fp)
   147ac:	00000406 	br	147c0 <alt_iic_isr_register+0xc8>
   147b0:	e17ff917 	ldw	r5,-28(fp)
   147b4:	e13ffb17 	ldw	r4,-20(fp)
   147b8:	00146100 	call	14610 <alt_ic_irq_disable>
   147bc:	e0bfff15 	stw	r2,-4(fp)
   147c0:	e0bfff17 	ldw	r2,-4(fp)
   147c4:	e0bffa15 	stw	r2,-24(fp)
   147c8:	e0bff817 	ldw	r2,-32(fp)
   147cc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   147d0:	e0bff617 	ldw	r2,-40(fp)
   147d4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   147d8:	e0bffa17 	ldw	r2,-24(fp)
}
   147dc:	e037883a 	mov	sp,fp
   147e0:	dfc00117 	ldw	ra,4(sp)
   147e4:	df000017 	ldw	fp,0(sp)
   147e8:	dec00204 	addi	sp,sp,8
   147ec:	f800283a 	ret

000147f0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   147f0:	defff904 	addi	sp,sp,-28
   147f4:	dfc00615 	stw	ra,24(sp)
   147f8:	df000515 	stw	fp,20(sp)
   147fc:	df000504 	addi	fp,sp,20
   14800:	e13ffc15 	stw	r4,-16(fp)
   14804:	e17ffd15 	stw	r5,-12(fp)
   14808:	e1bffe15 	stw	r6,-8(fp)
   1480c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   14810:	e13ffd17 	ldw	r4,-12(fp)
   14814:	e17ffe17 	ldw	r5,-8(fp)
   14818:	e1bfff17 	ldw	r6,-4(fp)
   1481c:	0014a080 	call	14a08 <open>
   14820:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   14824:	e0bffb17 	ldw	r2,-20(fp)
   14828:	1004803a 	cmplt	r2,r2,zero
   1482c:	10001c1e 	bne	r2,zero,148a0 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   14830:	e0bffb17 	ldw	r2,-20(fp)
   14834:	00c00074 	movhi	r3,1
   14838:	18d74f04 	addi	r3,r3,23868
   1483c:	10800324 	muli	r2,r2,12
   14840:	10c5883a 	add	r2,r2,r3
   14844:	10c00017 	ldw	r3,0(r2)
   14848:	e0bffc17 	ldw	r2,-16(fp)
   1484c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   14850:	e0bffb17 	ldw	r2,-20(fp)
   14854:	00c00074 	movhi	r3,1
   14858:	18d74f04 	addi	r3,r3,23868
   1485c:	10800324 	muli	r2,r2,12
   14860:	10c5883a 	add	r2,r2,r3
   14864:	10800104 	addi	r2,r2,4
   14868:	10c00017 	ldw	r3,0(r2)
   1486c:	e0bffc17 	ldw	r2,-16(fp)
   14870:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   14874:	e0bffb17 	ldw	r2,-20(fp)
   14878:	00c00074 	movhi	r3,1
   1487c:	18d74f04 	addi	r3,r3,23868
   14880:	10800324 	muli	r2,r2,12
   14884:	10c5883a 	add	r2,r2,r3
   14888:	10800204 	addi	r2,r2,8
   1488c:	10c00017 	ldw	r3,0(r2)
   14890:	e0bffc17 	ldw	r2,-16(fp)
   14894:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   14898:	e13ffb17 	ldw	r4,-20(fp)
   1489c:	00133880 	call	13388 <alt_release_fd>
  }
} 
   148a0:	e037883a 	mov	sp,fp
   148a4:	dfc00117 	ldw	ra,4(sp)
   148a8:	df000017 	ldw	fp,0(sp)
   148ac:	dec00204 	addi	sp,sp,8
   148b0:	f800283a 	ret

000148b4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   148b4:	defffb04 	addi	sp,sp,-20
   148b8:	dfc00415 	stw	ra,16(sp)
   148bc:	df000315 	stw	fp,12(sp)
   148c0:	df000304 	addi	fp,sp,12
   148c4:	e13ffd15 	stw	r4,-12(fp)
   148c8:	e17ffe15 	stw	r5,-8(fp)
   148cc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   148d0:	01000074 	movhi	r4,1
   148d4:	21175204 	addi	r4,r4,23880
   148d8:	e17ffd17 	ldw	r5,-12(fp)
   148dc:	01800044 	movi	r6,1
   148e0:	01c07fc4 	movi	r7,511
   148e4:	00147f00 	call	147f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   148e8:	01000074 	movhi	r4,1
   148ec:	21174f04 	addi	r4,r4,23868
   148f0:	e17ffe17 	ldw	r5,-8(fp)
   148f4:	000d883a 	mov	r6,zero
   148f8:	01c07fc4 	movi	r7,511
   148fc:	00147f00 	call	147f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   14900:	01000074 	movhi	r4,1
   14904:	21175504 	addi	r4,r4,23892
   14908:	e17fff17 	ldw	r5,-4(fp)
   1490c:	01800044 	movi	r6,1
   14910:	01c07fc4 	movi	r7,511
   14914:	00147f00 	call	147f0 <alt_open_fd>
}  
   14918:	e037883a 	mov	sp,fp
   1491c:	dfc00117 	ldw	ra,4(sp)
   14920:	df000017 	ldw	fp,0(sp)
   14924:	dec00204 	addi	sp,sp,8
   14928:	f800283a 	ret

0001492c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1492c:	defffc04 	addi	sp,sp,-16
   14930:	df000315 	stw	fp,12(sp)
   14934:	df000304 	addi	fp,sp,12
   14938:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1493c:	e0bffe17 	ldw	r2,-8(fp)
   14940:	10800217 	ldw	r2,8(r2)
   14944:	10d00034 	orhi	r3,r2,16384
   14948:	e0bffe17 	ldw	r2,-8(fp)
   1494c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14950:	e03ffd15 	stw	zero,-12(fp)
   14954:	00002006 	br	149d8 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14958:	e0bffd17 	ldw	r2,-12(fp)
   1495c:	00c00074 	movhi	r3,1
   14960:	18d74f04 	addi	r3,r3,23868
   14964:	10800324 	muli	r2,r2,12
   14968:	10c5883a 	add	r2,r2,r3
   1496c:	10c00017 	ldw	r3,0(r2)
   14970:	e0bffe17 	ldw	r2,-8(fp)
   14974:	10800017 	ldw	r2,0(r2)
   14978:	1880141e 	bne	r3,r2,149cc <alt_file_locked+0xa0>
   1497c:	e0bffd17 	ldw	r2,-12(fp)
   14980:	00c00074 	movhi	r3,1
   14984:	18d74f04 	addi	r3,r3,23868
   14988:	10800324 	muli	r2,r2,12
   1498c:	10c5883a 	add	r2,r2,r3
   14990:	10800204 	addi	r2,r2,8
   14994:	10800017 	ldw	r2,0(r2)
   14998:	1004403a 	cmpge	r2,r2,zero
   1499c:	10000b1e 	bne	r2,zero,149cc <alt_file_locked+0xa0>
   149a0:	e0bffd17 	ldw	r2,-12(fp)
   149a4:	10800324 	muli	r2,r2,12
   149a8:	1007883a 	mov	r3,r2
   149ac:	00800074 	movhi	r2,1
   149b0:	10974f04 	addi	r2,r2,23868
   149b4:	1887883a 	add	r3,r3,r2
   149b8:	e0bffe17 	ldw	r2,-8(fp)
   149bc:	18800326 	beq	r3,r2,149cc <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   149c0:	00bffcc4 	movi	r2,-13
   149c4:	e0bfff15 	stw	r2,-4(fp)
   149c8:	00000a06 	br	149f4 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   149cc:	e0bffd17 	ldw	r2,-12(fp)
   149d0:	10800044 	addi	r2,r2,1
   149d4:	e0bffd15 	stw	r2,-12(fp)
   149d8:	00800074 	movhi	r2,1
   149dc:	109bcf04 	addi	r2,r2,28476
   149e0:	10800017 	ldw	r2,0(r2)
   149e4:	1007883a 	mov	r3,r2
   149e8:	e0bffd17 	ldw	r2,-12(fp)
   149ec:	18bfda2e 	bgeu	r3,r2,14958 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   149f0:	e03fff15 	stw	zero,-4(fp)
   149f4:	e0bfff17 	ldw	r2,-4(fp)
}
   149f8:	e037883a 	mov	sp,fp
   149fc:	df000017 	ldw	fp,0(sp)
   14a00:	dec00104 	addi	sp,sp,4
   14a04:	f800283a 	ret

00014a08 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   14a08:	defff404 	addi	sp,sp,-48
   14a0c:	dfc00b15 	stw	ra,44(sp)
   14a10:	df000a15 	stw	fp,40(sp)
   14a14:	df000a04 	addi	fp,sp,40
   14a18:	e13ffb15 	stw	r4,-20(fp)
   14a1c:	e17ffc15 	stw	r5,-16(fp)
   14a20:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   14a24:	00bfffc4 	movi	r2,-1
   14a28:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   14a2c:	00bffb44 	movi	r2,-19
   14a30:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   14a34:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   14a38:	e13ffb17 	ldw	r4,-20(fp)
   14a3c:	01400074 	movhi	r5,1
   14a40:	295bcd04 	addi	r5,r5,28468
   14a44:	0014db40 	call	14db4 <alt_find_dev>
   14a48:	e0bffa15 	stw	r2,-24(fp)
   14a4c:	e0bffa17 	ldw	r2,-24(fp)
   14a50:	1004c03a 	cmpne	r2,r2,zero
   14a54:	1000051e 	bne	r2,zero,14a6c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   14a58:	e13ffb17 	ldw	r4,-20(fp)
   14a5c:	0014e480 	call	14e48 <alt_find_file>
   14a60:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   14a64:	00800044 	movi	r2,1
   14a68:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   14a6c:	e0bffa17 	ldw	r2,-24(fp)
   14a70:	1005003a 	cmpeq	r2,r2,zero
   14a74:	1000301e 	bne	r2,zero,14b38 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   14a78:	e13ffa17 	ldw	r4,-24(fp)
   14a7c:	0014f680 	call	14f68 <alt_get_fd>
   14a80:	e0bff815 	stw	r2,-32(fp)
   14a84:	e0bff817 	ldw	r2,-32(fp)
   14a88:	1004403a 	cmpge	r2,r2,zero
   14a8c:	1000031e 	bne	r2,zero,14a9c <open+0x94>
    {
      status = index;
   14a90:	e0bff817 	ldw	r2,-32(fp)
   14a94:	e0bff715 	stw	r2,-36(fp)
   14a98:	00002906 	br	14b40 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   14a9c:	e0bff817 	ldw	r2,-32(fp)
   14aa0:	10800324 	muli	r2,r2,12
   14aa4:	1007883a 	mov	r3,r2
   14aa8:	00800074 	movhi	r2,1
   14aac:	10974f04 	addi	r2,r2,23868
   14ab0:	1885883a 	add	r2,r3,r2
   14ab4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   14ab8:	e0fffc17 	ldw	r3,-16(fp)
   14abc:	00900034 	movhi	r2,16384
   14ac0:	10bfffc4 	addi	r2,r2,-1
   14ac4:	1886703a 	and	r3,r3,r2
   14ac8:	e0bff917 	ldw	r2,-28(fp)
   14acc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   14ad0:	e0bff617 	ldw	r2,-40(fp)
   14ad4:	1004c03a 	cmpne	r2,r2,zero
   14ad8:	1000061e 	bne	r2,zero,14af4 <open+0xec>
   14adc:	e13ff917 	ldw	r4,-28(fp)
   14ae0:	001492c0 	call	1492c <alt_file_locked>
   14ae4:	e0bff715 	stw	r2,-36(fp)
   14ae8:	e0bff717 	ldw	r2,-36(fp)
   14aec:	1004803a 	cmplt	r2,r2,zero
   14af0:	1000131e 	bne	r2,zero,14b40 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   14af4:	e0bffa17 	ldw	r2,-24(fp)
   14af8:	10800317 	ldw	r2,12(r2)
   14afc:	1005003a 	cmpeq	r2,r2,zero
   14b00:	1000091e 	bne	r2,zero,14b28 <open+0x120>
   14b04:	e0bffa17 	ldw	r2,-24(fp)
   14b08:	10800317 	ldw	r2,12(r2)
   14b0c:	e13ff917 	ldw	r4,-28(fp)
   14b10:	e17ffb17 	ldw	r5,-20(fp)
   14b14:	e1bffc17 	ldw	r6,-16(fp)
   14b18:	e1fffd17 	ldw	r7,-12(fp)
   14b1c:	103ee83a 	callr	r2
   14b20:	e0bfff15 	stw	r2,-4(fp)
   14b24:	00000106 	br	14b2c <open+0x124>
   14b28:	e03fff15 	stw	zero,-4(fp)
   14b2c:	e0bfff17 	ldw	r2,-4(fp)
   14b30:	e0bff715 	stw	r2,-36(fp)
   14b34:	00000206 	br	14b40 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   14b38:	00bffb44 	movi	r2,-19
   14b3c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   14b40:	e0bff717 	ldw	r2,-36(fp)
   14b44:	1004403a 	cmpge	r2,r2,zero
   14b48:	1000091e 	bne	r2,zero,14b70 <open+0x168>
  {
    alt_release_fd (index);  
   14b4c:	e13ff817 	ldw	r4,-32(fp)
   14b50:	00133880 	call	13388 <alt_release_fd>
    ALT_ERRNO = -status;
   14b54:	0014b900 	call	14b90 <alt_get_errno>
   14b58:	e0fff717 	ldw	r3,-36(fp)
   14b5c:	00c7c83a 	sub	r3,zero,r3
   14b60:	10c00015 	stw	r3,0(r2)
    return -1;
   14b64:	00bfffc4 	movi	r2,-1
   14b68:	e0bffe15 	stw	r2,-8(fp)
   14b6c:	00000206 	br	14b78 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   14b70:	e0bff817 	ldw	r2,-32(fp)
   14b74:	e0bffe15 	stw	r2,-8(fp)
   14b78:	e0bffe17 	ldw	r2,-8(fp)
}
   14b7c:	e037883a 	mov	sp,fp
   14b80:	dfc00117 	ldw	ra,4(sp)
   14b84:	df000017 	ldw	fp,0(sp)
   14b88:	dec00204 	addi	sp,sp,8
   14b8c:	f800283a 	ret

00014b90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14b90:	defffd04 	addi	sp,sp,-12
   14b94:	dfc00215 	stw	ra,8(sp)
   14b98:	df000115 	stw	fp,4(sp)
   14b9c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   14ba0:	00800074 	movhi	r2,1
   14ba4:	109bd004 	addi	r2,r2,28480
   14ba8:	10800017 	ldw	r2,0(r2)
   14bac:	1005003a 	cmpeq	r2,r2,zero
   14bb0:	1000061e 	bne	r2,zero,14bcc <alt_get_errno+0x3c>
   14bb4:	00800074 	movhi	r2,1
   14bb8:	109bd004 	addi	r2,r2,28480
   14bbc:	10800017 	ldw	r2,0(r2)
   14bc0:	103ee83a 	callr	r2
   14bc4:	e0bfff15 	stw	r2,-4(fp)
   14bc8:	00000306 	br	14bd8 <alt_get_errno+0x48>
   14bcc:	008000b4 	movhi	r2,2
   14bd0:	10a26a04 	addi	r2,r2,-30296
   14bd4:	e0bfff15 	stw	r2,-4(fp)
   14bd8:	e0bfff17 	ldw	r2,-4(fp)
}
   14bdc:	e037883a 	mov	sp,fp
   14be0:	dfc00117 	ldw	ra,4(sp)
   14be4:	df000017 	ldw	fp,0(sp)
   14be8:	dec00204 	addi	sp,sp,8
   14bec:	f800283a 	ret

00014bf0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   14bf0:	defffa04 	addi	sp,sp,-24
   14bf4:	df000515 	stw	fp,20(sp)
   14bf8:	df000504 	addi	fp,sp,20
   14bfc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14c00:	0005303a 	rdctl	r2,status
   14c04:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c08:	e0fffd17 	ldw	r3,-12(fp)
   14c0c:	00bfff84 	movi	r2,-2
   14c10:	1884703a 	and	r2,r3,r2
   14c14:	1001703a 	wrctl	status,r2
  
  return context;
   14c18:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   14c1c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   14c20:	e0bfff17 	ldw	r2,-4(fp)
   14c24:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   14c28:	e0bffc17 	ldw	r2,-16(fp)
   14c2c:	10c00017 	ldw	r3,0(r2)
   14c30:	e0bffc17 	ldw	r2,-16(fp)
   14c34:	10800117 	ldw	r2,4(r2)
   14c38:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   14c3c:	e0bffc17 	ldw	r2,-16(fp)
   14c40:	10c00117 	ldw	r3,4(r2)
   14c44:	e0bffc17 	ldw	r2,-16(fp)
   14c48:	10800017 	ldw	r2,0(r2)
   14c4c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   14c50:	e0fffc17 	ldw	r3,-16(fp)
   14c54:	e0bffc17 	ldw	r2,-16(fp)
   14c58:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   14c5c:	e0fffc17 	ldw	r3,-16(fp)
   14c60:	e0bffc17 	ldw	r2,-16(fp)
   14c64:	18800015 	stw	r2,0(r3)
   14c68:	e0bffe17 	ldw	r2,-8(fp)
   14c6c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14c70:	e0bffb17 	ldw	r2,-20(fp)
   14c74:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   14c78:	e037883a 	mov	sp,fp
   14c7c:	df000017 	ldw	fp,0(sp)
   14c80:	dec00104 	addi	sp,sp,4
   14c84:	f800283a 	ret

00014c88 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   14c88:	defffb04 	addi	sp,sp,-20
   14c8c:	dfc00415 	stw	ra,16(sp)
   14c90:	df000315 	stw	fp,12(sp)
   14c94:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   14c98:	d0a00c17 	ldw	r2,-32720(gp)
   14c9c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   14ca0:	d0a6a917 	ldw	r2,-25948(gp)
   14ca4:	10800044 	addi	r2,r2,1
   14ca8:	d0a6a915 	stw	r2,-25948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14cac:	00003106 	br	14d74 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   14cb0:	e0bffe17 	ldw	r2,-8(fp)
   14cb4:	10800017 	ldw	r2,0(r2)
   14cb8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   14cbc:	e0bffe17 	ldw	r2,-8(fp)
   14cc0:	10800403 	ldbu	r2,16(r2)
   14cc4:	10803fcc 	andi	r2,r2,255
   14cc8:	1005003a 	cmpeq	r2,r2,zero
   14ccc:	1000051e 	bne	r2,zero,14ce4 <alt_tick+0x5c>
   14cd0:	d0a6a917 	ldw	r2,-25948(gp)
   14cd4:	1004c03a 	cmpne	r2,r2,zero
   14cd8:	1000021e 	bne	r2,zero,14ce4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   14cdc:	e0bffe17 	ldw	r2,-8(fp)
   14ce0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   14ce4:	e0bffe17 	ldw	r2,-8(fp)
   14ce8:	10c00217 	ldw	r3,8(r2)
   14cec:	d0a6a917 	ldw	r2,-25948(gp)
   14cf0:	10c01e36 	bltu	r2,r3,14d6c <alt_tick+0xe4>
   14cf4:	e0bffe17 	ldw	r2,-8(fp)
   14cf8:	10800403 	ldbu	r2,16(r2)
   14cfc:	10803fcc 	andi	r2,r2,255
   14d00:	1004c03a 	cmpne	r2,r2,zero
   14d04:	1000191e 	bne	r2,zero,14d6c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   14d08:	e0bffe17 	ldw	r2,-8(fp)
   14d0c:	10c00317 	ldw	r3,12(r2)
   14d10:	e0bffe17 	ldw	r2,-8(fp)
   14d14:	11000517 	ldw	r4,20(r2)
   14d18:	183ee83a 	callr	r3
   14d1c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   14d20:	e0bffd17 	ldw	r2,-12(fp)
   14d24:	1004c03a 	cmpne	r2,r2,zero
   14d28:	1000031e 	bne	r2,zero,14d38 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   14d2c:	e13ffe17 	ldw	r4,-8(fp)
   14d30:	0014bf00 	call	14bf0 <alt_alarm_stop>
   14d34:	00000d06 	br	14d6c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   14d38:	e0bffe17 	ldw	r2,-8(fp)
   14d3c:	10c00217 	ldw	r3,8(r2)
   14d40:	e0bffd17 	ldw	r2,-12(fp)
   14d44:	1887883a 	add	r3,r3,r2
   14d48:	e0bffe17 	ldw	r2,-8(fp)
   14d4c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   14d50:	e0bffe17 	ldw	r2,-8(fp)
   14d54:	10c00217 	ldw	r3,8(r2)
   14d58:	d0a6a917 	ldw	r2,-25948(gp)
   14d5c:	1880032e 	bgeu	r3,r2,14d6c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   14d60:	e0fffe17 	ldw	r3,-8(fp)
   14d64:	00800044 	movi	r2,1
   14d68:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   14d6c:	e0bfff17 	ldw	r2,-4(fp)
   14d70:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14d74:	d0e00c04 	addi	r3,gp,-32720
   14d78:	e0bffe17 	ldw	r2,-8(fp)
   14d7c:	10ffcc1e 	bne	r2,r3,14cb0 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   14d80:	e037883a 	mov	sp,fp
   14d84:	dfc00117 	ldw	ra,4(sp)
   14d88:	df000017 	ldw	fp,0(sp)
   14d8c:	dec00204 	addi	sp,sp,8
   14d90:	f800283a 	ret

00014d94 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   14d94:	deffff04 	addi	sp,sp,-4
   14d98:	df000015 	stw	fp,0(sp)
   14d9c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   14da0:	000170fa 	wrctl	ienable,zero
}
   14da4:	e037883a 	mov	sp,fp
   14da8:	df000017 	ldw	fp,0(sp)
   14dac:	dec00104 	addi	sp,sp,4
   14db0:	f800283a 	ret

00014db4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   14db4:	defff904 	addi	sp,sp,-28
   14db8:	dfc00615 	stw	ra,24(sp)
   14dbc:	df000515 	stw	fp,20(sp)
   14dc0:	df000504 	addi	fp,sp,20
   14dc4:	e13ffd15 	stw	r4,-12(fp)
   14dc8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   14dcc:	e0bffe17 	ldw	r2,-8(fp)
   14dd0:	10800017 	ldw	r2,0(r2)
   14dd4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   14dd8:	e13ffd17 	ldw	r4,-12(fp)
   14ddc:	00102e80 	call	102e8 <strlen>
   14de0:	10800044 	addi	r2,r2,1
   14de4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14de8:	00000d06 	br	14e20 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   14dec:	e0bffc17 	ldw	r2,-16(fp)
   14df0:	11000217 	ldw	r4,8(r2)
   14df4:	e1bffb17 	ldw	r6,-20(fp)
   14df8:	e17ffd17 	ldw	r5,-12(fp)
   14dfc:	00150fc0 	call	150fc <memcmp>
   14e00:	1004c03a 	cmpne	r2,r2,zero
   14e04:	1000031e 	bne	r2,zero,14e14 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   14e08:	e0bffc17 	ldw	r2,-16(fp)
   14e0c:	e0bfff15 	stw	r2,-4(fp)
   14e10:	00000706 	br	14e30 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   14e14:	e0bffc17 	ldw	r2,-16(fp)
   14e18:	10800017 	ldw	r2,0(r2)
   14e1c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14e20:	e0fffe17 	ldw	r3,-8(fp)
   14e24:	e0bffc17 	ldw	r2,-16(fp)
   14e28:	10fff01e 	bne	r2,r3,14dec <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   14e2c:	e03fff15 	stw	zero,-4(fp)
   14e30:	e0bfff17 	ldw	r2,-4(fp)
}
   14e34:	e037883a 	mov	sp,fp
   14e38:	dfc00117 	ldw	ra,4(sp)
   14e3c:	df000017 	ldw	fp,0(sp)
   14e40:	dec00204 	addi	sp,sp,8
   14e44:	f800283a 	ret

00014e48 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   14e48:	defffa04 	addi	sp,sp,-24
   14e4c:	dfc00515 	stw	ra,20(sp)
   14e50:	df000415 	stw	fp,16(sp)
   14e54:	df000404 	addi	fp,sp,16
   14e58:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   14e5c:	00800074 	movhi	r2,1
   14e60:	109bcb04 	addi	r2,r2,28460
   14e64:	10800017 	ldw	r2,0(r2)
   14e68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   14e6c:	00003306 	br	14f3c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   14e70:	e0bffd17 	ldw	r2,-12(fp)
   14e74:	11000217 	ldw	r4,8(r2)
   14e78:	00102e80 	call	102e8 <strlen>
   14e7c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   14e80:	e0bffd17 	ldw	r2,-12(fp)
   14e84:	10c00217 	ldw	r3,8(r2)
   14e88:	e0bffc17 	ldw	r2,-16(fp)
   14e8c:	1885883a 	add	r2,r3,r2
   14e90:	10bfffc4 	addi	r2,r2,-1
   14e94:	10800003 	ldbu	r2,0(r2)
   14e98:	10803fcc 	andi	r2,r2,255
   14e9c:	1080201c 	xori	r2,r2,128
   14ea0:	10bfe004 	addi	r2,r2,-128
   14ea4:	10800bd8 	cmpnei	r2,r2,47
   14ea8:	1000031e 	bne	r2,zero,14eb8 <alt_find_file+0x70>
    {
      len -= 1;
   14eac:	e0bffc17 	ldw	r2,-16(fp)
   14eb0:	10bfffc4 	addi	r2,r2,-1
   14eb4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   14eb8:	e0bffc17 	ldw	r2,-16(fp)
   14ebc:	1007883a 	mov	r3,r2
   14ec0:	e0bffe17 	ldw	r2,-8(fp)
   14ec4:	1885883a 	add	r2,r3,r2
   14ec8:	10800003 	ldbu	r2,0(r2)
   14ecc:	10803fcc 	andi	r2,r2,255
   14ed0:	1080201c 	xori	r2,r2,128
   14ed4:	10bfe004 	addi	r2,r2,-128
   14ed8:	10800be0 	cmpeqi	r2,r2,47
   14edc:	10000a1e 	bne	r2,zero,14f08 <alt_find_file+0xc0>
   14ee0:	e0bffc17 	ldw	r2,-16(fp)
   14ee4:	1007883a 	mov	r3,r2
   14ee8:	e0bffe17 	ldw	r2,-8(fp)
   14eec:	1885883a 	add	r2,r3,r2
   14ef0:	10800003 	ldbu	r2,0(r2)
   14ef4:	10803fcc 	andi	r2,r2,255
   14ef8:	1080201c 	xori	r2,r2,128
   14efc:	10bfe004 	addi	r2,r2,-128
   14f00:	1004c03a 	cmpne	r2,r2,zero
   14f04:	10000a1e 	bne	r2,zero,14f30 <alt_find_file+0xe8>
   14f08:	e0bffd17 	ldw	r2,-12(fp)
   14f0c:	11000217 	ldw	r4,8(r2)
   14f10:	e1bffc17 	ldw	r6,-16(fp)
   14f14:	e17ffe17 	ldw	r5,-8(fp)
   14f18:	00150fc0 	call	150fc <memcmp>
   14f1c:	1004c03a 	cmpne	r2,r2,zero
   14f20:	1000031e 	bne	r2,zero,14f30 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   14f24:	e0bffd17 	ldw	r2,-12(fp)
   14f28:	e0bfff15 	stw	r2,-4(fp)
   14f2c:	00000806 	br	14f50 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   14f30:	e0bffd17 	ldw	r2,-12(fp)
   14f34:	10800017 	ldw	r2,0(r2)
   14f38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   14f3c:	00c00074 	movhi	r3,1
   14f40:	18dbcb04 	addi	r3,r3,28460
   14f44:	e0bffd17 	ldw	r2,-12(fp)
   14f48:	10ffc91e 	bne	r2,r3,14e70 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   14f4c:	e03fff15 	stw	zero,-4(fp)
   14f50:	e0bfff17 	ldw	r2,-4(fp)
}
   14f54:	e037883a 	mov	sp,fp
   14f58:	dfc00117 	ldw	ra,4(sp)
   14f5c:	df000017 	ldw	fp,0(sp)
   14f60:	dec00204 	addi	sp,sp,8
   14f64:	f800283a 	ret

00014f68 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   14f68:	defffc04 	addi	sp,sp,-16
   14f6c:	df000315 	stw	fp,12(sp)
   14f70:	df000304 	addi	fp,sp,12
   14f74:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   14f78:	00bffa04 	movi	r2,-24
   14f7c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   14f80:	e03ffe15 	stw	zero,-8(fp)
   14f84:	00001e06 	br	15000 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   14f88:	e0bffe17 	ldw	r2,-8(fp)
   14f8c:	00c00074 	movhi	r3,1
   14f90:	18d74f04 	addi	r3,r3,23868
   14f94:	10800324 	muli	r2,r2,12
   14f98:	10c5883a 	add	r2,r2,r3
   14f9c:	10800017 	ldw	r2,0(r2)
   14fa0:	1004c03a 	cmpne	r2,r2,zero
   14fa4:	1000131e 	bne	r2,zero,14ff4 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   14fa8:	e0bffe17 	ldw	r2,-8(fp)
   14fac:	00c00074 	movhi	r3,1
   14fb0:	18d74f04 	addi	r3,r3,23868
   14fb4:	10800324 	muli	r2,r2,12
   14fb8:	10c7883a 	add	r3,r2,r3
   14fbc:	e0bfff17 	ldw	r2,-4(fp)
   14fc0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   14fc4:	00800074 	movhi	r2,1
   14fc8:	109bcf04 	addi	r2,r2,28476
   14fcc:	10c00017 	ldw	r3,0(r2)
   14fd0:	e0bffe17 	ldw	r2,-8(fp)
   14fd4:	1880040e 	bge	r3,r2,14fe8 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   14fd8:	00c00074 	movhi	r3,1
   14fdc:	18dbcf04 	addi	r3,r3,28476
   14fe0:	e0bffe17 	ldw	r2,-8(fp)
   14fe4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   14fe8:	e0bffe17 	ldw	r2,-8(fp)
   14fec:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   14ff0:	00000606 	br	1500c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   14ff4:	e0bffe17 	ldw	r2,-8(fp)
   14ff8:	10800044 	addi	r2,r2,1
   14ffc:	e0bffe15 	stw	r2,-8(fp)
   15000:	e0bffe17 	ldw	r2,-8(fp)
   15004:	10800810 	cmplti	r2,r2,32
   15008:	103fdf1e 	bne	r2,zero,14f88 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1500c:	e0bffd17 	ldw	r2,-12(fp)
}
   15010:	e037883a 	mov	sp,fp
   15014:	df000017 	ldw	fp,0(sp)
   15018:	dec00104 	addi	sp,sp,4
   1501c:	f800283a 	ret

00015020 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   15020:	defffb04 	addi	sp,sp,-20
   15024:	df000415 	stw	fp,16(sp)
   15028:	df000404 	addi	fp,sp,16
   1502c:	e13ffe15 	stw	r4,-8(fp)
   15030:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   15034:	e0bfff17 	ldw	r2,-4(fp)
   15038:	10840070 	cmpltui	r2,r2,4097
   1503c:	1000021e 	bne	r2,zero,15048 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   15040:	00840004 	movi	r2,4096
   15044:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   15048:	e0fffe17 	ldw	r3,-8(fp)
   1504c:	e0bfff17 	ldw	r2,-4(fp)
   15050:	1885883a 	add	r2,r3,r2
   15054:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   15058:	e0bffe17 	ldw	r2,-8(fp)
   1505c:	e0bffd15 	stw	r2,-12(fp)
   15060:	00000506 	br	15078 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   15064:	e0bffd17 	ldw	r2,-12(fp)
   15068:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1506c:	e0bffd17 	ldw	r2,-12(fp)
   15070:	10800804 	addi	r2,r2,32
   15074:	e0bffd15 	stw	r2,-12(fp)
   15078:	e0fffd17 	ldw	r3,-12(fp)
   1507c:	e0bffc17 	ldw	r2,-16(fp)
   15080:	18bff836 	bltu	r3,r2,15064 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   15084:	e0bffe17 	ldw	r2,-8(fp)
   15088:	108007cc 	andi	r2,r2,31
   1508c:	1005003a 	cmpeq	r2,r2,zero
   15090:	1000021e 	bne	r2,zero,1509c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   15094:	e0bffd17 	ldw	r2,-12(fp)
   15098:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1509c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   150a0:	e037883a 	mov	sp,fp
   150a4:	df000017 	ldw	fp,0(sp)
   150a8:	dec00104 	addi	sp,sp,4
   150ac:	f800283a 	ret

000150b0 <atexit>:
   150b0:	200b883a 	mov	r5,r4
   150b4:	000d883a 	mov	r6,zero
   150b8:	0009883a 	mov	r4,zero
   150bc:	000f883a 	mov	r7,zero
   150c0:	00151701 	jmpi	15170 <__register_exitproc>

000150c4 <exit>:
   150c4:	defffe04 	addi	sp,sp,-8
   150c8:	000b883a 	mov	r5,zero
   150cc:	dc000015 	stw	r16,0(sp)
   150d0:	dfc00115 	stw	ra,4(sp)
   150d4:	2021883a 	mov	r16,r4
   150d8:	00152a80 	call	152a8 <__call_exitprocs>
   150dc:	00800074 	movhi	r2,1
   150e0:	109bc804 	addi	r2,r2,28448
   150e4:	11000017 	ldw	r4,0(r2)
   150e8:	20800f17 	ldw	r2,60(r4)
   150ec:	10000126 	beq	r2,zero,150f4 <exit+0x30>
   150f0:	103ee83a 	callr	r2
   150f4:	8009883a 	mov	r4,r16
   150f8:	00154980 	call	15498 <_exit>

000150fc <memcmp>:
   150fc:	00c000c4 	movi	r3,3
   15100:	1980032e 	bgeu	r3,r6,15110 <memcmp+0x14>
   15104:	2144b03a 	or	r2,r4,r5
   15108:	10c4703a 	and	r2,r2,r3
   1510c:	10000f26 	beq	r2,zero,1514c <memcmp+0x50>
   15110:	31ffffc4 	addi	r7,r6,-1
   15114:	3000061e 	bne	r6,zero,15130 <memcmp+0x34>
   15118:	00000a06 	br	15144 <memcmp+0x48>
   1511c:	39ffffc4 	addi	r7,r7,-1
   15120:	00bfffc4 	movi	r2,-1
   15124:	21000044 	addi	r4,r4,1
   15128:	29400044 	addi	r5,r5,1
   1512c:	38800526 	beq	r7,r2,15144 <memcmp+0x48>
   15130:	20c00003 	ldbu	r3,0(r4)
   15134:	28800003 	ldbu	r2,0(r5)
   15138:	18bff826 	beq	r3,r2,1511c <memcmp+0x20>
   1513c:	1885c83a 	sub	r2,r3,r2
   15140:	f800283a 	ret
   15144:	0005883a 	mov	r2,zero
   15148:	f800283a 	ret
   1514c:	180f883a 	mov	r7,r3
   15150:	20c00017 	ldw	r3,0(r4)
   15154:	28800017 	ldw	r2,0(r5)
   15158:	18bfed1e 	bne	r3,r2,15110 <memcmp+0x14>
   1515c:	31bfff04 	addi	r6,r6,-4
   15160:	21000104 	addi	r4,r4,4
   15164:	29400104 	addi	r5,r5,4
   15168:	39bff936 	bltu	r7,r6,15150 <memcmp+0x54>
   1516c:	003fe806 	br	15110 <memcmp+0x14>

00015170 <__register_exitproc>:
   15170:	defffa04 	addi	sp,sp,-24
   15174:	00800074 	movhi	r2,1
   15178:	109bc804 	addi	r2,r2,28448
   1517c:	dc000015 	stw	r16,0(sp)
   15180:	14000017 	ldw	r16,0(r2)
   15184:	dd000415 	stw	r20,16(sp)
   15188:	2829883a 	mov	r20,r5
   1518c:	81405217 	ldw	r5,328(r16)
   15190:	dcc00315 	stw	r19,12(sp)
   15194:	dc800215 	stw	r18,8(sp)
   15198:	dc400115 	stw	r17,4(sp)
   1519c:	dfc00515 	stw	ra,20(sp)
   151a0:	2023883a 	mov	r17,r4
   151a4:	3027883a 	mov	r19,r6
   151a8:	3825883a 	mov	r18,r7
   151ac:	28002526 	beq	r5,zero,15244 <__register_exitproc+0xd4>
   151b0:	29000117 	ldw	r4,4(r5)
   151b4:	008007c4 	movi	r2,31
   151b8:	11002716 	blt	r2,r4,15258 <__register_exitproc+0xe8>
   151bc:	8800101e 	bne	r17,zero,15200 <__register_exitproc+0x90>
   151c0:	2105883a 	add	r2,r4,r4
   151c4:	1085883a 	add	r2,r2,r2
   151c8:	20c00044 	addi	r3,r4,1
   151cc:	1145883a 	add	r2,r2,r5
   151d0:	0009883a 	mov	r4,zero
   151d4:	15000215 	stw	r20,8(r2)
   151d8:	28c00115 	stw	r3,4(r5)
   151dc:	2005883a 	mov	r2,r4
   151e0:	dfc00517 	ldw	ra,20(sp)
   151e4:	dd000417 	ldw	r20,16(sp)
   151e8:	dcc00317 	ldw	r19,12(sp)
   151ec:	dc800217 	ldw	r18,8(sp)
   151f0:	dc400117 	ldw	r17,4(sp)
   151f4:	dc000017 	ldw	r16,0(sp)
   151f8:	dec00604 	addi	sp,sp,24
   151fc:	f800283a 	ret
   15200:	29802204 	addi	r6,r5,136
   15204:	00800044 	movi	r2,1
   15208:	110e983a 	sll	r7,r2,r4
   1520c:	30c04017 	ldw	r3,256(r6)
   15210:	2105883a 	add	r2,r4,r4
   15214:	1085883a 	add	r2,r2,r2
   15218:	1185883a 	add	r2,r2,r6
   1521c:	19c6b03a 	or	r3,r3,r7
   15220:	14802015 	stw	r18,128(r2)
   15224:	14c00015 	stw	r19,0(r2)
   15228:	00800084 	movi	r2,2
   1522c:	30c04015 	stw	r3,256(r6)
   15230:	88bfe31e 	bne	r17,r2,151c0 <__register_exitproc+0x50>
   15234:	30804117 	ldw	r2,260(r6)
   15238:	11c4b03a 	or	r2,r2,r7
   1523c:	30804115 	stw	r2,260(r6)
   15240:	003fdf06 	br	151c0 <__register_exitproc+0x50>
   15244:	008000b4 	movhi	r2,2
   15248:	10a2bb04 	addi	r2,r2,-29972
   1524c:	100b883a 	mov	r5,r2
   15250:	80805215 	stw	r2,328(r16)
   15254:	003fd606 	br	151b0 <__register_exitproc+0x40>
   15258:	00800034 	movhi	r2,0
   1525c:	10800004 	addi	r2,r2,0
   15260:	1000021e 	bne	r2,zero,1526c <__register_exitproc+0xfc>
   15264:	013fffc4 	movi	r4,-1
   15268:	003fdc06 	br	151dc <__register_exitproc+0x6c>
   1526c:	01006404 	movi	r4,400
   15270:	103ee83a 	callr	r2
   15274:	1007883a 	mov	r3,r2
   15278:	103ffa26 	beq	r2,zero,15264 <__register_exitproc+0xf4>
   1527c:	80805217 	ldw	r2,328(r16)
   15280:	180b883a 	mov	r5,r3
   15284:	18000115 	stw	zero,4(r3)
   15288:	18800015 	stw	r2,0(r3)
   1528c:	80c05215 	stw	r3,328(r16)
   15290:	18006215 	stw	zero,392(r3)
   15294:	18006315 	stw	zero,396(r3)
   15298:	0009883a 	mov	r4,zero
   1529c:	883fc826 	beq	r17,zero,151c0 <__register_exitproc+0x50>
   152a0:	003fd706 	br	15200 <__register_exitproc+0x90>

000152a4 <register_fini>:
   152a4:	f800283a 	ret

000152a8 <__call_exitprocs>:
   152a8:	00800074 	movhi	r2,1
   152ac:	109bc804 	addi	r2,r2,28448
   152b0:	10800017 	ldw	r2,0(r2)
   152b4:	defff304 	addi	sp,sp,-52
   152b8:	df000b15 	stw	fp,44(sp)
   152bc:	d8800115 	stw	r2,4(sp)
   152c0:	00800034 	movhi	r2,0
   152c4:	10800004 	addi	r2,r2,0
   152c8:	1005003a 	cmpeq	r2,r2,zero
   152cc:	d8800215 	stw	r2,8(sp)
   152d0:	d8800117 	ldw	r2,4(sp)
   152d4:	dd400815 	stw	r21,32(sp)
   152d8:	dd000715 	stw	r20,28(sp)
   152dc:	10805204 	addi	r2,r2,328
   152e0:	dfc00c15 	stw	ra,48(sp)
   152e4:	ddc00a15 	stw	r23,40(sp)
   152e8:	dd800915 	stw	r22,36(sp)
   152ec:	dcc00615 	stw	r19,24(sp)
   152f0:	dc800515 	stw	r18,20(sp)
   152f4:	dc400415 	stw	r17,16(sp)
   152f8:	dc000315 	stw	r16,12(sp)
   152fc:	282b883a 	mov	r21,r5
   15300:	2039883a 	mov	fp,r4
   15304:	d8800015 	stw	r2,0(sp)
   15308:	2829003a 	cmpeq	r20,r5,zero
   1530c:	d8800117 	ldw	r2,4(sp)
   15310:	14405217 	ldw	r17,328(r2)
   15314:	88001026 	beq	r17,zero,15358 <__call_exitprocs+0xb0>
   15318:	ddc00017 	ldw	r23,0(sp)
   1531c:	88800117 	ldw	r2,4(r17)
   15320:	8c802204 	addi	r18,r17,136
   15324:	143fffc4 	addi	r16,r2,-1
   15328:	80000916 	blt	r16,zero,15350 <__call_exitprocs+0xa8>
   1532c:	05bfffc4 	movi	r22,-1
   15330:	a000151e 	bne	r20,zero,15388 <__call_exitprocs+0xe0>
   15334:	8409883a 	add	r4,r16,r16
   15338:	2105883a 	add	r2,r4,r4
   1533c:	1485883a 	add	r2,r2,r18
   15340:	10c02017 	ldw	r3,128(r2)
   15344:	a8c01126 	beq	r21,r3,1538c <__call_exitprocs+0xe4>
   15348:	843fffc4 	addi	r16,r16,-1
   1534c:	85bff81e 	bne	r16,r22,15330 <__call_exitprocs+0x88>
   15350:	d8800217 	ldw	r2,8(sp)
   15354:	10003126 	beq	r2,zero,1541c <__call_exitprocs+0x174>
   15358:	dfc00c17 	ldw	ra,48(sp)
   1535c:	df000b17 	ldw	fp,44(sp)
   15360:	ddc00a17 	ldw	r23,40(sp)
   15364:	dd800917 	ldw	r22,36(sp)
   15368:	dd400817 	ldw	r21,32(sp)
   1536c:	dd000717 	ldw	r20,28(sp)
   15370:	dcc00617 	ldw	r19,24(sp)
   15374:	dc800517 	ldw	r18,20(sp)
   15378:	dc400417 	ldw	r17,16(sp)
   1537c:	dc000317 	ldw	r16,12(sp)
   15380:	dec00d04 	addi	sp,sp,52
   15384:	f800283a 	ret
   15388:	8409883a 	add	r4,r16,r16
   1538c:	88c00117 	ldw	r3,4(r17)
   15390:	2105883a 	add	r2,r4,r4
   15394:	1445883a 	add	r2,r2,r17
   15398:	18ffffc4 	addi	r3,r3,-1
   1539c:	11800217 	ldw	r6,8(r2)
   153a0:	1c001526 	beq	r3,r16,153f8 <__call_exitprocs+0x150>
   153a4:	10000215 	stw	zero,8(r2)
   153a8:	303fe726 	beq	r6,zero,15348 <__call_exitprocs+0xa0>
   153ac:	00c00044 	movi	r3,1
   153b0:	1c06983a 	sll	r3,r3,r16
   153b4:	90804017 	ldw	r2,256(r18)
   153b8:	8cc00117 	ldw	r19,4(r17)
   153bc:	1884703a 	and	r2,r3,r2
   153c0:	10001426 	beq	r2,zero,15414 <__call_exitprocs+0x16c>
   153c4:	90804117 	ldw	r2,260(r18)
   153c8:	1884703a 	and	r2,r3,r2
   153cc:	10000c1e 	bne	r2,zero,15400 <__call_exitprocs+0x158>
   153d0:	2105883a 	add	r2,r4,r4
   153d4:	1485883a 	add	r2,r2,r18
   153d8:	11400017 	ldw	r5,0(r2)
   153dc:	e009883a 	mov	r4,fp
   153e0:	303ee83a 	callr	r6
   153e4:	88800117 	ldw	r2,4(r17)
   153e8:	98bfc81e 	bne	r19,r2,1530c <__call_exitprocs+0x64>
   153ec:	b8800017 	ldw	r2,0(r23)
   153f0:	147fd526 	beq	r2,r17,15348 <__call_exitprocs+0xa0>
   153f4:	003fc506 	br	1530c <__call_exitprocs+0x64>
   153f8:	8c000115 	stw	r16,4(r17)
   153fc:	003fea06 	br	153a8 <__call_exitprocs+0x100>
   15400:	2105883a 	add	r2,r4,r4
   15404:	1485883a 	add	r2,r2,r18
   15408:	11000017 	ldw	r4,0(r2)
   1540c:	303ee83a 	callr	r6
   15410:	003ff406 	br	153e4 <__call_exitprocs+0x13c>
   15414:	303ee83a 	callr	r6
   15418:	003ff206 	br	153e4 <__call_exitprocs+0x13c>
   1541c:	88800117 	ldw	r2,4(r17)
   15420:	1000081e 	bne	r2,zero,15444 <__call_exitprocs+0x19c>
   15424:	89000017 	ldw	r4,0(r17)
   15428:	20000726 	beq	r4,zero,15448 <__call_exitprocs+0x1a0>
   1542c:	b9000015 	stw	r4,0(r23)
   15430:	8809883a 	mov	r4,r17
   15434:	00000000 	call	0 <__alt_mem_onchip_memory-0x10000>
   15438:	bc400017 	ldw	r17,0(r23)
   1543c:	883fb71e 	bne	r17,zero,1531c <__call_exitprocs+0x74>
   15440:	003fc506 	br	15358 <__call_exitprocs+0xb0>
   15444:	89000017 	ldw	r4,0(r17)
   15448:	882f883a 	mov	r23,r17
   1544c:	2023883a 	mov	r17,r4
   15450:	883fb21e 	bne	r17,zero,1531c <__call_exitprocs+0x74>
   15454:	003fc006 	br	15358 <__call_exitprocs+0xb0>

00015458 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   15458:	defffd04 	addi	sp,sp,-12
   1545c:	df000215 	stw	fp,8(sp)
   15460:	df000204 	addi	fp,sp,8
   15464:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   15468:	e0bfff17 	ldw	r2,-4(fp)
   1546c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15470:	e0bffe17 	ldw	r2,-8(fp)
   15474:	1005003a 	cmpeq	r2,r2,zero
   15478:	1000021e 	bne	r2,zero,15484 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   1547c:	002af070 	cmpltui	zero,zero,43969
   15480:	00000106 	br	15488 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   15484:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   15488:	e037883a 	mov	sp,fp
   1548c:	df000017 	ldw	fp,0(sp)
   15490:	dec00104 	addi	sp,sp,4
   15494:	f800283a 	ret

00015498 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15498:	defffd04 	addi	sp,sp,-12
   1549c:	dfc00215 	stw	ra,8(sp)
   154a0:	df000115 	stw	fp,4(sp)
   154a4:	df000104 	addi	fp,sp,4
   154a8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   154ac:	e13fff17 	ldw	r4,-4(fp)
   154b0:	00154580 	call	15458 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   154b4:	003fff06 	br	154b4 <_exit+0x1c>
   154b8:	000152a4 	muli	zero,zero,1354
